/**
	 * 상품의 이미지 (캐러셀, 디테일) 이미지를 업로드하기 위한 서비스
	 * @param ImageSaveDTO data
	 * @return ImageSaveDTO (ignore base64Data)
	 */
	@Override
	public ImageSaveDTO uploadImage(ImageSaveDTO data) {
		// base64에 붙어있는 파일 정보들을 때어서 저장하기 위해 선언
		String[] base64Str = data.getBase64().split(",");
		
		// base64로 인코딩되어 있는 데이터를 디코딩하여 byte[]로 받음
		byte[] decodedBytes = Base64.getDecoder().decode(base64Str[1]);
		
		String defaultPath = System.getProperty("user.home") + "/images";
		String filePath = "";
		
		// JSON에서 받은 type의 정보에 따라 파일 경로가 달라짐.
		if (data.getType().equals("carousel")) {
			filePath = "/carousel/" + data.getFilename();
		} else if (data.getType().equals("detail")) {
			filePath = "/detail/" + data.getFilename();
		}
		try {
			// 지정된 경로에 byte 배열로 받은 이미지를 만들어준다.
			FileUtils.writeByteArrayToFile(new File(defaultPath + filePath), decodedBytes);
			
			// 상품 이미지의 정보를 보내기 위해 DTO와 정보를 넣어준다.
			ProductImgsDTO productImg = new ProductImgsDTO();
			productImg.setProduct_id(data.getProduct_id());
			productImg.setProduct_img_type("image/jpeg");
			productImg.setProduct_img_name(filePath);
			productImg.setProduct_img_category(data.getType());
			
			// 테이블의 정보를 삽입하는 과정을 거친다.
			productImgsDAO.insertProductImg(productImg);
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		// 모든 작업이 끝났다면 base64 인코딩 스트링이 필요 없으므로 빈칸으로 set
		data.setBase64("");
		
		return data;
	}