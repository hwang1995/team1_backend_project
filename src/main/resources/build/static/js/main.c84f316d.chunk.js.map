{"version":3,"sources":["redux/features/reservation/reservationSlice.js","redux/features/diagnosis/diagnosisSlice.js","redux/features/notice/noticeSlice.js","redux/features/emergency/emergencySlice.js","redux/features/history/diagnosisHistorySlice.js","redux/features/member/memberSlice.js","redux/features/common/commonSlice.js","redux/features/diagnostic/diagnosticSlice.js","redux/features/tutorial/tutorialSlice.jsx","apis/axiosConfig.js","redux/store.js","components/common/CustomTheme.jsx","components/common/GlobalStyles.jsx","components/common/button/StyledButton.jsx","components/common/container/ContentContainer.jsx","components/common/header/TitleHeader.jsx","apis/diagnosisAPI.js","components/common/spinner/HashSpinner.jsx","components/common/typography/StyledTypography.jsx","components/diagnosis/table/DataTable.jsx","components/diagnosis/container/DiagnosisDataInput.jsx","components/diagnosis/container/ClrButton.jsx","components/diagnosis/container/SearchContainer.jsx","components/diagnosis/container/SearchItem.jsx","hooks/useWindowSize.jsx","components/common/container/ResponsiveContainer.jsx","components/common/drawer/DrawerHeader.jsx","components/common/search/SearchBox.jsx","components/diagnosis/container/MedicineItem.jsx","apis/searchAPI.js","components/diagnosis/drawer/MedicineDrawer.jsx","components/diagnosis/drawer/InjectorDrawer.jsx","components/diagnosis/container/DiagnosticItem.jsx","components/diagnosis/drawer/DiagnosticDrawer.jsx","components/diagnosis/container/CollapsibleMedicineRows.jsx","components/diagnosis/container/CollapsibleDiagnosticsRows.jsx","components/diagnosis/container/CollapsibleRows.jsx","components/diagnosis/drawer/DiagnosisHistoryDrawer.jsx","components/common/fade/SpringFade.jsx","apis/pushAPI.js","components/diagnosis/modal/DiagnosisModal.jsx","components/common/transition/PageTransition.jsx","components/common/header/drawer/MobileDrawer.jsx","components/common/spinner/Spinner.jsx","components/common/header/drawer/NotificationDrawer.jsx","hooks/useInput.jsx","apis/authAPI.js","components/auth/modal/AuthModal.jsx","components/common/header/ResponsivePageHeader.jsx","pages/dashboard/diagnosis/index.jsx","apis/patientAPI.js","components/diagnosis-history/table/DiagnosisHistoryTableHead.jsx","components/diagnosis-history/table/DiagnosisHistoryTableRow.jsx","components/diagnosis-history/drawer/PatientDiagnosisHistoryDrawer.jsx","components/diagnosis-history/modal/DiagnosisHistorySearchModal.jsx","pages/dashboard/diagnosis-history/index.jsx","components/diagnostic/table/DiagnosticTableHead.jsx","components/common/container/ColorCircleContainer.jsx","components/diagnostic/table/DiagnosticTableRow.jsx","components/common/button/StyledButtonGroup.jsx","components/diagnostic/table/DiagnosticDetailTableHead.jsx","components/diagnostic/table/DiagnosticDetailTableRows.jsx","components/diagnostic/table/DiagnosticDetailInputTableHead.jsx","components/common/input/StyledInputBase.jsx","components/diagnostic/table/DiagnosticDetailInputTableRows.jsx","apis/diagnosisInsepctionAPI.js","components/diagnostic/modal/DiagnosticBarcodeModal.jsx","components/diagnostic/modal/DIagnosticBloodDrawModal.jsx","components/diagnostic/modal/DiagnosticReceptionModal.jsx","components/diagnostic/drawer/DiagnosticDrawer.jsx","hooks/useCalendar.jsx","components/diagnostic/modal/DiagnosticSearchModal.jsx","pages/dashboard/diagnostic/index.jsx","apis/noticeAPI.js","apis/coronaAPI.js","apis/todoAPI.js","apis/hospitalAPI.js","components/dashboard/NoticeItem.jsx","components/common/container/StyledContainer.jsx","components/common/utils.js","components/notice/drawer/NoticeDrawerWrite.jsx","components/notice/drawer/NoticeDrawerSuccess.jsx","components/dashboard/NoticeDrawerItem.jsx","components/notice/drawer/NoticeDrawerMain.jsx","components/notice/modal/DeleteCommentModal.jsx","components/common/spinner/SyncSpinner.jsx","components/notice/modal/DeleteNoticeModal.jsx","components/notice/drawer/TitleHeaderComment.jsx","components/notice/drawer/InputCommentBox.jsx","components/notice/drawer/NoticeDrawerRead.jsx","components/notice/drawer/NoticeDrawerModify.jsx","components/notice/drawer/NoticeDrawer.jsx","components/todo/InputTodoBox.jsx","pages/dashboard/front/TitleHeaderDashBoard.jsx","components/todo/modal/DeleteTodoModal.jsx","components/dashboard/TodoItem.jsx","components/common/spinner/BeatSpinner.jsx","pages/dashboard/front/index.jsx","components/member/modal/PostalCodeModal.jsx","apis/memberAPI.js","components/member/drawer/MemberDrawer.jsx","components/member/drawer/MemberUpdateDrawer.jsx","components/member/modal/DeleteModal.jsx","components/common/spinner/PacmanSpinner.jsx","pages/dashboard/member/index.jsx","components/patient/selectedGender/selectedGender.jsx","components/patient/modal/Modal.jsx","components/patient/drawer/PatientDrawer.jsx","components/patient/selectedGender/selectedUpdateGender.jsx","components/patient/drawer/PatientUpdateDrawer.jsx","components/common/spinner/ClockSpinner.jsx","pages/dashboard/patient/index.jsx","apis/reservationAPI.js","components/reservation/drawer/insert/ReservationInfoContainer.jsx","components/reservation/drawer/insert/Item/Item.jsx","components/reservation/drawer/insert/Item/Result.jsx","components/reservation/drawer/insert/ReservationPatientListContainer.jsx","components/reservation/drawer/insert/ReservationDrawer.jsx","components/reservation/drawer/read/ReservationReadContainer.jsx","components/reservation/drawer/read/ReservationReadDrawer.jsx","components/reservation/drawer/searchReservation/PatientInfoListItem.jsx","components/reservation/drawer/searchReservation/content/index.jsx","components/reservation/drawer/searchReservation/content/UpdateQuestion.jsx","components/reservation/drawer/searchReservation/content/DeleteQuestion.jsx","components/reservation/drawer/searchReservation/ReservationInfoListContainer.jsx","components/reservation/drawer/searchReservation/index.jsx","pages/dashboard/reservation/index.jsx","pages/dashboard/tutorial/DoctorTutorial.jsx","pages/dashboard/tutorial/NurseTutorial.jsx","pages/dashboard/tutorial/InspectorTutorial.jsx","pages/dashboard/tutorial/CommonTutorial.jsx","pages/dashboard/tutorial/OwnerTutorial.jsx","pages/dashboard/tutorial/index.jsx","pages/dashboard/index.jsx","pages/main/index.jsx","pages/temporary/jonghyun/components/ColoredButton.jsx","pages/temporary/jonghyun/components/TableCode.jsx","pages/temporary/jonghyun/index.jsx","pages/temporary/sihyun/LoginPage/index.jsx","pages/temporary/sihyun/index.jsx","components/common/button/LoginButton.jsx","components/common/profile/Profile.jsx","components/common/header/PageHeader.jsx","components/common/sidebar/Sidebar.jsx","components/common/sidebar/MenuSidebar.jsx","pages/temporary/sungwook/index.jsx","pages/temporary/index.jsx","pages/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["reservationSlice","createSlice","name","initialState","pageStatus","addChangeView","inputVal","reservationInfo","reducers","setAddChangeView","state","action","payload","changePage","chaneInputVal","setReservationTime","newReservationInfo","concat","upateReservationTime","map","id","drOpinion","removeReservationTime","filter","actions","diagnosisSlice","patient","diagId","startDate","visitPurpose","patientId","patientName","patientGender","patientBirth","diagnosisInfo","memberId","medicineInfo","injectorInfo","diagnosticInfo","vitalInfo","drawerStatus","medicine","injector","diagnostic","diagnosisHistory","modalStatus","activeStep","setPatient","setMedicineDrawer","setInjectorDrawer","setDiagnosisInfo","newState","addMedicineInfo","isExistItem","findIndex","element","medicineId","length","push","count","removeMedicineInfo","data","addInjectorInfo","removeInjectorInfo","addDiagnosticInfo","diagInspectionId","removeDiagnosticInfo","setDiagnosticDrawer","setDiagnosisHistoryDrawer","addDiagnosticGroupItem","removeDiagnosticGroupItem","filteredItem","bundleCode","setDiagnosisModal","setActiveStep","resetDiagnosisInfos","noticeSlice","noticeItem","notice_id","notice_title","notice_date","notice_content","notice_author","notice_head_text","notice_head_image","noticeCurrentIndex","addNoticeItem","modifyNoticeItem","isExistedItem","removeNoticeItem","setNoticeCurrentIndex","emergencySlice","emergencyItem","emergency_id","emergency_name","emergency_tel","emergency_line","emergencyCurrentIndex","addEmergencyItem","removeEmergencyItem","setEmergencyCurrentIndex","diagnosisHistorySlice","currentPatientId","search","setPatientId","setDrawerStatus","status","setModalStatus","memberSlice","addressInfo","member_postal","member_addr1","gender","imageModalStatus","setAddressInfo","console","log","setGenderStatus","setImageModalStatus","commonSlice","authToken","loginInfo","memberEmail","memberName","memberAuthority","hospitalCode","sidebarInfo","drawer","diagnosis","hospital","headerInfo","notification","auth","setLoginInfo","setSidebarInfo","setHeaderInfo","setAuthToken","diagnosticSlice","barcode","reception","bloodDraw","diagnosticDataInput","currentDiagTestId","currentDiagTestList","setDiagnosticDrawerPage","setDiagnosticModal","setDiagnosticDataInput","diagTestRecordId","value","setCurrentDiagTestId","setCurrentDiagTestList","resetDiagnosticData","tutorialSlice","addAuthHeader","axios","defaults","headers","common","baseURL","process","store","configureStore","reducer","commonReducer","reservation","reservationReducer","diagnosisReducer","diagnosisHistoryReducer","notice","noticeReducer","diagnosticReducer","member","memberReducer","emergency","emergencyReducer","tutorial","tutorialReducer","sessionStorage","getItem","dispatch","parseJSON","JSON","parse","theme","createMuiTheme","typography","fontFamily","button","textTransform","GlobalStyle","createGlobalStyle","reset","StyledButton","styled","Button","width","bgColor","color","defaultProps","ContentContainer","div","TitleHeader","getDiagnosisList","userInfo","a","post","result","registDiagnosisInfo","put","showDiagnosisHistoryByPatientId","get","params","override","css","HashSpinner","isLoading","style","loading","size","StyledTypography","Typography","weight","columns","field","headerName","type","DataTable","useState","setLoading","authInfo","useSelector","diagnosisList","setDiagnosisList","useDispatch","enqueueSnackbar","useSnackbar","handleAlert","variant","message","useEffect","newResult","index","response","setTimeout","getDiagnosis","display","justifyContent","alignItems","height","rows","pageSize","onCellClick","event","row","flexDirection","maxWidth","src","alt","component","marginTop","SearchBase","InputBase","DiagnosisLabel","DiagnosisTextarea","textarea","DiagnosisDataPage","patientInfo","Grid","container","padding","item","xs","md","marginBottom","readOnly","onBlur","e","target","ClrButton","props","setcolor","SearchContainer","SearchItem","addMedicine","setCount","useCallback","addItem","handlePlusBtn","prevState","handleMinusBtn","medicineName","medicineCode","medicineType","medicineUnit","className","IconButton","onClick","React","memo","useWindowSize","undefined","breakpoint","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","ResponsiveContainer","Container","sm","lg","xl","DrawerHeader","SearchBox","setSearchVal","placeholder","noRemove","setInputVal","onChange","onKeyPress","key","MedicineItem","removeMedicine","handleRemoveBtn","flex","margin","searchMedicineList","searchInjectorList","searchDiagnosticList","bundleName","searchDiagnosticListByCode","searchPatientInfoByName","showDiagnosticTestListByPatientId","MedicineDrawer","searchVal","searchData","setSearchData","isOpened","toggleDrawer","open","getMedicineList","SwipeableDrawer","anchor","onOpen","onClose","spacing","border","overflowY","Divider","InjectorDrawer","addInjector","removeInjector","DiagnosticContainer","DiagnosticItem","isRemove","handleGroupButton","presCode","presName","handleAddButton","handleRemoveButton","DiagnosticDrawer","getDiagnosticList","CollapsibleMedicineRows","TableContainer","Table","TableHead","TableCell","TableBody","TableRow","medicineDose","CollapsibleDiagnosticsRows","presUpperLimit","presLowerLimit","presUnit","CollapsibleRows","medicines","injectors","diagnostics","setOpened","KeyboardArrowUp","KeyboardArrowDown","scope","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","DiagnosisHistoryDrawer","historyData","setHistoryData","getDiagnosisHistory","backgroundColor","zIndex","Paper","SpringFade","forwardRef","ref","children","onEnter","onExited","other","useSpring","from","opacity","to","onStart","onRest","sendMqttMessage","pushMessage","getNotificationByTopic","topic","useStyles","makeStyles","modal","paper","minHeight","minWidth","palette","background","boxShadow","shadows","DiagnosisModal","classes","handleNextStep","sendInfo","vital","sendMessageInfo","priority","Modal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","PageTransition","variants","initial","enter","transition","duration","delay","when","exit","location","useLocation","AnimatePresence","motion","animate","pathname","MobileContainer","MobileDrawer","history","useHistory","collapseInfo","setCollapseInfo","pathnames","split","specificPath","isDiagnosis","isPatient","isMember","goPage","page","handleHeaderCollapse","Drawer","clsx","Spinner","NotificationContainer","SuccessItem","InformationItem","WarningItem","DangerItem","NotificationDrawer","pushList","setPushList","getPushTopicList","useInput","defaultValue","setValue","getAuthentication","InputBox","AuthModal","memberPw","autoHideDuration","handleClose","handleLogin","email","password","rest","setItem","stringify","handleKeyPress","autoCapitalize","fullWidth","Hidden","xsDown","PageContainer","SidebarContainer","ResponsivePageHeader","isLogined","setLogined","isDashboard","isTutorial","isMainPage","replace","handleLogout","removeItem","href","handleOpen","smUp","whileHover","scale","DiagnosisPage","steps","position","top","Stepper","label","Step","StepLabel","light","step","marginLeft","getStepContent","bottom","marginRight","getPatientsList","getSearchPatientList","searchInfo","registerPatientInfo","modifyPatient","updatePatientInfo","DiagnosisHistoryTableHead","DiagnosisHistoryTableRow","hover","patientTel","patientAddr1","patientAddr2","patientPostal","PatientDiagnosisHistoryDrawer","DiagnosisHistorySearchModal","patientList","setPatientList","selectedPatientInfo","setSelectedPatientInfo","getPatientsInfo","getPatientsInfoByName","justify","pressed","whileTap","Object","keys","handlePatientToDiagnosisInfo","DiagnosisHistoryPage","rowsPerPage","pager","setPager","buttonSetting","getPatientInfo","borderTop","borderBottom","overflowX","slice","TablePagination","DiagnosticTableHead","ColorCircleContainer","propTypes","PropTypes","number","isRequired","string","DiagnosticTableRow","diagTestId","createdDate","doctorRoom","inspectionStatus","StyledButtonGroup","ButtonGroup","DiagnosticDetailTableHead","DiagnosticDetailTableRows","diagTestValue","diagTestAvgValue","presSpecimenName","presVessel","doctorName","inspectorName","diagTestStatus","DiagnosticDetailInputTableHead","StyledInputBase","DiagnosticDetailInputTableRows","input","maxHeight","Number","parseFloat","showDiagnosticTestListByDiagTestId","showWeeklyDiagnosticTestListByHospitalCode","hospitalInfo","diagnosticChangeStatus","statusInfo","changeDiagnosticTestValue","testInfos","changeStatusToRegisterWithMemberId","barcodeInfo","changeStatusToPendingWithMemberId","changeStatusToCompletedWithMemberId","DiagnosticBarcodeModal","componentRef","useRef","diagnosticList","barcodeList","setBarcodeList","isCompleted","setCompleted","handlePrint","useReactToPrint","content","current","handlePrintAndStatus","inspectorMemberId","canvas","document","createElement","today","moment","Date","format","barcodeText","bwipjs","toCanvas","bcid","text","includetext","textxalign","toDataURL","url","DiagnosticBloodDrawModal","handleBloodDraw","DiagnosticReceptionModal","handleReceptionCancel","SuccessPage","setDiagnosticInfo","diagDataInput","toggleModal","showDiagnosticTestList","togglePage","handleUpdateResult","diagTestRecordIdList","sendListInfo","parseInt","sendDoctorMessageInfo","sendNurseMessageInfo","handleReset","useCalendar","weekNo","week","startOf","toDate","endDate","endOf","calInfo","setCalInfo","sendCalInfo","setSendCalInfo","DiagnosticSearchModal","setPageStatus","patientDetailList","setPatientDetailList","handlePatientClick","handlePatientToDiagnosticInfo","getDiagnosticInfoByPatientId","DiagnosticPage","getPrevWeek","getNextWeek","getDiagnosticInfos","getNoticesList","getNoticeCommentsList","noticeId","getNoticeList","createNotice","noticeInfo","addComment","noiceCommentInfo","addNoticeImage","noticeImageInfo","modifyNotice","removeNotice","delete","removeComment","noticeCommentId","removeComments","getCoronaData","getTodosListByHospitalCode","getTodosListByMemberId","createTodo","todoInfo","removeTodo","todoId","modifyCheckedIn","modifyCheckedOut","getHospitalInfo","NoticeContainer","NoticeItem","noticeTitle","createDate","noticeAuthor","ListItem","StyledContainer","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","NoticeDrawerWrite","setNoticeTitle","imgList","setImgList","editorRef","handleAdd","editorContent","getInstance","getHTML","noticeHeadImage","noticeHeadText","substring","toJSON","noticeContent","alignSelf","fontWeight","previewStyle","initialEditType","language","hooks","addImageBlobHook","blob","callback","ext","imageName","uuid","base64Content","imagePath","completeURL","NoticeDrawerSuccess","NoticeDrawerItem","NoticeDrawerMain","setPage","setRowsPerPage","setNotice","work","matchData","includes","cursor","handleClick","align","rowsPerPageOptions","onChangePage","newPage","onChangeRowsPerPage","justifyItems","DeleteCommentModal","isOpenCommentModal","setOpenCommentModal","setChanged","handleRemoveComment","textAlign","fontSize","borderColor","SyncSpinner","DeleteModal","isOpenModal","setOpenModal","comment","handleRemoveNotice","TitleHeaderComment","InputCommentBox","setInputComment","root","inline","NoticeDrawerRead","setComment","changed","currentIndex","commentContent","getContentWithComment","noticeCount","toString","List","ListItemAvatar","Avatar","ListItemText","primary","secondary","Fragment","NoticeDrawerModify","handleModify","initialValue","NoticeDrawer","setTodoInput","todoContent","TitleHeaderDashBoard","DeleteTodoModal","handleRemoveTodo","TodoItem","loginMemberId","checked","isChecked","setChecked","textDecoration","textDecorationColor","subtract","BeatSpinner","FrontPage","date","changeDate","todo","setTodo","setHospital","corona","setCorona","mineText","setMineText","allText","setAllText","coronaContent","hospitalContent","getNoticeAndTodoAndCorona","TodosListByMemberId","TodosListByHospitalCode","hospitalName","hospitalDescription","Confirmed","Recovered","Deaths","Active","DatePicker","autoOk","clearText","openTo","PostalCodeModal","isModalOpened","onComplete","address","addressType","bname","buildingName","zonecode","fullAddress","extraAddress","showMembersListByHospitalCode","showMembersListByNameAndCode","memberSearchInfo","addMember","memberInfo","modifyMemberInfo","deleteMember","intializeMemberPw","memberImageUpload","imageInfo","isExistedEmail","MemberDrawer","currentUser","showMember","selectVal","setSelectVal","isEmailChecked","setIsEmailChecked","setMemberEmail","keyboardDate","handleKeyDateChange","dateErrorMessage","setDateErrorMessage","currentColor","setCurrentColor","pictures","setPictures","setSelectedGender","female","male","onDrop","picture","selectedGender","handleChangeGender","handleEmailChecked","test","handleSubmit","preventDefault","regExpEmail","regExpPw","regExpTel","memberPassword","memberTel","memberBirth","memberPostal","memberAddress1","memberAddr1","memberAddress2","memberAddr2","memberAddress3","memberImage","memberIntroduction","memberIntroduce","memberColor","memberGender","isValidEmail","isValidPW","isValidTel","memberEnabled","onSubmit","FormControl","InputLabel","Select","labelId","MenuItem","disableFuture","views","onError","invalidDateMessage","maxDateMessage","minDateMessage","withIcon","buttonText","imgExtension","fileSizeError","fileTypeError","maxFileSize","singleImage","withPreview","TextField","multiline","hex","right","MemberUpdateDrawer","isUpdateOpened","setUpdateOpened","memberData","setMemberInfo","handleChange","sendImageName","sameEmail","removeMember","PacmanSpinner","MemberPage","selectedData","setSelectedData","setMember","searchKeyword","trim","handleInitPassword","showSearchMember","endIcon","TableFooter","SelectedMan","genderStatus","AddressModal","setModalOpened","addressClick","postalcode","PatientDrawer","setDisplay","patientSsn","patientHeight","patientWeight","recentDate","addHandleClick","isNaN","genderValue","PatientUpdateDrawer","readPatientData","isUpdateModalOpened","setUpdateModalOpened","changeView","setChange","setPatientInfo","updateHandleClick","updateHandleChange","birth","ClockSpinner","PatientPage","setReadPatientData","patientData","setPatients","addDisplay","getPatient","getAddPatient","resetOnClick","getReservationInfo","WeekNoWithMemberVO","registerReservationInfo","modifyReservationInfo","diagnosisUpdateVO","removeReservationInfo","patientVO","getDoctorInfo","getSearchReservationPatient","patientSearchVO","ReservationInfoContainer","reservationTime","doctorInfo","setCheckChange","setAddDisplay","visitReason","setReason","buttonChange","setButtonChange","handleInsertInfoClick","start","end","weekNum","isPharmacy","isInjector","isDiagnosticTest","isVital","reservationStatus","sendPushMessage","startTime","endTime","patient_name","patient_birth","Item","patientClick","ResultValue","ReservationPatientListContainer","keyword","searchResults","setResult","patientListData","closeClick","ReservationDrawer","registerPageResult","patient_id","patient_gender","checkChange","ReservationReadContainer","setReadOpened","readPatient","checkPage","setCheckPage","day","visitReasonHandleChange","deleteReservationInfo","title","changeVisitReason","updateInfo","updateReservationInfo","ReservationReadDrawer","readOpened","PatientInfoListItem","setReadPatient","pageResult","resultItem","Content","UpdateQuestion","setVisible","setPageResult","DeleteQuestion","ReservationInfoListContainer","SearchReservation","searchOpened","setSearchOpened","visible","ReservationPage","calendarRef","calInstance","setCalInstance","errorText","selectId","setSelectId","member_id","member_name","doctor_room","setDoctorInfo","reservationDataList","setReservationData","doctorListInfo","setDoctorListInfo","scheduleStart","scheduleEnd","now","initStartDate","initEndDate","titleDate","setTitleDate","reservationListData","selectOnChange","doctorData","clear","createSchedules","render","handleMenuItemClick","mId","handlePrevClick","prev","getDateRangeStart","getDateRangeEnd","handleNextClick","next","onBeforeCreateSchedule","onClickSchedule","schedule","handeSearchOpenClick","visibility","view","DoctorTutorial","spaceBetween","navigation","SwiperCore","use","Navigation","NurseTutorial","InspectorTutorial","CommonTutorial","OwnerTutorial","TutorialPage","authority","setAuthority","Dashboard","REACT_APP_MQTT_HOSTNAME","REACT_APP_MQTT_PORT","client","Paho","Client","getTime","onConnectionLost","onMessageArrived","msg","parseMsg","payloadString","connect","onSuccess","subscribe","disconnect","path","exact","MainPage","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","ColoredButton","bg_color","hv_color","TableCode","medicineData","setMedicine","setSearch","Input","medicine_name","medicine_code","i","medicine_id","medicine_type","medicine_unit","InputDiv","DrawerContent","PatientInfo","DrawerTitle","DrawerExitButton","AiOutlineClose","Profile","PatientImage","list","fullList","JonghyunPage","left","setState","InputProps","startAdornment","InputAdornment","role","onKeyDown","LoginPage","SihyunPage","LoginButton","islogined","ProfileInfo","profileInfo3","PageHeader","handleLoginBtn","Sidebar","MenuSidebar","handlePageChange","SungwookPage","selectedDate","handleDateChange","TemporaryPage","HyungyoonPage","Pages","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","locale","ReactDOM","StylesProvider","injectFirst","ThemeProvider","muiTheme","anchorOrigin","vertical","horizontal","TransitionComponent","Fade","libInstance","utils","MomentUtils","getElementById"],"mappings":"kibAEaA,EAAmBC,YAAY,CAC1CC,KAAM,cACNC,aAAc,CACZC,WAAY,OACZC,eAAe,EACfC,SAAU,GACVC,gBAAiB,IAEnBC,SAAU,CAERC,iBAFQ,SAESC,EAAOC,GACtBD,EAAML,cAAgBM,EAAOC,SAG/BC,WANQ,SAMGH,EAAOC,GAChBD,EAAMN,WAAaO,EAAOC,SAE5BE,cATQ,SASMJ,EAAOC,GACnBD,EAAMJ,SAAWK,EAAOC,SAE1BG,mBAZQ,SAYWL,EAAOC,GACxB,IAAMK,EAAqBN,EAAMH,gBAAgBU,OAAON,EAAOC,SAC/DF,EAAMH,gBAAkBS,GAE1BE,qBAhBQ,SAgBaR,EAAOC,GAC1B,IAAMK,EAAqBN,EAAMH,gBAAgBY,KAAI,SAACZ,GACpD,OAAGI,EAAOC,QAAQQ,KAAOb,EAAgBa,GAC1B,2BAAQb,GAAR,IAAyBc,UAAWV,EAAOC,QAAQS,YAGzDd,KAGZG,EAAMH,gBAAkBS,GAEzBM,sBA3BQ,SA2BcZ,EAAOC,GAC3B,IAAMK,EAAqBN,EAAMH,gBAAgBgB,QAAO,SAAChB,GACvD,OAAGI,EAAOC,UAAYL,EAAgBa,MAKvCV,EAAMH,gBAAkBS,MAKxB,EAAwHhB,EAAiBwB,QAAjIX,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,cAEZd,GAFR,EAAmCe,mBAAnC,EAAuDG,qBAAvD,EAA4EI,sBAA5E,EAAmGb,iBAE3FT,EAAf,SCjDayB,EAAiBxB,YAAY,CACxCC,KAAM,YACNC,aAAc,CACZuB,QAAS,CACPN,GAAI,EACJO,OAAQ,EACRC,UAAW,GACXC,aAAc,GACdC,UAAW,EACXC,YAAa,GACbC,cAAe,GACfC,aAAc,IAEhBC,cAAe,CACbP,OAAQ,EACRQ,SAAU,EACVL,UAAW,EACXT,UAAW,GACXe,aAAc,GACdC,aAAc,GACdC,eAAgB,GAChBC,UAAW,IAEbH,aAAc,GACdC,aAAc,GACdC,eAAgB,GAChBE,aAAc,CACZC,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,kBAAkB,GAEpBC,aAAa,EACbC,WAAY,GAEdtC,SAAU,CACRuC,WADQ,SACGrC,EAAOC,GAChBD,EAAMgB,QAAUf,EAAOC,SAEzBoC,kBAJQ,SAIUtC,EAAOC,GACvBD,EAAM8B,aAAaC,SAAW9B,EAAOC,SAEvCqC,kBAPQ,SAOUvC,EAAOC,GACvBD,EAAM8B,aAAaE,SAAW/B,EAAOC,SAEvCsC,iBAVQ,SAUSxC,EAAOC,GACtB,IAAQyB,EAA+C1B,EAA/C0B,aAAcC,EAAiC3B,EAAjC2B,aAAcC,EAAmB5B,EAAnB4B,eAC9Ba,EAAQ,2BACTxC,EAAOC,SADE,IAEZwB,eACAC,eACAC,mBAEF5B,EAAMwB,cAAgBiB,GAExBC,gBApBQ,SAoBQ1C,EAAOC,GACrB,IAAQyB,EAAiB1B,EAAjB0B,aAEFiB,EAAcjB,EAAakB,WAAU,SAACC,GAAD,OACzCA,EAAQC,aAAe7C,EAAOC,QAAQ4C,cAIZ,IAAxBpB,EAAaqB,SAAiC,IAAjBJ,EAC/BjB,EAAasB,KAAK/C,EAAOC,UACC,IAAjByC,IAETjB,EAAaiB,GAAb,2BACKjB,EAAaiB,IADlB,IAEEM,MAAOhD,EAAOC,QAAQ+C,UAI5BC,mBAtCQ,SAsCWlD,EAAOC,GACxB,IACMwC,EADmBzC,EAAjB0B,aACsBb,QAAO,SAACsC,GACpC,OAAIA,EAAKL,aAAe7C,EAAOC,QAAQ4C,cAKzC9C,EAAM0B,aAAee,GAEvBW,gBAhDQ,SAgDQpD,EAAOC,GACrB,IAAQ0B,EAAiB3B,EAAjB2B,aAEFgB,EAAchB,EAAaiB,WAAU,SAACC,GAAD,OACzCA,EAAQC,aAAe7C,EAAOC,QAAQ4C,cAIZ,IAAxBnB,EAAaoB,SAAiC,IAAjBJ,EAC/BhB,EAAaqB,KAAK/C,EAAOC,UACC,IAAjByC,IAEThB,EAAagB,GAAb,2BACKhB,EAAagB,IADlB,IAEEM,MAAOhD,EAAOC,QAAQ+C,UAI5BI,mBAlEQ,SAkEWrD,EAAOC,GACxB,IACMwC,EADmBzC,EAAjB2B,aACsBd,QAAO,SAACsC,GACpC,OAAIA,EAAKL,aAAe7C,EAAOC,QAAQ4C,cAKzC9C,EAAM2B,aAAec,GAEvBa,kBA5EQ,SA4EUtD,EAAOC,GACvB,IAAQ2B,EAAmB5B,EAAnB4B,eAEFe,EAAcf,EAAegB,WAAU,SAACC,GAAD,OAC3CA,EAAQU,mBAAqBtD,EAAOC,QAAQqD,oBAMhB,IAA1B3B,EAAemB,SAAiC,IAAjBJ,EACjCf,EAAeoB,KAAK/C,EAAOC,UACD,IAAjByC,IAETf,EAAee,GAAf,2BACKf,EAAee,IADpB,IAEEM,MAAOhD,EAAOC,QAAQ+C,UAI5BO,qBAhGQ,SAgGaxD,EAAOC,GAC1B,IACMwC,EADqBzC,EAAnB4B,eACwBf,QAAO,SAACsC,GACtC,OAAIA,EAAKI,mBAAqBtD,EAAOC,QAAQqD,oBAK/CvD,EAAM4B,eAAiBa,GAEzBgB,oBA1GQ,SA0GYzD,EAAOC,GACzBD,EAAM8B,aAAaG,WAAahC,EAAOC,SAEzCwD,0BA7GQ,SA6GkB1D,EAAOC,GAC/BD,EAAM8B,aAAaI,iBAAmBjC,EAAOC,SAG/CyD,uBAjHQ,SAiHe3D,EAAOC,GAC5BA,EAAOC,QAAQO,KAAI,SAAC0C,GAAD,OAAUnD,EAAM4B,eAAeoB,KAAKG,OAEzDS,0BApHQ,SAoHkB5D,EAAOC,GAC/B,IACM4D,EADqB7D,EAAnB4B,eAC4Bf,QAAO,SAACsC,GAC1C,OAAIA,EAAKW,aAAe7D,EAAOC,WAKjCF,EAAM4B,eAAiBiC,GAEzBE,kBA9HQ,SA8HU/D,EAAOC,GACvBD,EAAMmC,YAAclC,EAAOC,SAE7B8D,cAjIQ,SAiIMhE,EAAOC,GACnBD,EAAMoC,WAAanC,EAAOC,SAE5B+D,oBApIQ,SAoIYjE,GAclBA,EAAMwB,cAbuB,CAC3BP,OAAQ,EACRQ,SAAU,EACVL,UAAW,EACXT,UAAW,GACXe,aAAc,GACdC,aAAc,GACdC,eAAgB,GAChBC,UAAW,IAOb7B,EAAM0B,aALe,GAMrB1B,EAAM2B,aALe,GAMrB3B,EAAM4B,eALiB,OAYtB,EAmBHb,EAAeD,QAlBjBuB,EADK,EACLA,WACAG,EAFK,EAELA,iBACAE,EAHK,EAGLA,gBACAQ,EAJK,EAILA,mBACAE,EALK,EAKLA,gBACAC,EANK,EAMLA,mBACAC,EAPK,EAOLA,kBACAE,EARK,EAQLA,qBACAlB,EATK,EASLA,kBACAC,EAVK,EAULA,kBACAkB,EAXK,EAWLA,oBACAC,EAZK,EAYLA,0BACAC,EAbK,EAaLA,uBAEAI,GAfK,EAcLH,0BAdK,EAeLG,mBACAC,EAhBK,EAgBLA,cACAC,EAjBK,EAiBLA,oBAIalD,IAAf,QCrNamD,EAAc3E,YAAY,CACrCC,KAAM,SACNC,aAAc,CACZ2C,WAAY,OACZ+B,WAAY,CACV,CACEC,UAAW,EACXC,aAAc,4BACdC,YAAa,mBACbC,eAAgB,kCAChBC,cAAe,qBACfC,iBAAkB,kCAClBC,kBAAmB,8BAErB,CACEN,UAAW,EACXC,aAAc,4BACdC,YAAa,kBACbC,eAAgB,kCAChBC,cAAe,qBACfC,iBAAkB,kCAClBC,kBAAmB,8BAErB,CACEN,UAAW,EACXC,aAAc,4BACdC,YAAa,kBACbC,eAAgB,kCAChBC,cAAe,qBACfC,iBAAkB,kCAClBC,kBAAmB,8BAErB,CACEN,UAAW,EACXC,aAAc,4BACdC,YAAa,kBACbC,eAAgB,kCAChBC,cAAe,qBACfC,iBAAkB,kCAClBC,kBAAmB,8BAErB,CACEN,UAAW,EACXC,aAAc,4BACdE,eAAgB,kCAChBD,YAAa,kBACbE,cAAe,qBACfC,iBAAkB,kCAClBC,kBAAmB,8BAErB,CACEN,UAAW,EACXC,aAAc,4BACdE,eAAgB,kCAChBD,YAAa,kBACbE,cAAe,qBACfC,iBAAkB,kCAClBC,kBAAmB,+BAGvBC,mBAAoB,GAEtB7E,SAAU,CACRkE,cADQ,SACMhE,EAAOC,GACnBD,EAAMoC,WAAanC,EAAOC,SAE5B0E,cAJQ,SAIM5E,EAAOC,GACnB,IAAMwC,EAAWzC,EAAMmE,WACvB1B,EAASO,KAAK/C,EAAOC,SACrBF,EAAMmE,WAAa1B,GAErBoC,iBATQ,SASS7E,EAAOC,GACtB,IAAMwC,EAAWzC,EAAMmE,WACjBW,EAAgBrC,EAASG,WAAU,SAACO,GAAD,OACvCA,EAAKiB,YAAcnE,EAAOC,QAAQkE,cAIb,IAAnBU,IACFrC,EAASqC,GAAiB7E,EAAOC,QACjCF,EAAMmE,WAAa1B,IAGvBsC,iBArBQ,SAqBS/E,EAAOC,GACtB,IAAM4D,EAAe7D,EAAMmE,WAAWtD,QAAO,SAACsC,GAC5C,OAAIA,EAAKiB,YAAcnE,EAAOC,QAAQkE,aAKxCpE,EAAMmE,WAAaN,GAErBmB,sBA9BQ,SA8BchF,EAAOC,GAC3BD,EAAM2E,mBAAqB1E,EAAOC,YAKjC,EAMHgE,EAAYpD,QALdkD,EADK,EACLA,cAIAgB,GALK,EAELJ,cAFK,EAGLC,iBAHK,EAILE,iBAJK,EAKLC,uBAGad,IAAf,QC1Gae,EAAiB1F,YAAY,CACxCC,KAAM,YACNC,aAAc,CACZ2C,WAAY,OACZ8C,cAAe,CACb,CACEC,aAAc,EACdC,eAAgB,wCAChBC,cAAe,cACfC,eAAgB,gBAElB,CACEH,aAAc,EACdC,eAAgB,wCAChBC,cAAe,eACfC,eAAgB,gBAElB,CACEH,aAAc,EACdC,eAAgB,8CAChBC,cAAe,cACfC,eAAgB,gBAElB,CACEH,aAAc,EACdC,eAAgB,2DAChBC,cAAe,gBACfC,eAAgB,gBAElB,CACEH,aAAc,EACdC,eAAgB,oDAChBC,cAAe,gBACfC,eAAgB,iBAGpBC,sBAAuB,GAEzBzF,SAAU,CACRkE,cADQ,SACMhE,EAAOC,GACnBD,EAAMoC,WAAanC,EAAOC,SAE5BsF,iBAJQ,SAISxF,EAAOC,GACtB,IAAMwC,EAAWzC,EAAMkF,cACvBzC,EAASO,KAAK/C,EAAOC,SACrBF,EAAMkF,cAAgBzC,GAGxBgD,oBAVQ,SAUYzF,EAAOC,GACzB,IAAM4D,EAAe7D,EAAMkF,cAAcrE,QAAO,SAACsC,GAC/C,OAAIA,EAAKgC,eAAiBlF,EAAOC,QAAQiF,gBAK3CnF,EAAMkF,cAAgBrB,GAExB6B,yBAnBQ,SAmBiB1F,EAAOC,GAC9BD,EAAMuF,sBAAwBtF,EAAOC,YAKpC,EAKH+E,EAAenE,QAEJmE,GAPR,EACLjB,cADK,EAELwB,iBAFK,EAGLC,oBAHK,EAILC,yBAGaT,EAAf,SCtEaU,EAAwBpG,YAAY,CAC/CC,KAAM,mBACNC,aAAc,CACZmG,iBAAkB,EAClB9D,aAAc,CACZI,kBAAkB,GAEpBC,YAAa,CACX0D,QAAQ,IAGZ/F,SAAU,CACRgG,aADQ,SACK9F,EAAOC,GAClBD,EAAM4F,iBAAmB3F,EAAOC,SAElC6F,gBAJQ,SAIQ/F,EAAOC,GACrB,MAAyBA,EAAOC,QAAxBV,EAAR,EAAQA,KAAMwG,EAAd,EAAcA,OACdhG,EAAM8B,aAAatC,GAAQwG,GAE7BC,eARQ,SAQOjG,EAAOC,GACpB,MAAyBA,EAAOC,QAAxBV,EAAR,EAAQA,KAAMwG,EAAd,EAAcA,OACdhG,EAAMmC,YAAY3C,GAAQwG,MAKzB,EAA0DL,EAAsB7E,QAAxEgF,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBE,EAAvC,EAAuCA,eAE/BN,IAAf,QC5BaO,EAAc3G,YAAY,CACrCC,KAAM,SACNC,aAAc,CACZ0C,aAAa,EACbgE,YAAa,CACXC,cAAe,GACfC,aAAc,IAEhBC,OAAQ,GACRC,kBAAkB,GAEpBzG,SAAU,CACRmG,eADQ,SACOjG,EAAOC,GACpBD,EAAMmC,YAAclC,EAAOC,SAE7BsG,eAJQ,SAIOxG,EAAOC,GACpB,MAAwCA,EAAOC,QAAvCkG,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,aACvBI,QAAQC,IAAI,sBAAQzG,EAAOC,SAC3BF,EAAMmG,YAAc,CAClBC,gBACAC,iBAGJM,gBAZQ,SAYQ3G,EAAOC,GACrBD,EAAMsG,OAASrG,EAAOC,SAGxB0G,oBAhBQ,SAgBY5G,EAAOC,GACzBD,EAAMuG,iBAAmBtG,EAAOC,YAK/B,EAKHgG,EAAYpF,QAJdmF,GADK,EACLA,eACAO,GAFK,EAELA,eACAG,GAHK,EAGLA,gBAIaT,IAPR,EAILU,oBAGaV,EAAf,SCxCaW,GAActH,YAAY,CACrCC,KAAM,SACNC,aAAc,CACZqH,UAAW,GACXC,UAAW,CACTtF,SAAU,EACVuF,YAAa,GACbC,WAAY,GACZC,gBAAiB,GACjBC,aAAc,IAEhBC,YAAa,CACXC,QAAQ,EACRC,WAAW,EACXC,UAAU,EACVvG,SAAS,GAEXwG,WAAY,CACVH,QAAQ,EACRI,cAAc,EACdC,MAAM,EACNJ,WAAW,EACXC,UAAU,EACVvG,SAAS,IAGblB,SAAU,CACR6H,aADQ,SACK3H,EAAOC,GAEK,KAAnBA,EAAOC,UAGXF,EAAM+G,UAAY9G,EAAOC,UAG3B0H,eATQ,SASO5H,EAAOC,GACpB,MAAyBA,EAAOC,QAAxBV,EAAR,EAAQA,KAAMwG,EAAd,EAAcA,OACdhG,EAAMoH,YAAY5H,GAAQwG,GAE5B6B,cAbQ,SAaM7H,EAAOC,GACnB,MAAyBA,EAAOC,QAAxBV,EAAR,EAAQA,KAAMwG,EAAd,EAAcA,OACdhG,EAAMwH,WAAWhI,GAAQwG,GAE3B8B,aAjBQ,SAiBK9H,EAAOC,GAClBD,EAAM8G,UAAY7G,EAAOC,YAKxB,GACL2G,GAAY/F,QADC6G,GAAR,GAAQA,aAAcC,GAAtB,GAAsBA,eAAgBC,GAAtC,GAAsCA,cAAeC,GAArD,GAAqDA,aAG7CjB,MAAf,QCpDakB,GAAkBxI,YAAY,CACzCC,KAAM,aACNC,aAAc,CACZqC,aAAc,CACZkE,QAAQ,EACRtG,WAAY,QAEdyC,YAAa,CACX6F,SAAS,EACTC,WAAW,EACXC,WAAW,EACXrC,QAAQ,GAEVsC,oBAAqB,GACrBC,kBAAmB,EACnBC,oBAAqB,IAEvBvI,SAAU,CACR2D,oBADQ,SACYzD,EAAOC,GACzBD,EAAM8B,aAAakE,OAAS/F,EAAOC,SAErCoI,wBAJQ,SAIgBtI,EAAOC,GAC7BD,EAAM8B,aAAapC,WAAaO,EAAOC,SAEzCqI,mBAPQ,SAOWvI,EAAOC,GACxB,MAAyBA,EAAOC,QAAxBV,EAAR,EAAQA,KAAMwG,EAAd,EAAcA,OACdhG,EAAMmC,YAAY3C,GAAQwG,GAE5BwC,uBAXQ,SAWexI,EAAOC,GAC5B,MAAoCA,EAAOC,QAAnCuI,EAAR,EAAQA,iBAAkBC,EAA1B,EAA0BA,MAC1B1I,EAAMmI,oBAAoBM,GAAoBC,GAEhDC,qBAfQ,SAea3I,EAAOC,GAC1BD,EAAMoI,kBAAoBnI,EAAOC,SAEnC0I,uBAlBQ,SAkBe5I,EAAOC,GAC5BD,EAAMqI,oBAAsBpI,EAAOC,SAErC2I,oBArBQ,SAqBY7I,GAClBA,EAAMmI,oBAAsB,GAC5BnI,EAAMoI,kBAAoB,EAC1BpI,EAAMqI,oBAAsB,OAM3B,GAKHN,GAAgBjH,QAJlB2C,GADK,GACLA,oBACA6E,GAFK,GAELA,wBACAC,GAHK,GAGLA,mBACAC,GAJK,GAILA,uBAAwBG,GAJnB,GAImBA,qBAAsBC,GAJzC,GAIyCA,uBAAwBC,GAJjE,GAIiEA,oBAGzDd,MAAf,QCtDae,GAAgBvJ,YAAY,CACvCC,KAAM,SACNC,aAAc,CACZ2C,WAAY,QAGdtC,SAAU,CACRkE,cADQ,SACMhE,EAAOC,GACnBD,EAAMoC,WAAanC,EAAOC,YAM9B8D,GACE8E,GAAchI,QADhBkD,cAGa8E,MAAf,Q,oBCdO,SAASC,GAAcjC,GAC5BkC,KAAMC,SAASC,QAAQC,OAAvB,UAA6CrC,EAL/CkC,KAAMC,SAASG,QAAf,UAA4BC,gCAA5B,WCYA,IAAMC,GAAQC,YAAe,CAC3BC,QAAS,CACPL,OAAQM,GACRC,YAAaC,EACbrC,UAAWsC,EACX1H,iBAAkB2H,EAClBC,OAAQC,EACR9H,WAAY+H,GACZC,OAAQC,GACRC,UAAWC,EACXC,SAAUC,MAUd,GALIC,eAAeC,QAAQ,eACzBzB,GAAcwB,eAAeC,QAAQ,cACrClB,GAAMmB,SAAS3C,GAAayC,eAAeC,QAAQ,gBAGjDD,eAAeC,QAAQ,YAAa,CACtC,IAAME,GAAYC,KAAKC,MAAML,eAAeC,QAAQ,aACpDlB,GAAMmB,SAAS9C,GAAa+C,KAKfpB,I,MAAAA,M,UCtBAuB,GAhBDC,aAAe,CAC3BC,WAAY,CACVC,WAAY,CACV,qBACA,OACA,eACA,gBACA,sBAGFC,OAAQ,CACNC,cAAe,W,4BC2FNC,GArGKC,aAAH,mhDACXC,M,2ICOAC,GAAeC,aAAOC,KAAPD,CAAH,qMACP,qBAAGE,SAGQ,qBAAGC,SAAyB,YACvC,qBAAGC,SAOdL,GAAaM,aAAe,CAC1BH,MAAO,OACPE,MAAO,WAGML,I,YAAAA,MCrBAO,GALUN,KAAOO,IAAV,kECkBPC,GAlBKR,KAAOO,IAAV,qS,8CC8BJE,GAAgB,yCAAG,WAAOC,GAAP,gBAAAC,EAAA,sEACPlD,KAAMmD,KAAK,aAAcF,GADlB,cACtBG,EADsB,yBAErBA,EAAOjJ,KAAKA,MAFS,2CAAH,sDAkChBkJ,GAAmB,yCAAG,WAAO7K,GAAP,gBAAA0K,EAAA,sEACVlD,KAAMsD,IAAI,aAAc9K,GADd,cACzB4K,EADyB,yBAExBA,EAAOjJ,KAAKA,MAFY,2CAAH,sDA0CnBoJ,GAA+B,yCAAG,WAAOnL,GAAP,gBAAA8K,EAAA,sEACtBlD,KAAMwD,IAAI,qBAAsB,CACjDC,OAAQ,CACJrL,eAHmC,cACrCgL,EADqC,yBAMpCA,EAAOjJ,KAAKA,MANwB,2CAAH,sD,6BCxGtCuJ,GAAWC,aAAH,+FAYCC,GANK,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAClB,sBAAKC,MAAO,CAAErB,MAAO,QAArB,SACE,eAAC,KAAD,CAAYE,MAAM,UAAUoB,QAASF,EAAWF,IAAKD,GAAUM,KAAM,S,UCTnEC,GAAmB1B,aAAO2B,KAAP3B,CAAH,mEACL,YAAiB,IAAd4B,EAAa,EAAbA,OAEhB,OAAIA,EAAS,EACJ,IAEuB,IAJb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAI1BA,EAAS,MAEpB,qBAAGxB,SAGdsB,GAAiBrB,aAAe,CAC9BuB,OAAQ,EACRxB,MAAO,WAGMsB,I,YAAAA,MCVTG,GAAU,CACd,CAAEC,MAAO,SAAUC,WAAY,eAAM7B,MAAO,IAAK8B,KAAM,UACvD,CAAEF,MAAO,cAAeC,WAAY,4BAAS7B,MAAO,KACpD,CAAE4B,MAAO,eAAgBC,WAAY,2BAAQ7B,MAAO,KACpD,CAAE4B,MAAO,gBAAiBC,WAAY,eAAM7B,MAAO,KACnD,CAAE4B,MAAO,YAAaC,WAAY,4BAAS7B,MAAO,KAClD,CAAE4B,MAAO,eAAgBC,WAAY,4BAAS7B,MAAO,MAsGxC+B,GA9FG,WAChB,MAAgCC,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KACMC,EAAWC,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aACrD,EAA0C0G,mBAAS,IAAnD,oBAAOI,EAAP,KAAsBC,EAAtB,KACMrD,EAAWsD,cACTC,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAGJE,qBAAU,WAAM,8CACd,iCAAAnC,EAAA,+EAEyBF,GAAiB2B,GAF1C,OAEUvB,EAFV,OAIUkC,EAAYlC,EAAO3L,KAAI,SAAC0C,EAAMoL,GAAP,oBAAoB7N,GAAI6N,GAAUpL,MAC/D2K,EAAiBQ,GACjB7H,QAAQC,IAAI0F,GACZsB,GAAW,GAPf,kDASYU,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GACrBV,GAAW,GAXf,2DADc,sBAede,YAAW,YAfI,WAAD,wBAgBZC,KACC,OAEF,IAOH,OACE,gBAAC,WAAD,WACG7B,GACC,sBACEC,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZpD,MAAO,QACPqD,OAAQ,QANZ,SASE,eAAC,GAAD,OAGFjC,GAAagB,EAAc9K,OAAS,GACpC,sBAAK+J,MAAO,CAAEgC,OAAQ,IAAKrD,MAAO,QAAlC,SACE,eAAC,KAAD,CACEsD,KAAMlB,EACNT,QAASA,GACT4B,SAAU,EACVC,YA1BU,SAACC,GACnB,IAAQC,EAAQD,EAARC,IAER1E,EAASpI,EAAW8M,UA4BhBtC,GAAsC,IAAzBgB,EAAc9K,QAC3B,uBACE+J,MAAO,CACLgC,OAAQ,OACRrD,MAAO,OACPkD,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZO,cAAe,UAPnB,UAUE,sBAAKtC,MAAO,CAAErB,MAAO,OAAQ4D,SAAU,SAAvC,SACE,sBAAKC,IAAI,0BAA0BC,IAAI,YAAY9D,MAAM,WAE3D,eAAC,GAAD,CACE0C,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CACL2C,UAAW,QALf,uK,UC/FJC,GAAanE,aAAOoE,KAAPpE,CAAH,iMAUVqE,GAAiBrE,KAAOO,IAAV,+GAOd+D,GAAoBtE,KAAOuE,SAAV,mPA6ERC,GA7DW,WAExB,IAAQtO,EAAamM,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAAjDtF,SAGFuO,EAAcpC,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUtG,WACrDyJ,EAAWsD,cAgBjB,OACE,eAAC,WAAD,UACE,gBAACkC,GAAA,EAAD,CAAMC,WAAS,EAACpD,MAAO,CAAEqD,QAAS,QAAlC,UACE,eAACF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGxD,MAAO,CAAEyD,aAAc,QAAhD,SACE,eAACX,GAAD,6BAEF,eAACK,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAACZ,GAAD,CAAYc,UAAQ,EAAC9H,MAAOsH,EAAY3O,gBAE1C,eAAC4O,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGxD,MAAO,CAAEyD,aAAc,QAAhD,SACE,eAACX,GAAD,yCAEF,eAACK,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAACZ,GAAD,CAAYc,UAAQ,EAAC9H,MAAOsH,EAAYzO,iBAE1C,eAAC0O,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGxD,MAAO,CAAEyD,aAAc,QAAhD,SACE,eAACX,GAAD,6BAEF,eAACK,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAACZ,GAAD,CAAYc,UAAQ,EAAC9H,MAAOsH,EAAY1O,kBAE1C,eAAC2O,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGxD,MAAO,CAAEyD,aAAc,QAAhD,SACE,eAACX,GAAD,yCAEF,eAACK,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAtB,SACE,eAACZ,GAAD,CAAYc,UAAQ,EAAC9H,MAAOsH,EAAY7O,iBAE1C,eAAC8O,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGxD,MAAO,CAAEyD,aAAc,QAAjD,SACE,eAACX,GAAD,yCAEF,eAACK,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGxD,MAAO,CAAEyD,aAAc,QAAjD,SAEE,eAACV,GAAD,CAAmBY,OA7CL,SAACC,GACrB,IAAQzP,EAAsB+O,EAAtB/O,OAAQG,EAAc4O,EAAd5O,UACVT,EAAY+P,EAAEC,OAAOjI,MAC3B+B,EACEjI,EAAiB,CACfvB,SACAQ,WACAL,YACAT,0B,mBCrDFiQ,GAAYrF,aAAOC,KAAPD,CAAH,yHAEO,SAACsF,GAAD,OAAWA,EAAMC,YAOvCF,GAAUhF,aAAe,CACvBkF,SAAU,SAGGF,I,MAAAA,MCsBAG,GApCSxF,KAAOO,IAAV,8hBCYfkF,GAAa,SAAC,GAA2B,IAAzB7N,EAAwB,EAAxBA,KAAM8N,EAAkB,EAAlBA,YAE1B,EAA0BxD,mBAAS,GAAnC,oBAAOxK,EAAP,KAAciO,EAAd,KAEQlD,EAAoBC,cAApBD,gBACFE,EAAciD,uBAClB,SAAChD,EAASC,GACRJ,EAAgBI,EAAS,CACvBD,cAGJ,CAACH,IAIGoD,EAAUD,uBACd,SAAChO,EAAMF,GACLgO,EAAY,2BAAK9N,GAAN,IAAYF,aAEzB,CAACgO,IAIGI,EAAgBF,uBAAY,WAChCD,GAAS,SAACI,GAAD,OAAeA,EAAY,OACnC,IAGGC,EAAiBJ,uBAAY,WACjCD,GAAS,SAACI,GACR,OAAIA,GAAa,GACfpD,EAAY,QAAS,6FACdoD,GAEFA,EAAY,OAEpB,CAACpD,IAEJ,OACE,gBAAC,GAAD,WACE,8BAAK/K,EAAKqO,eACV,6DACUrO,EAAKsO,aADf,kCACwCtO,EAAKuO,aAD7C,kCAEQvO,EAAKwO,gBAEb,uBAAKC,UAAU,cAAf,UACE,uBAAKA,UAAU,kBAAf,UACE,eAACC,GAAA,EAAD,CAAYtE,KAAK,SAASuE,QAAST,EAAnC,SACE,eAAC,KAAD,CAAqBrE,KAAM,OAE7B,uBAAM4E,UAAU,YAAhB,SAA6B3O,IAC7B,eAAC4O,GAAA,EAAD,CAAYtE,KAAK,SAASuE,QAASP,EAAnC,SACE,eAAC,KAAD,CAAsBvE,KAAM,UAGhC,eAAC,GAAD,CACE4E,UAAU,gBACVd,SAAS,YACTgB,QAAS,kBAAMV,EAAQjO,EAAMF,IAH/B,+BAhBkBE,EAAKL,aA4BhBiP,OAAMC,KAAKhB,IClCXiB,GAxCO,WACpB,MAAoCxE,mBAAS,CAC3ChC,WAAOyG,EACPpD,YAAQoD,EACRC,gBAAYD,IAHd,oBAAOE,EAAP,KAAmBC,EAAnB,KAoCA,OA9BAhE,qBAAU,WACR,SAASiE,IACP,MAAoCC,OAA5BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAepBJ,EAAc,CACZ5G,MAAO+G,EACP1D,OAAQ2D,EACRN,WAfEK,EAAa,KACF,KACJA,EAAa,KACT,KACJA,EAAa,IACT,KACJA,EAAa,IACT,KAEA,OAajB,OAJAD,OAAOG,iBAAiB,SAAUJ,GAElCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAEIF,G,UCpCHQ,GAAsBrH,aAAOsH,KAAPtH,CAAH,8CACd,YASP,MAR6B,CAC3B8E,GAAI,QACJyC,GAAI,OACJxC,GAAI,QACJyC,GAAI,QACJC,GAAI,SANqB,EAAjBb,eAadS,GAAoBhH,aAAe,CACjCuG,WAAY,MAGCS,I,GAAAA,MCpBTK,GAAe1H,KAAOO,IAAV,2RAOJ,YAQV,MAP6B,CAC3BuE,GAAI,OACJyC,GAAI,OACJxC,GAAI,MACJyC,GAAI,QACJC,GAAI,SANwB,EAAjBb,eAqBjBc,GAAarH,aAAe,CAC1BuG,WAAY,MAGCc,I,8BAAAA,MC/BTlC,GAAkBxF,KAAOO,IAAV,oJAQf4D,GAAanE,aAAOoE,KAAPpE,CAAH,uJAmFD2H,GApEG,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC9C,EAAgC5F,mBAAS,IAAzC,oBAAO7N,EAAP,KAAiB0T,EAAjB,KACQtF,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAoCJ,OACE,eAAC,WAAD,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CACEzF,MAAO9I,EACPwT,YAAaA,EACbG,SAvCa,SAACrE,GACpBoE,EAAYpE,EAAMyB,OAAOjI,QAuCnB8K,WAnCe,SAACtE,GACtB,IAAQuE,EAAQvE,EAARuE,IACI,UAARA,GAAmB7T,GACrBuT,EAAavT,QACIsS,IAAbmB,GACF5E,YAAW,WACT6E,EAAY,MACX,KAEY,UAARG,GAAoB7T,GAC7BsO,EAAY,QAAS,sEA2BnB,eAAC2D,GAAA,EAAD,CAAYtE,KAAK,SAASuE,QAvBZ,WACD,KAAblS,GAKJuT,EAAavT,QACIsS,IAAbmB,GACF5E,YAAW,WACT6E,EAAY,MACX,KARHpF,EAAY,QAAS,0EAqBnB,SACE,eAAC,KAAD,YC9CKwF,GAzBM,SAAC,GAA8B,IAA5BvQ,EAA2B,EAA3BA,KAAMwQ,EAAqB,EAArBA,eAEtBC,EAAkBzC,uBACtB,SAAChO,GACCsD,QAAQC,IAAIvD,GACZwQ,EAAexQ,KAEjB,CAACwQ,IAEH,OACE,eAAC,GAAD,UACE,uBAAK7G,MAAO,CAAE6B,QAAS,OAAQE,WAAY,UAA3C,UACE,sBAAI/B,MAAO,CAAE+G,KAAM,EAAGC,OAAQ,GAA9B,UACG3Q,EAAKqO,aADR,MACyBrO,EAAKF,MAD9B,YAGA,+BACE,eAAC,GAAD,CAAW6N,SAAS,UAAUgB,QAAS,kBAAM8B,EAAgBzQ,IAA7D,SACE,uBAAM2J,MAAO,CAAEnB,MAAO,SAAtB,oCCNCoI,GAAkB,yCAAG,WAAOvC,GAAP,gBAAAtF,EAAA,sEACTlD,KAAMwD,IAAI,mBAAoB,CAC/CC,OAAQ,CACJ+E,kBAHsB,cACxBpF,EADwB,yBAMvBA,EAAOjJ,KAAKA,MANW,2CAAH,sDA6BlB6Q,GAAkB,yCAAG,WAAOxC,GAAP,gBAAAtF,EAAA,sEACTlD,KAAMwD,IAAI,mBAAoB,CAC/CC,OAAQ,CACJ+E,kBAHsB,cACxBpF,EADwB,yBAMvBA,EAAOjJ,KAAKA,MANW,2CAAH,sDAmClB8Q,GAAoB,yCAAG,WAAOC,GAAP,gBAAAhI,EAAA,sEACXlD,KAAMwD,IAAI,qBAAsB,CACjDC,OAAQ,CACJyH,gBAHwB,cAC1B9H,EAD0B,yBAMzBA,EAAOjJ,KAAKA,MANa,2CAAH,sDAkCpBgR,GAA0B,yCAAG,WAAOrQ,GAAP,gBAAAoI,EAAA,sEACjBlD,KAAMwD,IAAI,0BAA2B,CACtDC,OAAQ,CACJ3I,gBAH8B,cAChCsI,EADgC,yBAM/BA,EAAOjJ,KAAKA,MANmB,2CAAH,sDA6B1BiR,GAAuB,yCAAG,WAAOpE,GAAP,gBAAA9D,EAAA,sEACdlD,KAAMmD,KAAK,kBAAmB6D,GADhB,cAC7B5D,EAD6B,yBAE5BA,EAAOjJ,KAAKA,MAFgB,2CAAH,sDAwBvBkR,GAAiC,yCAAG,WAAOjT,GAAP,gBAAA8K,EAAA,sEACxBlD,KAAMwD,IAAI,yBAA0B,CACrDC,OAAQ,CACJrL,eAHqC,cACvCgL,EADuC,yBAOtCA,EAAOjJ,KAAKA,MAP0B,2CAAH,sDCoC/BmR,GA7LQ,WACrB,IAAQnC,EAAeF,KAAfE,WACR,EAAkC1E,mBAAS,IAA3C,oBAAO8G,EAAP,KAAkBpB,EAAlB,KACA,EAAoC1F,mBAAS,IAA7C,oBAAO+G,EAAP,KAAmBC,EAAnB,KACA,EAAgChH,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KACMjD,EAAWsD,cACXrM,EAAekM,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAU5F,gBACtDgT,EAAW9G,aACf,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUxF,aAAaC,YAGpC4S,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvDhJ,EAASnI,EAAkBsS,MAGrB5G,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIJE,qBAAU,WAAM,8CAKd,WAA+BkG,GAA/B,kBAAArI,EAAA,+EAEyB6H,GAAmBQ,GAF5C,OAEUnI,EAFV,OAGIqI,EAAcrI,GAEdsB,GAAW,GALf,gDAOYU,EAAY,KAAMI,SAASrL,KAA3BiL,QAERF,EAAY,QAASE,GACrBV,GAAW,GAVf,0DALc,sBACI,KAAd6G,IAGJ7G,GAAW,GAJG,oCAkBdmH,CAAgBN,GAIhB9N,QAAQC,IAAI,6FAA6B6N,MAExC,CAACA,IAEJ,IAAMtD,EAAcE,uBAClB,SAAChO,GACCsH,EAAS/H,EAAgBS,MAE3B,CAACsH,IAGGkJ,EAAiBxC,uBACrB,SAAChO,GACCsH,EAASvH,EAAmBC,MAE9B,CAACsH,IAGH,OACE,eAAC,WAAD,UACE,eAACqK,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,WACE,gBAAC,GAAD,CAAcxC,WAAYA,EAAYrF,MAAO,CAAEqD,QAAS,UAAxD,UACE,mEACA,+BACE,eAAC,KAAD,CACEnD,KAAM,GACN8E,QAAS,kBAAMrH,EAASnI,GAAkB,YAKhD,gBAAC2N,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,eAACjF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGhG,MAAO,CAAEqD,QAAS,QAA5C,SACE,uBACErD,MAAO,CACLqI,OAAQ,6BACRhF,QAAS,QAHb,UAME,eAAC,GAAD,CACEgD,aAAcA,EACdC,YAAY,iEACZC,UAAQ,IAEK,KAAdkB,GACC,uBACEzH,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBQ,cAAe,UALnB,UAQE,sBACEE,IAAI,+BACJ7D,MAAM,OACN8D,IAAI,WAEN,eAAC,GAAD,CAAkBpB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,0EAKW,KAAdoH,IAAqB1H,GACpB,sBACEC,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZpD,MAAO,OACPqD,OAAQ,SANZ,SASE,eAAC,GAAD,MAGW,KAAdyF,GAAoB1H,GACnB,uBACEC,MAAO,CACL6B,QAAS,OACTS,cAAe,SACfK,UAAW,OACXhE,MAAO,OACPqD,OAAQ,OACRsG,UAAW,UAPf,UAUE,eAACC,GAAA,EAAD,IACCb,EAAW/T,KAAI,SAAC0C,GAAD,OACd,gBAAC,WAAD,WACE,eAACkS,GAAA,EAAD,IACA,eAAC,GAAD,CAAYlS,KAAMA,EAAM8N,YAAaA,MAFxB9N,EAAKqO,yBAS9B,eAACvB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGhG,MAAO,CAAEqD,QAAS,QAA5C,SACE,uBACErD,MAAO,CACL6B,QAAS,OACTS,cAAe,SACfN,OAAQ,OACRsG,UAAW,SACXD,OAAQ,6BACRhF,QAAS,QAPb,UAU2B,IAAxBzO,EAAaqB,QACZ,eAAC,WAAD,UACE,eAAC,GAAD,CAAkBoL,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,2HAKqB,IAAxBzL,EAAaqB,QACZrB,EAAajB,KAAI,SAAC0C,EAAMoL,GAAP,OACf,gBAAC,WAAD,WACE,eAAC8G,GAAA,EAAD,IACA,eAAC,GAAD,CACElS,KAAMA,EACNwQ,eAAgBA,MAJLpF,EAAQ,+BCoC5B+G,GA3MQ,WAErB,IAAQnD,EAAeF,KAAfE,WAGR,EAAkC1E,mBAAS,IAA3C,oBAAO8G,EAAP,KAAkBpB,EAAlB,KAGA,EAAoC1F,mBAAS,IAA7C,oBAAO+G,EAAP,KAAmBC,EAAnB,KAGA,EAAgChH,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KACMjD,EAAWsD,cAGXpM,EAAeiM,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAU3F,gBACtD+S,EAAW9G,aACf,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUxF,aAAaE,YAGpC2S,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvDhJ,EAASlI,EAAkBqS,MAGrB5G,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAKJE,qBAAU,WAAM,8CAKd,WAA+BkG,GAA/B,kBAAArI,EAAA,+EAEyB8H,GAAmBO,GAF5C,OAEUnI,EAFV,OAGIqI,EAAcrI,GACdsB,GAAW,GAJf,gDAMYU,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GACrBV,GAAW,GARf,0DALc,sBACI,KAAd6G,IAGJ7G,GAAW,GAJG,oCAgBdmH,CAAgBN,GAEhB9F,YAAW,WACTf,GAAW,KACV,KACHjH,QAAQC,IAAI,6FAA6B6N,MAExC,CAACA,IAEJ,IAAMgB,EAAcpE,uBAClB,SAAChO,GACCsH,EAASrH,EAAgBD,MAE3B,CAACsH,IAGG+K,EAAiBrE,uBACrB,SAAChO,GACCsH,EAASpH,EAAmBF,MAE9B,CAACsH,IAGH,OACE,eAAC,WAAD,UACE,eAACqK,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,WACE,gBAAC,GAAD,CAAcxC,WAAYA,EAAYrF,MAAO,CAAEqD,QAAS,UAAxD,UACE,yEACA,+BACE,eAAC0B,GAAA,EAAD,UACE,eAAC,KAAD,CACE7E,KAAM,GACN8E,QAAS,kBAAMrH,EAASlI,GAAkB,cAMlD,gBAAC0N,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,eAACjF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGhG,MAAO,CAAEqD,QAAS,QAA5C,SACE,uBACErD,MAAO,CACLqI,OAAQ,6BACRhF,QAAS,QAHb,UAME,eAAC,GAAD,CACEgD,aAAcA,EACdC,YAAY,uEACZC,UAAQ,IAEK,KAAdkB,GACC,uBACEzH,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBQ,cAAe,UALnB,UAQE,sBACEE,IAAI,+BACJ7D,MAAM,OACN8D,IAAI,WAEN,eAAC,GAAD,CAAkBpB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,0EAMW,KAAdoH,IAAqB1H,GACpB,sBACEC,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZpD,MAAO,OACPqD,OAAQ,SANZ,SASE,eAAC,GAAD,MAIW,KAAdyF,GAAoB1H,GACnB,uBACEC,MAAO,CACL6B,QAAS,OACTS,cAAe,SACfK,UAAW,OACXhE,MAAO,OACPqD,OAAQ,OACRsG,UAAW,UAPf,UAUE,eAACC,GAAA,EAAD,IACCb,EAAW/T,KAAI,SAAC0C,GAAD,OACd,gBAAC,WAAD,WACE,eAACkS,GAAA,EAAD,IACA,eAAC,GAAD,CAAYlS,KAAMA,EAAM8N,YAAasE,MAFxBpS,EAAKqO,yBAS9B,eAACvB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGhG,MAAO,CAAEqD,QAAS,QAA5C,SACE,uBACErD,MAAO,CACL6B,QAAS,OACTS,cAAe,SACfN,OAAQ,OACRsG,UAAW,SACXD,OAAQ,6BACRhF,QAAS,QAPb,UAU2B,IAAxBxO,EAAaoB,QACZ,eAAC,WAAD,UACE,eAAC,GAAD,CAAkBoL,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,iIAMqB,IAAxBxL,EAAaoB,QACZpB,EAAalB,KAAI,SAAC0C,EAAMoL,GAAP,OACf,gBAAC,WAAD,WACE,eAAC8G,GAAA,EAAD,IACA,eAAC,GAAD,CACElS,KAAMA,EACNwQ,eAAgB6B,MAJLjH,EAAQ,+BCvMrCkH,GAAsBlK,aAAOsH,KAAPtH,CAAH,i4DAkGnBmK,GAAiB,SAAC,GAAwB,IAAtBvS,EAAqB,EAArBA,KAAMwS,EAAe,EAAfA,SACxBlL,EAAWsD,cACTC,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAeEyH,EAAiB,yCAAG,WAAOzS,GAAP,oBAAA+I,EAAA,6DAChBpI,EAAeX,EAAfW,WADgB,kBAGDqQ,GAA2BrQ,GAH1B,OAGhBsI,EAHgB,OAItB3B,EAAS9G,EAAuByI,IAJV,gDAMdgC,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GAPC,yDAAH,sDAUvB,OACE,gBAACqH,GAAD,WACE,uBAAK7D,UAAU,kBAAf,UACE,oBAAGA,UAAU,QAAb,wCACA,eAACyD,GAAA,EAAD,IACA,sBAAKzD,UAAU,uBAAf,SACE,oBAAGA,UAAU,aAAb,SAA2BzO,EAAKW,kBAIpC,uBAAK8N,UAAU,yBAAf,UACE,uBAAKA,UAAU,MAAf,UACE,uBAAMA,UAAU,QAAhB,iCACA,sCACA,uBAAMA,UAAU,UAAhB,SAA2BzO,EAAK+Q,gBAElC,uBAAKtC,UAAU,MAAf,UACE,uBAAMA,UAAU,QAAhB,uCACA,sCACA,uBAAMA,UAAU,UAAhB,SAA2BzO,EAAK0S,cAElC,uBAAKjE,UAAU,MAAf,UACE,uBAAMA,UAAU,QAAhB,iCACA,sCACA,uBAAMA,UAAU,UAAhB,SAA2BzO,EAAK2S,cAElC,sBAAKlE,UAAU,MAAf,SACE,uBAAKA,UAAU,cAAf,WACI+D,GACA,gBAAC,WAAD,WACE,yBACE/D,UAAU,aACV9E,MAAO,GACPgF,QAAS,kBArDD,SAAC3O,GACvBsH,EAASnH,EAAkBH,IAoDE4S,CAAgB5S,IAHjC,0BAOA,yBACEyO,UAAU,aACV9E,MAAO,GACPgF,QAAS,kBAAM8D,EAAkBzS,IAHnC,0CASHwS,GACC,yBACE/D,UAAU,gBACV9E,MAAO,GACPgF,QAAS,kBAjEI,SAAC3O,GAC1BsH,EAASjH,EAAqBL,IAgEH6S,CAAmB7S,IAHpC,2CAUN,gCAMO4O,OAAMC,KAAK0D,ICIXO,GA3LU,WAEvB,IAAQ9D,EAAeF,KAAfE,WAGR,EAAkC1E,mBAAS,IAA3C,oBAAO8G,EAAP,KAAkBpB,EAAlB,KAGA,EAAgC1F,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAGA,EAAoCD,mBAAS,IAA7C,oBAAO+G,EAAP,KAAmBC,EAAnB,KACMhK,EAAWsD,cAGX2G,EAAW9G,aACf,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUxF,aAAaG,cAIpCL,EAAiBgM,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAU1F,kBAExD+S,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvDhJ,EAAShH,EAAoBmR,MAGvB5G,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aA4BJ,OAxBAE,qBAAU,WAAM,8CAOd,WAAiCkG,GAAjC,kBAAArI,EAAA,+EAEyB+H,GAAqBM,GAF9C,OAEUnI,EAFV,OAGIqI,EAAcrI,GACdsB,GAAW,GAJf,gDAMYU,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GACrBV,GAAW,GARf,0DAPc,sBACI,KAAd6G,IAGJ7G,GAAW,GAJG,oCAkBdwI,CAAkB3B,GAElB9N,QAAQC,IAAI,2GAAiC6N,MAE5C,CAACA,EAAW9J,IAGb,eAAC,WAAD,UACE,eAACqK,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,WACE,gBAAC,GAAD,CAAcxC,WAAYA,EAAYrF,MAAO,CAAEqD,QAAS,UAAxD,UACE,qFACA,+BACE,eAAC0B,GAAA,EAAD,UACE,eAAC,KAAD,CACE7E,KAAM,GACN8E,QAAS,kBAAMrH,EAAShH,GAAoB,cAMpD,gBAACwM,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,eAACjF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGhG,MAAO,CAAEqD,QAAS,QAA5C,SACE,uBACErD,MAAO,CACLqI,OAAQ,6BACRhF,QAAS,QAHb,UAME,eAAC,GAAD,CACEgD,aAAcA,EACdC,YAAY,4FACZC,UAAQ,IAEK,KAAdkB,GACC,uBACEzH,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBQ,cAAe,UALnB,UAQE,sBACEE,IAAI,+BACJ7D,MAAM,OACN8D,IAAI,WAEN,eAAC,GAAD,CAAkBpB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,0EAMW,KAAdoH,IAAqB1H,GACpB,sBACEC,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZpD,MAAO,OACPqD,OAAQ,SANZ,SASE,eAAC,GAAD,MAIW,KAAdyF,GAAoB1H,GACnB,uBACEC,MAAO,CACL6B,QAAS,OACTS,cAAe,SACfK,UAAW,OACXhE,MAAO,OACPqD,OAAQ,OACRsG,UAAW,UAPf,UAUE,eAACC,GAAA,EAAD,IACCb,EAAW/T,KAAI,SAAC0C,GAAD,OACd,gBAAC,WAAD,WACE,eAACkS,GAAA,EAAD,IACA,eAAC,GAAD,CAAgBlS,KAAMA,MAFTA,EAAKI,6BAW9B,eAAC0M,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGhG,MAAO,CAAEqD,QAAS,QAA5C,SACE,uBACErD,MAAO,CACL6B,QAAS,OACTS,cAAe,SACfN,OAAQ,OACRsG,UAAW,SACXD,OAAQ,6BACRhF,QAAS,QAPb,UAU6B,IAA1BvO,EAAemB,QACd,eAAC,WAAD,UACE,eAAC,GAAD,CAAkBoL,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,wIAKuB,IAA1BvL,EAAemB,QACdnB,EAAenB,KAAI,SAAC0C,EAAMoL,GAAP,OACjB,gBAAC,WAAD,WACE,eAAC8G,GAAA,EAAD,IACA,eAAC,GAAD,CAAgBlS,KAAMA,EAAMwS,UAAQ,MAFvBpH,EAAQ,iC,8GCjLrC4H,GAA0B,SAAC,GAAc,IAAZhT,EAAW,EAAXA,KACjC,OACE,eAACiT,GAAA,EAAD,UACE,gBAACC,GAAA,EAAD,WACE,gBAACC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,yCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,mCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,yCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,yCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,sCAMJ,eAACqJ,GAAA,EAAD,UACGrT,EAAK1C,KAAI,SAACsO,EAAMR,GAAP,OACR,eAAC,WAAD,UACE,gBAACkI,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAK0C,eAC9B,eAAC8E,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAKyC,eAE9B,eAAC+E,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAK2C,eAC9B,eAAC6E,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAK4C,eAC9B,eAAC4E,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAK2H,mBAPnBnI,cAiBZwD,OAAMC,KAAKmE,ICnDpBQ,GAA6B,SAAC,GAAc,IAAZxT,EAAW,EAAXA,KACpC,OACE,eAACiT,GAAA,EAAD,UACE,gBAACC,GAAA,EAAD,WACE,gBAACC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,yCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,mCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,yCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,mCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,mCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,mCAIF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CAAkBpI,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,+BAMJ,eAACqJ,GAAA,EAAD,UACGrT,EAAK1C,KAAI,SAACsO,GAAD,OACR,eAAC,WAAD,UACE,gBAAC0H,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAKjL,aAC9B,eAACyS,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAKmF,aAC9B,eAACqC,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAK8G,WAC9B,eAACU,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAK+G,WAC9B,eAACS,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAK6H,iBAC9B,eAACL,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAK8H,iBAC9B,eAACN,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB+B,EAAK+H,eARnB/H,EAAKxL,6BAkBjBwO,OAAMC,KAAK2E,IC3DpBI,GAAkB,SAAC,GAAc,IAAZ5T,EAAW,EAAXA,KAEjB6T,EAAsC7T,EAAtC6T,UAAWC,EAA2B9T,EAA3B8T,UAAWC,EAAgB/T,EAAhB+T,YAG9B,EAA8BzJ,oBAAS,GAAvC,oBAAOiH,EAAP,KAAiByC,EAAjB,KAEA,OACE,gBAAC,WAAD,WACE,gBAACV,GAAA,EAAD,CAAU3E,QAAS,kBAAMqF,GAAWzC,IAApC,UACE,eAAC6B,GAAA,EAAD,UACE,eAAC1E,GAAA,EAAD,CAAY7E,KAAK,QAAQ8E,QAAS,kBAAMqF,GAAWzC,IAAnD,SACGA,EAAW,eAAC0C,GAAA,EAAD,IAAsB,eAACC,GAAA,EAAD,QAGtC,eAACd,GAAA,EAAD,CAAW/G,UAAU,KAAK8H,MAAM,MAAhC,SACGnU,EAAKjC,YAER,eAACqV,GAAA,EAAD,CAAW/G,UAAU,KAAK8H,MAAM,MAAhC,SACGnU,EAAKhC,eAER,eAACoV,GAAA,EAAD,CAAW/G,UAAU,KAAK8H,MAAM,MAAhC,SACGnU,EAAKxC,eAGV,eAAC8V,GAAA,EAAD,UACE,eAACF,GAAA,EAAD,CAAWzJ,MAAO,CAAEyK,cAAe,EAAGC,WAAY,GAAKC,QAAS,EAAhE,SACE,eAACC,GAAA,EAAD,CAAUC,GAAIjD,EAAUkD,QAAQ,OAAOC,eAAa,EAApD,SACE,eAACC,GAAA,EAAD,CAAKhE,OAAQ,EAAb,SACE,gBAAC7D,GAAA,EAAD,CAAMC,WAAS,EAACpD,MAAO,CAAE6B,QAAS,OAAQE,WAAY,UAAtD,UACE,eAACoB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAvB,SACE,eAAC,GAAD,CACE3E,QAAQ,YACRqB,UAAU,MACVrC,OAAQ,EAHV,wCAQF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,GAAvB,SACE,eAAC,GAAD,CACE3E,QAAQ,YACRqB,UAAU,MACVrC,OAAQ,EAHV,SAKGhK,EAAKxC,cAGV,eAACsP,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAvB,SACE,eAAC,GAAD,CACE3E,QAAQ,YACRqB,UAAU,MACVrC,OAAQ,EAHV,gDAQF,gBAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,GAAvB,UACwB,IAArBkE,EAAUjU,QACT,eAAC,GAAD,CACEoL,QAAQ,YACRqB,UAAU,MACVrC,OAAQ,EACRL,MAAO,CACLqD,QAAS,QALb,uGAWD6G,EAAUjU,OAAS,GAClB,eAAC,GAAD,CAAyBI,KAAM6T,OAInC,eAAC/G,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAvB,SACE,eAAC,GAAD,CACE3E,QAAQ,YACRqB,UAAU,MACVrC,OAAQ,EAHV,sDAQF,gBAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,GAAvB,UACwB,IAArBmE,EAAUlU,QACT,eAAC,GAAD,CACEoL,QAAQ,YACRqB,UAAU,MACVrC,OAAQ,EACRL,MAAO,CACLqD,QAAS,QALb,6GAWD8G,EAAUlU,OAAS,GAClB,eAAC,GAAD,CAAyBI,KAAM8T,OAInC,eAAChH,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAvB,SACE,eAAC,GAAD,CACE3E,QAAQ,YACRqB,UAAU,MACVrC,OAAQ,EAHV,sDAQF,gBAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,GAAvB,UAC0B,IAAvBoE,EAAYnU,QACX,eAAC,GAAD,CACEoL,QAAQ,YACRqB,UAAU,MACVrC,OAAQ,EACRL,MAAO,CACLqD,QAAS,QALb,6GAWD+G,EAAYnU,OAAS,GACpB,eAAC,GAAD,CAA4BI,KAAM+T,sBAYvCnF,OAAMC,KAAK+E,IC0CXgB,GA1KgB,WAE7B,IAAQ5F,EAAeF,KAAfE,WAGR,EAAgC1E,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAGA,EAAsCD,mBAAS,IAA/C,oBAAOuK,EAAP,KAAoBC,EAApB,KACMxN,EAAWsD,cAGX2G,EAAW9G,aACf,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUxF,aAAaI,oBAElC8L,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAKE6B,EAAcpC,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUtG,WAErD2T,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvDhJ,EAAS/G,EAA0BkR,MA8BrC,OAxBAvG,qBAAU,WACJqG,GAAU,yCAEZ,WAAmCtT,GAAnC,kBAAA8K,EAAA,+EAEyBK,GAAgCnL,GAFzD,OAEUgL,EAFV,OAGI6L,EAAe7L,GACfsB,GAAW,GAJf,gDAMYU,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GACrBV,GAAW,GARf,yDAFY,qDAcZwK,CAbsBlI,EAAd5O,WAeV,OAAO,WACL6W,EAAe,IACfvK,GAAW,MAGZ,CAACgH,IAGF,eAAC,WAAD,UACE,eAACI,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,WACE,gBAAC,GAAD,CACExC,WAAYA,EACZrF,MAAO,CAAEqD,QAAS,SAAUgI,gBAAiB,QAASC,OAAQ,GAFhE,UAIE,yEACA,+BACE,eAACvG,GAAA,EAAD,UACE,eAAC,KAAD,CACE7E,KAAM,GACN8E,QAAS,kBAAMrH,EAAS/G,GAA0B,cAKzDmJ,GAAamL,EAAYjV,OAAS,GACjC,eAACqT,GAAA,EAAD,CAAgB5G,UAAW6I,KAA3B,SACE,gBAAChC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,UACE,gBAACG,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,CAAWvJ,KAAK,UAChB,eAACuJ,GAAA,EAAD,UACE,eAAC,GAAD,CACEpI,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,wCAQF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CACEpI,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,wCAQF,gBAACoJ,GAAA,EAAD,WACG,IACD,eAAC,GAAD,CACEpI,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,8CAWN,eAACqJ,GAAA,EAAD,UACGwB,EAAYvX,KAAI,SAACsO,GAAD,OACf,eAAC,GAAD,CAAiB5L,KAAM4L,cAMhClC,GAAoC,IAAvBmL,EAAYjV,QACxB,uBACE+J,MAAO,CACL6B,QAAS,OACTlD,MAAO,OACPqD,OAAQ,OACRF,eAAgB,SAChBC,WAAY,SACZO,cAAe,UAPnB,UAUE,sBAAKtC,MAAO,CAAEuC,SAAU,QAAS5D,MAAO,QAAxC,SACE,sBACE6D,IAAI,0BACJC,IAAI,YACJ9D,MAAM,WAGV,eAAC,GAAD,CAAkB0C,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,+FAKFN,GACA,sBACEC,MAAO,CACL6B,QAAS,OACTlD,MAAO,OACPqD,OAAQ,OACRF,eAAgB,SAChBC,WAAY,UANhB,SASE,eAAC,GAAD,c,4FC/JCyJ,GAvBIC,sBAAW,SAAC1H,EAAO2H,GACpC,IAAY5D,EAAgD/D,EAApD8G,GAAUc,EAA0C5H,EAA1C4H,SAAUC,EAAgC7H,EAAhC6H,QAASC,EAAuB9H,EAAvB8H,SAAaC,EAAlD,aAA4D/H,EAA5D,IACM/D,EAAQ+L,qBAAU,CACtBC,KAAM,CAAEC,QAAS,GACjBC,GAAI,CAAED,QAASnE,EAAO,EAAI,GAC1BqE,QAAS,WACHrE,GAAQ8D,GACVA,KAGJQ,OAAQ,YACDtE,GAAQ+D,GACXA,OAIN,OACE,eAAC,YAAS7M,IAAV,yBAAc0M,IAAKA,EAAK1L,MAAOA,GAAW8L,GAA1C,aACGH,QCZMU,GAAe,yCAAG,WAAOC,GAAP,gBAAAlN,EAAA,sEACNlD,KAAMmD,KAAK,QAASiN,GADd,cACrBhN,EADqB,yBAEpBA,EAAOjJ,KAAKA,MAFQ,2CAAH,sDAqBfkW,GAAsB,yCAAG,WAAOC,GAAP,kBAAApN,EAAA,sEACblD,KAAMwD,IAAI,qBAAsB,CACjDC,OAAQ,CACJ6M,WAH0B,cAC5BlN,EAD4B,OAO5BjJ,EAAOiJ,EAAOjJ,KAAKA,KAPS,kBAQ3BA,GAR2B,2CAAH,sDCZ7BoW,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZD,eAAgB,UAElB8K,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QAuOlB+E,GA9NQ,WACrB,IAAMC,EAAUX,KAEV9O,EAAWsD,cACToE,EAAeF,KAAfE,WAGFuC,EAAW9G,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUnF,eAClD4E,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAChD3E,EAAawL,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUlF,cACpDZ,EAAgBoM,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAU9F,iBACvDE,EAAekM,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAU5F,gBACtDC,EAAeiM,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAU3F,gBACtDC,EAAiBgM,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAU1F,kBACxDC,EAAY+L,aAChB,SAAC5N,GAAD,OAAWA,EAAMsH,UAAU9F,cAAcK,aAEnCR,EAAgBuM,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUtG,WAAvDK,YAEA2M,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIEgM,EAAc,yCAAG,iDAAAjO,EAAA,sEAEX/E,EAAiBJ,EAAjBI,aACF+P,EAActV,EAAenB,KACjC,qBAAG8C,oBAGCyT,EAAYtV,EAAajB,KAC7B,kBAA0C,CACxCqC,WADF,EAAGA,WAED4T,aAFF,EAAezT,MAGbyO,aAHF,EAAsBA,iBAOlBuF,EAAYtV,EAAalB,KAC7B,kBAA0C,CACxCqC,WADF,EAAGA,WAED4T,aAFF,EAAezT,MAGbyO,aAHF,EAAsBA,iBAOhBzQ,EAA2CO,EAA3CP,OAAQQ,EAAmCD,EAAnCC,SAAUL,EAAyBI,EAAzBJ,UAAWT,EAAca,EAAdb,UAE/ByZ,EAAW,CACfnZ,SACAQ,WACAL,YACAT,YACAwG,eACA6P,YACAC,YACAC,cACAmD,MAVaxY,GAAY,IAxBR,UAoCbwK,GAAoB+N,GApCP,aAsCflD,EAAYnU,OAAS,GAtCN,wBAwCXuX,EAAkB,CACtBhB,MAAM,IAAD,OAAMnS,EAAN,cACLoT,SAAU,UACVnM,QAAQ,GAAD,OAAK/M,EAAL,6FA3CQ,UA6CX8X,GAAgBmB,GA7CL,QA+CnBpM,EAAY,UAAW,kEACvBzD,EAASzG,EAAc5B,EAAa,IACpCqI,EAAS1G,GAAkB,IAjDR,kDAmDXqK,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GApDF,0DAAH,qDAyDpB,OACE,eAAC,WAAD,UACE,eAACoM,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMF,EACNO,QAPc,kBAAMxK,EAAS1G,GAAkB,KAQ/C0W,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbhD,QAAS,KAPb,SAUE,eAAC,GAAD,CAAYD,GAAIjD,EAAhB,SACE,uBACE9C,UAAWsI,EAAQR,MACnB5M,MAAO,CACL6B,QAAS,OACTS,cAAe,UAJnB,UAOE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,gBAAC,GAAD,CAAc1B,WAAYA,EAA1B,UACE,eAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,gGAGA,+BACE,eAAC0E,GAAA,EAAD,CACEC,QAAS,kBAAMrH,EAAS1G,GAAkB,KAD5C,SAGE,eAAC,KAAD,CAAgBiJ,KAAM,YAI5B,gBAACiD,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,eAACjF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,wCAQF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,SAKG3L,EAAcb,cAGnB,eAACsP,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,gDAQF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,SAKGzL,EAAaqB,OAAS,EAAI,IAAM,QAGrC,eAACkN,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,sDAQF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,SAKGxL,EAAaoB,OAAS,EAAI,IAAM,QAGrC,eAACkN,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,sDAQF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,SAKGvL,EAAemB,OAAS,EAAI,IAAM,QAGvC,eAACkN,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,4DAQF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACElC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,SAKGtL,EAAY,IAAM,cAK3B,+BACE,eAAC,GAAD,CAAciQ,QAASqI,EAAgBzO,QAAQ,UAA/C,gE,oBC1NCmP,GApCQ,SAAC,GAAkB,IAAhBpC,EAAe,EAAfA,SAElBqC,EAAW,CACfC,QAAS,CACPhC,QAAS,GAEXiC,MAAO,CACLjC,QAAS,EACTkC,WAAY,CACVC,SARW,GASXC,MATW,GAUXC,KAAM,mBAGVC,KAAM,CACJtC,QAAS,EACTkC,WAAY,CAAEC,SAfD,MAkBXI,EAAWC,eAEjB,OACE,eAACC,GAAA,EAAD,UACE,eAACC,GAAA,EAAO3P,IAAR,CAEEgP,SAAUA,EACVC,QAAQ,UACRW,QAAQ,QACRL,KAAK,OALP,SAOG5C,GANI6C,EAASK,a,gEClBhBC,GAAkBrQ,aAAOsH,KAAPtH,CAAH,+9CA0RNsQ,GA3MM,WACnB,IAAMpR,EAAWsD,cACXuN,EAAWC,eACXO,EAAUC,eACR7U,EAAoB0G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAAxDG,gBACFwN,EAAW9G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAO3B,WAAWH,UAEhE,EAAwCoG,mBAAS,CAC/CnG,WAAW,EACX2C,QAAQ,EACRjJ,SAAS,IAHX,oBAAOgb,EAAP,KAAqBC,EAArB,KAMQ3U,EAA+B0U,EAA/B1U,UAAW2C,EAAoB+R,EAApB/R,OAAQjJ,EAAYgb,EAAZhb,QAErBkb,EAAYZ,EAASK,SAASQ,MAAM,KACpCC,EAAeF,EAAUA,EAAUnZ,OAAS,GAC5CsZ,EACa,gBAAjBD,GACiB,cAAjBA,GACiB,eAAjBA,GACiB,sBAAjBA,EAEIE,EAA6B,YAAjBF,EACZG,EAA4B,WAAjBH,EAWXI,EAAS,SAACC,GACdhS,EACE5C,GAAc,CACZrI,KAAM,SACNwG,QAAQ,KAGZ8V,EAAQ9Y,KAAKyZ,IAGTC,EAAuB,SAACvZ,GAC5B,IAAQ3D,EAAgB2D,EAAhB3D,KAAMkJ,EAAUvF,EAAVuF,MACduT,EAAgB,2BACXD,GADU,mBAEZxc,EAAOkJ,MAGZ,OACE,eAAC,WAAD,UACE,eAACiU,GAAA,EAAD,CAAQ5H,OAAO,MAAMH,KAAMF,EAA3B,SACE,gBAACkH,GAAD,WACE,sBAAK9J,QA9BO,WAClBrH,EACE5C,GAAc,CACZrI,KAAM,SACNwG,QAAQ,MA0BqB4L,UAAU,cAArC,SACE,eAACC,GAAA,EAAD,CAAYtE,KAAK,SAAjB,SACE,eAAC,KAAD,CAAgBP,KAAM,GAAIrB,MAAM,cAGpC,gBAAC,GAAD,WACuB,kBAApBzE,GACC,gBAAC,WAAD,WACE,sBACE0K,UAAWgL,aAAK,eAAgB,CAC9B,gBAAiBP,IAEnBvK,QAAS,kBACP4K,EAAqB,CACnBld,KAAM,YACNkJ,OAAQpB,KAPd,0BAaA,eAACoQ,GAAA,EAAD,CAAUC,GAAIrQ,EAAd,SACE,uBAAKsK,UAAU,sBAAf,UACuB,mBAApB1K,GACC,sBACE0K,UAAWgL,aAAK,iBAAkB,CAChC,iBAAmC,gBAAjBR,IAEpBtK,QAAS,kBAAM0K,EAAO,2BAJxB,SAME,kEAKkB,eAApBtV,GACoB,mBAApBA,IAEA,sBACE0K,UAAWgL,aAAK,iBAAkB,CAChC,iBAAmC,cAAjBR,IAEpBtK,QAAS,kBAAM0K,EAAO,yBAJxB,SAME,gEAIJ,sBACE5K,UAAWgL,aAAK,iBAAkB,CAChC,iBAAmC,eAAjBR,IAEpBtK,QAAS,kBAAM0K,EAAO,0BAJxB,SAME,6EAEF,sBACE5K,UAAWgL,aAAK,iBAAkB,CAChC,iBAAmC,sBAAjBR,IAEpBtK,QAAS,kBAAM0K,EAAO,iCAJxB,SAME,qFAOV,sBACE5K,UAAWgL,aAAK,eAAgB,CAC9B,gBAAiBN,IAEnBxK,QAAS,kBACP4K,EAAqB,CACnBld,KAAM,UACNkJ,OAAQ1H,KAPd,0BAaA,eAAC0W,GAAA,EAAD,CAAUC,GAAI3W,EAAd,SACE,sBAAK4Q,UAAU,sBAAf,SACE,sBACEA,UAAWgL,aAAK,iBAAkB,CAChC,iBAAmC,YAAjBR,IAEpBtK,QAAS,kBAAM0K,EAAO,uBAJxB,SAME,oEAIN,sBACE5K,UAAWgL,aAAK,eAAgB,CAC9B,gBAAiBL,IAEnBzK,QAAS,kBACP4K,EAAqB,CACnBld,KAAM,SACNkJ,OAAQuB,KAPd,gCAaA,eAACyN,GAAA,EAAD,CAAUC,GAAI1N,EAAd,SACE,sBAAK2H,UAAU,sBAAf,SACE,sBACEA,UAAWgL,aAAK,iBAAkB,CAChC,iBAAmC,WAAjBR,IAEpBtK,QAAS,kBAAM0K,EAAO,sBAJxB,SAME,0EAKN,sBACE5K,UAAU,eACVE,QAAS,kBACPrH,EACE5C,GAAc,CACZrI,KAAM,eACNwG,QAAQ,MANhB,6CAcA,sBACE4L,UAAU,eACVE,QAAS,kBAAM0K,EAAO,wBAFxB,iD,qBCnRN9P,GAAWC,aAAH,2FAYCkQ,GANC,SAAC,GAAD,IAAGhQ,EAAH,EAAGA,UAAH,OACd,sBAAKC,MAAO,CAAErB,MAAO,QAArB,SACE,eAAC,KAAD,CAAYE,MAAM,MAAMoB,QAASF,EAAWF,IAAKD,GAAUM,KAAM,SCG/D8P,GAAwBvR,KAAOO,IAAV,+rCAiMrBiR,GAAc,SAAC,GAAD,IAAG5Z,EAAH,EAAGA,KAAH,OAClB,uBAAKyO,UAAU,2BAAf,UACE,sBAAKA,UAAU,8BAAf,SACE,eAAC,KAAD,CAAmB5E,KAAM,GAAIrB,MAAM,YAErC,sBAAKiG,UAAU,eAAf,SAA+BzO,EAAKiL,cAIlC4O,GAAkB,SAAC,GAAD,IAAG7Z,EAAH,EAAGA,KAAH,OACtB,uBAAKyO,UAAU,+BAAf,UACE,sBAAKA,UAAU,kCAAf,SACE,eAAC,KAAD,CAAwB5E,KAAM,GAAIrB,MAAM,YAE1C,sBAAKiG,UAAU,eAAf,SAA+BzO,EAAKiL,cAIlC6O,GAAc,SAAC,GAAD,IAAG9Z,EAAH,EAAGA,KAAH,OAClB,uBAAKyO,UAAU,2BAAf,UACE,sBAAKA,UAAU,8BAAf,SACE,eAAC,KAAD,CAAc5E,KAAM,GAAIrB,MAAM,YAEhC,sBAAKiG,UAAU,eAAf,SAA+BzO,EAAKiL,cAIlC8O,GAAa,SAAC,GAAD,IAAG/Z,EAAH,EAAGA,KAAH,OACjB,uBAAKyO,UAAU,0BAAf,UACE,sBAAKA,UAAU,6BAAf,SACE,eAAC,KAAD,CAAc5E,KAAM,GAAIrB,MAAM,YAEhC,sBAAKiG,UAAU,eAAf,SAA+BzO,EAAKiL,cAIzB+O,GA5JY,WACzB,IAAQhL,EAAeF,KAAfE,WACF1H,EAAWsD,cACjB,EAAgCN,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KACA,EAAgCD,mBAAS,IAAzC,oBAAO2P,EAAP,KAAiBC,EAAjB,KACM3I,EAAW9G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAO3B,WAAWC,gBAChE,EAA0CmG,aACxC,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aADlBI,EAAR,EAAQA,aAAcD,EAAtB,EAAsBA,gBAkDtB,OA9CAmH,qBAAU,WACR,GAAIqG,EAAU,CAAC,IACE4I,EADH,yCACZ,qCAAApR,EAAA,kEAE4B,iBAApBhF,EAFR,gCAG2BmS,GAAuB,IAAD,OAAKlS,IAHtD,OAGYiF,EAHZ,OAIMiR,EAAYjR,GAJlB,0BAMmC,kBAApBlF,EANf,kCAO2BmS,GAAuB,IAAD,OACrClS,EADqC,cAPjD,QAOYiF,EAPZ,OAUMiR,EAAYjR,GAVlB,2BAWmC,gBAApBlF,EAXf,kCAY2BmS,GAAuB,IAAD,OACrClS,EADqC,YAZjD,QAYYiF,EAZZ,OAeMiR,EAAYjR,GAflB,2BAgBmC,eAApBlF,EAhBf,kCAiB2BmS,GAAuB,IAAD,OACrClS,EADqC,WAjBjD,QAiBYiF,EAjBZ,OAoBMiR,EAAYjR,GApBlB,2BAqBmC,mBAApBlF,EArBf,kCAsB2BmS,GAAuB,IAAD,OACrClS,EADqC,eAtBjD,QAsBYiF,EAtBZ,OAyBMiR,EAAYjR,GAzBlB,0DA4BI3F,QAAQC,IAAI,KAAE8H,SAASrL,MA5B3B,0DADY,qDAiCZsL,YAAW,WACT6O,IACA5P,GAAW,KACV,KAGL,OAAO,WACL2P,EAAY,IACZ3P,GAAW,MAEZ,CAACgH,EAAUvN,EAAcD,IAG1B,eAAC,WAAD,UACE,eAACyV,GAAA,EAAD,CAAQ5H,OAAO,QAAQH,KAAMF,EAA7B,SACE,gBAAC,GAAD,CAAqBvC,WAAYA,EAAjC,UACE,gBAAC,GAAD,CACEA,WAAYA,EACZrF,MAAO,CAAEqD,QAAS,SAAUiI,OAAQ,EAAGD,gBAAiB,SAF1D,UAIE,+CACA,+BACE,eAACtG,GAAA,EAAD,UACE,eAAC,KAAD,CACE7E,KAAM,GACN8E,QAAS,kBACPrH,EACE5C,GAAc,CACZrI,KAAM,eACNwG,QAAQ,eAStB,gBAAC8W,GAAD,WACGjQ,GACCuQ,EAASra,OAAS,GAClBqa,EAAS3c,KAAI,SAAC0C,GACZ,IAAQoX,EAAapX,EAAboX,SAER,OADA9T,QAAQC,IAAIvD,EAAM,SACD,YAAboX,EACK,eAAC,GAAD,CAAapX,KAAMA,IACJ,gBAAboX,GAA2C,SAAbA,EAChC,eAAC,GAAD,CAAiBpX,KAAMA,IACR,YAAboX,EACF,eAAC,GAAD,CAAapX,KAAMA,IACJ,WAAboX,GAAsC,UAAbA,EAC3B,eAAC,GAAD,CAAYpX,KAAMA,IAEpB,mCAET0J,GACA,sBACEC,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBnD,MAAO,OACPqD,OAAQ,SANZ,SAUE,eAAC,GAAD,iBClLDyO,GAXE,SAACC,GAChB,MAA0B/P,mBAAS+P,GAAnC,oBAAO9U,EAAP,KAAc+U,EAAd,KAOA,MAAO,CAAE/U,QAAO6K,SALC,SAAC7C,GAChB,IAAQhI,EAAUgI,EAAEC,OAAZjI,MACR+U,EAAS/U,MCcAgV,GAAiB,yCAAG,WAAO3W,GAAP,oBAAAmF,EAAA,sEACRlD,KAAMmD,KAAK,QAASpF,GADZ,cACvBqF,EADuB,OAEvBjJ,EAAOiJ,EAAOjJ,KAAKA,KACnB6C,EAASoG,EAAOpG,OAHO,kBAKtB,CAAE7C,OAAM6C,WALc,2CAAH,sD,kCCIxBuT,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZD,eAAgB,UAElB8K,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QAI3ByI,GAAWpS,KAAOO,IAAV,6wBA4QC8R,GAxOG,WAChB,IAAM1D,EAAUX,KAEV9O,EAAWsD,cACToE,EAAeF,KAAfE,WAEF2J,EAAUC,eAEV5U,EAAeoW,GAAS,IACxBvW,EAAcuW,GAAS,IACvBM,EAAWN,GAAS,IAClBvP,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,UACA2P,iBAAkB,OAIhBpJ,EAAW9G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAO3B,WAAWE,QAC1DqW,EAAc,kBAClBtT,EACE5C,GAAc,CACZrI,KAAM,OACNwG,QAAQ,MAIRgY,EAAW,yCAAG,WAAOtN,GAAP,8BAAAxE,EAAA,6DACZ3E,EAAWJ,EAAauB,MACxBuV,EAAQjX,EAAY0B,MACpBwV,EAAWL,EAASnV,MAHR,kBAKOgV,GAAkB,CACvCvW,aAAcI,EACdP,YAAaiX,EACbJ,SAAUK,IARI,gBAKR/a,EALQ,EAKRA,KAMA2D,EAAuB3D,EAAvB2D,UAAcqX,EAXN,aAWehb,EAXf,IAahB4F,GAAcjC,GAEd2D,EAAS3C,GAAahB,IACtB2D,EAAS9C,GAAawW,IAEtB5T,eAAe6T,QAAQ,YAAatX,GACpCyD,eAAe6T,QAAQ,WAAYzT,KAAK0T,UAAUF,IAElDjQ,EAAY,UAAW,wEAEvB6P,IACAjC,EAAQ9Y,KAAK,cAxBG,kDA2BRoL,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GA5BL,0DAAH,sDA+BXkQ,EAAc,yCAAG,WAAOpP,GAAP,gCAAAhD,EAAA,yDACbuH,EAAQvE,EAARuE,IAEFlM,EAAWJ,EAAauB,MACxBuV,EAAQjX,EAAY0B,MACpBwV,EAAWL,EAASnV,QACd,UAAR+K,GAAmBlM,GAAY0W,GAASC,GANvB,0CAQMR,GAAkB,CACvCvW,aAAcI,EACdP,YAAaiX,EACbJ,SAAUK,IAXK,gBAQT/a,EARS,EAQTA,KAMA2D,EAAuB3D,EAAvB2D,UAAcqX,EAdL,aAcchb,EAdd,IAgBjB4F,GAAcjC,GAEd2D,EAAS3C,GAAahB,IACtB2D,EAAS9C,GAAawW,IAEtB5T,eAAe6T,QAAQ,YAAatX,GACpCyD,eAAe6T,QAAQ,WAAYzT,KAAK0T,UAAUF,IAElDjQ,EAAY,UAAW,wEAEvB6P,IACAjC,EAAQ9Y,KAAK,cA3BI,kDA8BToL,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GA/BJ,gCAiCF,UAARqF,GAAoBlM,GAAa0W,GAAUC,GACpDhQ,EAAY,QAAS,yEAlCF,0DAAH,sDAqCpB,OACE,eAAC,WAAD,UACE,eAACsM,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMF,EACNO,QAAS8I,EACTtD,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbhD,QAAS,KAPb,SAUE,eAAC,GAAD,CAAYD,GAAIjD,EAAhB,SACE,sBACE9C,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CACE+C,WAAYA,EACZrF,MAAO,CAAE+G,KAAM,GACfL,WAAY8K,EAHd,UAKE,gBAAC,GAAD,CAAcnM,WAAYA,EAA1B,UACE,eAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,gCAGA,+BACE,eAAC0E,GAAA,EAAD,CAAYC,QAAS,kBAAMiM,KAA3B,SACE,eAAC,KAAD,CAAgB/Q,KAAM,YAK5B,gBAACiD,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,gBAACjF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,GACJyC,GAAI,EACJhG,MAAO,CACLqD,QAAS,UALb,UAQE,eAAC,GAAD,CACEhC,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CACL2C,UAAW,QALf,uCAUA,gBAAC,GAAD,WACE,sBAAKmC,UAAU,YAAf,SACE,eAAC,KAAD,CAAgB5E,KAAM,GAAIrB,MAAM,YAElC,eAACgE,GAAA,EAAD,yBAEEiC,UAAU,cACNzK,GAHN,IAIEoX,eAAe,aAGnB,eAAC,GAAD,CACEpQ,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,gCAOA,gBAAC,GAAD,WACE,sBAAKyE,UAAU,YAAf,SACE,eAAC,KAAD,CAAe5E,KAAM,GAAIrB,MAAM,YAEjC,eAACgE,GAAA,EAAD,aACEpC,KAAK,QACLqE,UAAU,cACN5K,OAGR,eAAC,GAAD,CACEmH,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,sCAOA,gBAAC,GAAD,WACE,sBAAKyE,UAAU,YAAf,SACE,eAAC,KAAD,CAAoB5E,KAAM,GAAIrB,MAAM,YAEtC,eAACgE,GAAA,EAAD,aACEpC,KAAK,WACLqE,UAAU,cACNiM,OAIR,eAACrS,GAAA,EAAD,CACE+B,KAAK,SACLY,QAAQ,YACRxC,MAAM,UACN6S,WAAS,EACT1R,MAAO,CACL2C,UAAW,QAEbqC,QAAS,kBAAMkM,KARjB,mCAaF,eAAC/N,GAAA,EAAD,CACEG,MAAI,EACJ0C,GAAI,EACJhG,MAAO,CACLqD,QAAS,UAJb,SAOE,eAACsO,GAAA,EAAD,CAAQC,QAAM,EAAd,SACE,sBACEpP,IAAI,gCACJC,IAAI,SACJ9D,MAAM,4BCtRtBkT,GAAgBpT,KAAOO,IAAV,qjBA+Bb8S,GAAmBrT,KAAOO,IAAV,uhCA+gBP+S,GAldc,WAC3B,IAAQ1M,EAAeF,KAAfE,WACFmJ,EAAWC,eACXO,EAAUC,eACVtR,EAAWsD,cAEXJ,EAAWC,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAC7CG,EAAoByG,EAApBzG,gBACR,EAAgCuG,oBAAS,GAAzC,oBAAOqR,EAAP,KAAkBC,EAAlB,KAGA1Q,qBAAU,WACqB,KAAzBV,EAAS3G,aACX+X,GAAW,KAEZ,CAACpR,IAEJ,IAAMuO,EAAYZ,EAASK,SACxBQ,MAAM,KACNtb,QAAO,SAACsC,GAAD,MAAoB,KAATA,KACfiZ,EAAeF,EAAUA,EAAUnZ,OAAS,GAG5CsZ,EACa,gBAAjBD,GACiB,cAAjBA,GACiB,eAAjBA,GACiB,sBAAjBA,EAEIE,EAA6B,YAAjBF,EACZG,EAA4B,WAAjBH,EACX4C,EAA+B,cAAjB5C,EACd6C,EAA8B,aAAjB7C,EACb8C,EAAkC,IAArBhD,EAAUnZ,OAEvByZ,EAASrL,uBACb,SAACsL,GACCX,EAAQqD,QAAQ1C,KAElB,CAACX,IAGGkC,EAAc,WAClBvT,EACE5C,GAAc,CACZrI,KAAM,OACNwG,QAAQ,MAQRoZ,EAAe,kBvCpKdpW,KAAMC,SAASC,QAAQC,OAAvB,UuCuKLsB,EAAS9C,GAAa,KACtB8C,EAAS3C,GAAa,KAEtByC,eAAe8U,WAAW,YAC1B9U,eAAe8U,WAAW,aAE1BN,GAAW,GACXxM,OAAO+I,SAASgE,KAAO,KAMnBC,EAAa,WACjB9U,EACE5C,GAAc,CACZrI,KAAM,SACNwG,QAAQ,MA+VNgI,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAGJ,OACE,gBAAC,WAAD,WAGE,gBAACwQ,GAAD,CACE7R,MAAO,CACLsL,OAAQ,GAFZ,UAKkB,OAAfjG,GACC,eAACsM,GAAA,EAAD,CAAQe,MAAI,EAAZ,SACIV,EA7SR,eAACjM,GAAA,EAAD,UACE,gBAAC5C,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,eAACjF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJuB,UAAU,cACV9E,MAAO,CAAE8B,eAAgB,cACzBkD,QAASyN,EALX,SAOE,eAAC9D,GAAA,EAAO3P,IAAR,CAAY2T,WAAY,CAAEC,MAAO,KAAjC,SACE,eAAC,KAAD,CAAmB1S,KAAM,GAAIrB,MAAM,cAKvC,eAACsE,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJuB,UAAU,cACVE,QAAS,WACPgK,EAAQ9Y,KAAK,eALjB,SAQE,eAAC,KAAD,CAAiBgK,KAAM,GAAIrB,MAAM,YAEnC,eAACsE,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJuB,UAAU,cACV9E,MAAO,CAAE8B,eAAgB,YACzBkD,QAASsN,EALX,SAOE,eAAC3D,GAAA,EAAO3P,IAAR,CAAY2T,WAAY,CAAEC,MAAO,KAAjC,SACE,eAAC,KAAD,CAAU/T,MAAM,QAAQqB,KAAM,cA/EtC,eAAC6F,GAAA,EAAD,UACE,gBAAC5C,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,eAACjF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJuB,UAAU,cACV9E,MAAO,CAAE8B,eAAgB,cACzBkD,QAAS,WACsB,KAAzBnE,EAAS3G,aACXuY,IAEFrR,EAAY,QAAS,yEACrB8P,KAVJ,SAaE,eAACvC,GAAA,EAAO3P,IAAR,CAAY2T,WAAY,CAAEC,MAAO,KAAjC,SACE,eAAC,KAAD,CAAmB1S,KAAM,GAAIrB,MAAM,cAKvC,eAACsE,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGuB,UAAU,cAA5B,SACE,eAAC,KAAD,CAAiB5E,KAAM,GAAIrB,MAAM,YAEnC,eAACsE,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJuB,UAAU,cACV9E,MAAO,CAAE8B,eAAgB,YACzBkD,QAASkM,EALX,SAOE,eAACvC,GAAA,EAAO3P,IAAR,CAAY2T,WAAY,CAAEC,MAAO,KAAjC,SACE,eAAC,KAAD,CAAS/T,MAAM,QAAQqB,KAAM,gBA8TnB,OAAfmF,GACC,eAACsM,GAAA,EAAD,CAAQC,QAAM,EAAd,SACII,EAxORzC,GACAC,GACAC,GACAyC,GACAC,GACAC,EAGE,eAACrM,GAAA,EAAD,CAAWxD,SAAS,KAApB,SACE,gBAACY,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,eAACjF,GAAA,EAAD,CACEG,MAAI,EACJ0C,GAAI,EACJxC,GAAI,EACJsB,UAAU,cACV9E,MAAO,CAAE8B,eAAgB,cACzBkD,QAAS,kBAAMgK,EAAQ9Y,KAAK,eAN9B,SAQE,eAAC,KAAD,CAAiBgK,KAAM,GAAIrB,MAAM,YAEd,kBAApBzE,GACC,eAAC+I,GAAA,EAAD,CACEG,MAAI,EACJ0C,GAAI,EACJxC,GAAI,EACJsB,UAAU,cACVE,QAAS,WAlKG,gBAApB5K,GAAyD,eAApBA,EAGV,mBAApBA,EAIX4U,EAAQ9Y,KAAK,gCAHX8Y,EAAQ9Y,KAAK,yBAHb8Y,EAAQ9Y,KAAK,2BA4JL,SAOE,mDAIJ,eAACiN,GAAA,EAAD,CACEG,MAAI,EACJ0C,GAAI,EACJxC,GAAI,EACJsB,UAAU,cACVE,QAAS,kBAAM0K,EAAO,uBALxB,SAOE,mDAGF,eAACvM,GAAA,EAAD,CACEG,MAAI,EACJ0C,GAAI,EACJxC,GAAI,EACJsB,UAAU,cACVE,QAAS,kBAAM0K,EAAO,sBALxB,SAOE,yDAEF,eAACvM,GAAA,EAAD,CAEE6C,GAAI,EACJxC,GAAI,EACJsB,UAAU,cACVE,QAAS,kBAAM0K,EAAO,wBACtB1P,MAAO,CACL8B,eAAgB,YAPpB,SAUE,eAAC,KAAD,CAAmB5B,KAAM,GAAIrB,MAAM,YAErC,eAACsE,GAAA,EAAD,CACEG,MAAI,EACJ0C,GAAI,EACJxC,GAAI,EACJsB,UAAU,cACV9E,MAAO,CACL8B,eAAgB,YAElBkD,QAAS,kBACPrH,EACE5C,GAAc,CACZrI,KAAM,eACNwG,QAAQ,MAZhB,SAiBE,eAAC,KAAD,CAAwBgH,KAAM,GAAIrB,MAAM,YAG1C,eAACsE,GAAA,EAAD,CACEG,MAAI,EACJ0C,GAAI,EACJxC,GAAI,EACJsB,UAAU,cACV9E,MAAO,CACL8B,eAAgB,YAElBkD,QAASsN,EARX,SAUE,eAAC,KAAD,CAAUzT,MAAM,QAAQqB,KAAM,YAMjC,eAAC6F,GAAA,EAAD,IAjIL,eAACA,GAAA,EAAD,CAAWxD,SAAS,KAApB,SACE,gBAACY,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,eAACjF,GAAA,EAAD,CACEG,MAAI,EACJ0C,GAAI,EACJxC,GAAI,EACJsB,UAAU,cACV9E,MAAO,CAAE8B,eAAgB,cACzBkD,QAAS,kBAAM0K,EAAO,MANxB,SAQE,eAAC,KAAD,CAAiBxP,KAAM,GAAIrB,MAAM,YAEnC,eAACsE,GAAA,EAAD,CAAMG,MAAI,EAAC0C,GAAI,EAAGxC,GAAI,GAAIsB,UAAU,gBACpC,eAAC3B,GAAA,EAAD,CACEG,MAAI,EACJ0C,GAAI,EACJxC,GAAI,EACJsB,UAAU,cACV9E,MAAO,CAAE8B,eAAgB,YACzBkD,QAASkM,EANX,SAQE,eAAC,KAAD,CAASrS,MAAM,QAAQqB,KAAM,iBAuPnC,eAAC4R,GAAD,UACkB,OAAfzM,GAAuB,eAACsM,GAAA,EAAD,CAAQC,QAAM,EAAd,SAxIxBrC,EAEA,eAACxJ,GAAA,EAAD,CAAWxD,SAAS,KAApB,SACE,gBAACY,GAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGuB,UAAU,cAA5B,SACE,uBAAMA,UAAWgL,aAAK,WAAY,QAAlC,4BAEF,gBAAC3M,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIuB,UAAWgL,aAAK,cAAe,eAAlD,UACuB,mBAApB1V,GACC,uBACE0K,UAAWgL,aAAK,aAAc,CAC5B,gBAAkC,gBAAjBR,IAEnBtK,QAAS,kBAAM0K,EAAO,2BAJxB,yCAWoB,eAApBtV,GACoB,mBAApBA,IAEA,uBACE0K,UAAWgL,aAAK,aAAc,CAC5B,gBAAkC,cAAjBR,IAEnBtK,QAAS,kBAAM0K,EAAO,yBAJxB,uCAUF,uBACE5K,UAAWgL,aAAK,aAAc,CAC5B,gBAAkC,eAAjBR,IAEnBtK,QAAS,kBAAM0K,EAAO,0BAJxB,oDAQA,uBACE5K,UAAWgL,aAAK,aAAc,CAC5B,gBAAkC,sBAAjBR,IAEnBtK,QAAS,kBAAM0K,EAAO,iCAJxB,4DAcNF,EAEA,eAACzJ,GAAA,EAAD,CAAWxD,SAAS,KAApB,SACE,gBAACY,GAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGuB,UAAU,cAA5B,SACE,uBAAMA,UAAWgL,aAAK,WAAY,QAAlC,4BAEF,eAAC3M,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIuB,UAAWgL,aAAK,cAAe,eAAlD,SACE,uBACEhL,UAAWgL,aAAK,aAAc,CAC5B,gBAAkC,YAAjBR,IAEnBtK,QAAS,kBAAM0K,EAAO,uBAJxB,8CAcND,EAEA,eAAC1J,GAAA,EAAD,CAAWxD,SAAS,KAApB,SACE,gBAACY,GAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGuB,UAAU,cAA5B,SACE,uBAAMA,UAAWgL,aAAK,WAAY,QAAlC,4BAEF,eAAC3M,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIuB,UAAWgL,aAAK,cAAe,eAAlD,SACE,uBACEhL,UAAWgL,aAAK,aAAc,CAC5B,gBAAkC,WAAjBR,IAEnBtK,QAAS,kBAAM0K,EAAO,sBAJxB,oDAcNwC,EACK,eAACnM,GAAA,EAAD,CAAWxD,SAAS,OAGtB,eAACwD,GAAA,EAAD,QAoCW,OAAfV,GAAuB,eAAC,GAAD,IAExB,eAAC,GAAD,IACA,eAAC,GAAD,QC3RSwN,GAxPO,WAEpB,IAAMC,EAbe,CACrB,8EACA,qDACA,6BAYMnV,EAAWsD,cAGXiC,EAAcpC,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUtG,WAGrDQ,EAAgBoM,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAU9F,iBAGvDY,EAAawL,aAAY,SAAC5N,GAAD,OAAWA,EAAMsH,UAAUlF,cAClD4L,EAAoBC,cAApBD,gBAGFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAsCJE,qBAAU,WACR,OAAO,WACL5D,EAASzG,EAAc,IACvByG,EAASxG,QAEV,CAACwG,IA6FJ,OACE,iCACE,0BACEqC,MAAO,CACL+S,SAAU,SACVC,IAAK,EACL3H,gBAAiB,QACjBC,OAAQ,GALZ,UAQE,eAAC,GAAD,IACA,eAAC/C,GAAA,EAAD,OAEF,gCACE,eAACpF,GAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,gBAAC,GAAD,WACE,oDACA,iEAGF,eAAC0P,GAAA,EAAD,CAAS3d,WAAYA,EAArB,SACGwd,EAAMnf,KAAI,SAACuf,EAAOzR,GAGjB,OACE,eAAC0R,GAAA,EAAD,2BAHgB,IAGhB,aACE,eAACC,GAAA,EAAD,2BAHe,IAGf,aAA4BF,OADnBA,QAMjB,eAAC3K,GAAA,EAAD,CAAS8K,OAAK,IAxHL,SAACC,GACtB,OAAQA,GACN,KAAK,EACH,OAAO,eAAC,GAAD,IACT,KAAK,EACH,OACE,uBAAKtT,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAA9C,UACE,eAAC,GAAD,IACA,gBAACa,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAzB,UACE,eAACjF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGyC,GAAI,EAAGxC,GAAI,EAA7B,SACE,gBAAC,GAAD,CACEtD,KAAK,SACLtB,QAAQ,UACRoG,QAAS,kBAAMrH,EAASnI,GAAkB,KAH5C,UAKE,eAAC,KAAD,CAAa0K,KAAM,GAAIrB,MAAM,UAC7B,uBAAMmB,MAAO,CAAEuT,WAAY,SAAU1U,MAAO,SAA5C,kDAKJ,eAACsE,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGyC,GAAI,EAAGxC,GAAI,EAA7B,SACE,gBAAC,GAAD,CACEtD,KAAK,SACLtB,QAAQ,UACRoG,QAAS,kBAAMrH,EAASlI,GAAkB,KAH5C,UAKE,eAAC,KAAD,CAAiByK,KAAM,KACvB,uBAAMF,MAAO,CAAEuT,WAAY,UAA3B,wDAGJ,eAACpQ,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGyC,GAAI,EAAGxC,GAAI,EAA7B,SACE,gBAAC,GAAD,CACEtD,KAAK,SACLtB,QAAQ,UACRoG,QAAS,kBAAMrH,EAAShH,GAAoB,KAH9C,UAKE,eAAC,KAAD,CAAauJ,KAAM,GAAIrB,MAAM,UAC7B,uBAAMmB,MAAO,CAAEuT,WAAY,SAAU1U,MAAO,SAA5C,qEAKJ,eAACsE,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGyC,GAAI,EAAGxC,GAAI,EAA7B,SACE,gBAAC,GAAD,CACEtD,KAAK,SACLtB,QAAQ,UACRoG,QAAS,kBAAMrH,EAAS/G,GAA0B,KAHpD,UAKE,eAAC,KAAD,CAAmBsJ,KAAM,GAAIrB,MAAM,UACnC,uBAAMmB,MAAO,CAAEuT,WAAY,SAAU1U,MAAO,SAA5C,+DAQZ,KAAK,EACH,OACE,uBACEmB,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZO,cAAe,SACfN,OAAQ,OANZ,UASE,sBACEQ,IAAI,oCACJ7D,MAAM,MACN8D,IAAI,UACJzC,MAAO,CACLyD,aAAc,UAGlB,eAAC,GAAD,CAAkBpC,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,+EAKN,QACE,MAAO,SAsCEmT,CAAele,GAGA,IAAfA,GACC,gBAAC,WAAD,WACE,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,OAIJ,uBACE0K,MAAO,CACL6B,QAAS,OACTC,eAAgB,gBAChBiR,SAAU,QACV1P,QAAS,SACT1E,MAAO,qBACP8U,OAAQ,GACRnI,OAAQ,GARZ,UAWE,eAACvG,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRqL,YAAa,SACbrQ,QAAS,UAEX2B,QAjLC,WACb1P,EAAa,GAGjBqI,EAASzG,EAAc5B,EAAa,KAqKtB,SAUE,eAAC,KAAD,MAEF,eAACyP,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRqL,YAAa,SACbrQ,QAAS,UAEX2B,QAlNC,WACa,IAA1B9B,EAAY5O,UAGU,IAAfgB,GAAgD,KAA5BZ,EAAcb,UAGnB,IAAfyB,GAAgD,KAA5BZ,EAAcb,UAU7C8J,EAASzG,EALU,IAAf5B,EAKmBA,EAAa,EAJX,IALvBqI,EAAS1G,GAAkB,IAH3BmK,EAAY,QAAS,yEAHrBA,EAAY,QAAS,6DAwMT,SAUE,eAAC,KAAD,wB,mBCxQPuS,GAAe,yCAAG,WAAOtZ,GAAP,UAAA+E,EAAA,sEAChBlD,KAAMwD,IAAN,0BAA6BrF,IADb,mFAAH,sDA2BfuZ,GAAoB,yCAAG,WAAOC,GAAP,UAAAzU,EAAA,sEACrBlD,KAAMmD,KAAK,kBAAmBwU,GADT,mFAAH,sDAuBpBC,GAAmB,yCAAG,WAAO5Q,GAAP,UAAA9D,EAAA,sEACpBlD,KAAMmD,KAAK,WAAY6D,GADH,mFAAH,sDAwBnB6Q,GAAa,yCAAG,WAAOC,GAAP,UAAA5U,EAAA,6DAC3BzF,QAAQC,IAAI,SAAUoa,GADK,SAEd9X,KAAMsD,IAAI,WAAYwU,GAFR,mFAAH,sDCvDXC,GAtCmB,WAChC,OACE,gBAACzK,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,4BAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,4BAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,wCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,4BAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,4BAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,eCrB3CoH,GAA2B,SAAC,GAAc,IAAZ7d,EAAW,EAAXA,KAC5BsH,EAAWsD,cAejB,OACE,gBAAC0I,GAAA,EAAD,CAAUwK,OAAK,EAAf,UACE,eAAC1K,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK/B,YAC9B,eAACmV,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK9B,cAC9B,eAACkV,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK5B,eAC9B,eAACgV,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAC0B,SAAvB7J,EAAK7B,cAA2B,eAAO,iBAE1C,eAACiV,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK+d,aAC9B,gBAAC3K,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,UACG7J,EAAKge,aADR,IACuBhe,EAAKie,aAD5B,IAC2Cje,EAAKke,iBAEhD,eAAC9K,GAAA,EAAD,CAAWvJ,KAAK,QAAQ8E,QAzBR,WAClB,IAAQ1Q,EAAc+B,EAAd/B,UACRqJ,EAAS3E,EAAa1E,IAGtBqJ,EACE1E,EAAgB,CACdvG,KAAM,mBACNwG,QAAQ,MAiBV,SACE,eAAC,GAAD,CAAc0F,QAAQ,UAAUC,MAAM,QAAtC,6CAQOoG,OAAMC,KAAKgP,ICqKXM,GA5LuB,WACpC,IAAQnP,EAAeF,KAAfE,WACR,EAAgC1E,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KACA,EAAsCD,mBAAS,IAA/C,oBAAOuK,EAAP,KAAoBC,EAApB,KACMxN,EAAWsD,cACX2G,EAAW9G,aACf,SAAC5N,GAAD,OAAWA,EAAMkC,iBAAiBJ,aAAaI,oBAG3Cd,EAAYwM,aAChB,SAAC5N,GAAD,OAAWA,EAAMkC,iBAAiB0D,oBAE5BoI,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIEwG,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvDhJ,EACE1E,EAAgB,CACdvG,KAAM,mBACNwG,OAAQ4O,OA3B4B,8CAqC1C,WAAmCxT,GAAnC,kBAAA8K,EAAA,+EAEyBK,GAAgCnL,GAFzD,OAEUgL,EAFV,OAGI6L,EAAe7L,GACfsB,GAAW,GAJf,wDAOoBwE,KADR9D,EAAY,KAAMI,SAASrL,KAA3BiL,SANZ,wBAQMF,EAAY,QAAD,MACXR,GAAW,GATjB,2BAYIQ,EAAY,QAASE,GACrBV,GAAW,GAbf,0DArC0C,sBAuE1C,OAdAW,qBAAU,WAOR,OANIqG,GACFjG,YAAW,YA3D2B,oCA4DpCyJ,CAAoB9W,KACnB,KAGE,WACL6W,EAAe,IACfvK,GAAW,MAGZ,CAACgH,IAGF,eAAC,WAAD,UACE,eAACI,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,WACE,gBAAC,GAAD,CACExC,WAAYA,EACZrF,MAAO,CAAEqD,QAAS,SAAUgI,gBAAiB,QAASC,OAAQ,GAFhE,UAIE,yEACA,+BACE,eAACvG,GAAA,EAAD,UACE,eAAC,KAAD,CACE7E,KAAM,GACN8E,QAAS,kBACPrH,EACE1E,EAAgB,CACdvG,KAAM,mBACNwG,QAAQ,eAQrB6G,GAAamL,EAAYjV,OAAS,GACjC,eAACqT,GAAA,EAAD,CAAgB5G,UAAW6I,KAA3B,SACE,gBAAChC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,UACE,gBAACG,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,CAAWvJ,KAAK,UAChB,eAACuJ,GAAA,EAAD,UACE,eAAC,GAAD,CACEpI,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,wCAQF,eAACoJ,GAAA,EAAD,UACE,eAAC,GAAD,CACEpI,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,wCAQF,gBAACoJ,GAAA,EAAD,WACG,IACD,eAAC,GAAD,CACEpI,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EAHV,8CAWN,eAACqJ,GAAA,EAAD,UACGwB,EAAYvX,KAAI,SAACsO,GAAD,OACf,eAAC,GAAD,CAAiB5L,KAAM4L,cAMhClC,GAAoC,IAAvBmL,EAAYjV,QACxB,uBACE+J,MAAO,CACL6B,QAAS,OACTlD,MAAO,OACPqD,OAAQ,OACRF,eAAgB,SAChBC,WAAY,SACZO,cAAe,UAPnB,UAUE,sBAAKtC,MAAO,CAAEuC,SAAU,QAAS5D,MAAO,QAAxC,SACE,sBACE6D,IAAI,0BACJC,IAAI,YACJ9D,MAAM,WAGV,eAAC,GAAD,CAAkB0C,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,+FAKFN,GACA,sBACEC,MAAO,CACL6B,QAAS,OACTlD,MAAO,OACPqD,OAAQ,OACRF,eAAgB,SAChBC,WAAY,UANhB,SASE,eAAC,GAAD,cChLR0K,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZD,eAAgB,UAElB8K,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QA0SlBqM,GAjSqB,WAClC,IAAMrH,EAAUX,KAEV9O,EAAWsD,cACToE,EAAeF,KAAfE,WACR,EAAgC1E,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAEA,EAAsCD,mBAAS,IAA/C,oBAAO+T,EAAP,KAAoBC,EAApB,KAGA,EAAsDhU,mBAAS,IAA/D,oBAAOiU,EAAP,KAA4BC,EAA5B,KACA,EAAkClU,mBAAS,IAA3C,oBAAO8G,EAAP,KAAkBpB,EAAlB,KACQhM,EAAiByG,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAArDI,aACFuN,EAAW9G,aACf,SAAC5N,GAAD,OAAWA,EAAMkC,iBAAiBC,YAAY0D,UAExCmI,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIE4P,EAAc,WAClBtT,EACExE,EAAe,CACbzG,KAAM,SACNwG,QAAQ,KAGZ0H,GAAW,GACX+T,EAAe,IACfE,EAAuB,IACvBxO,EAAa,KAlCyB,SAyCzByO,EAzCyB,gFAyCxC,WAA+Bza,GAA/B,oBAAA+E,EAAA,+EAEyBuU,GAAgBtZ,GAFzC,OAEUiF,EAFV,OAGUkC,EAAYlC,EAAOjJ,KAAKA,KAAK1C,KAAI,SAAC0C,EAAMoL,GAC5C,IAAQjN,EAAkB6B,EAAlB7B,cACR,OAAO,yBACLZ,GAAI6N,EAAQ,GACTpL,GAFL,IAGE7B,cAAiC,SAAlBA,EAA2B,eAAO,oBAGrDmgB,EAAenT,GACfqT,EAAuB,IACvBjU,GAAW,GAbf,kDAeYU,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GACrBV,GAAW,GAjBf,2DAzCwC,oEAmExC,WAAqCsC,GAArC,oBAAA9D,EAAA,+EAEyBkI,GAAwBpE,GAFjD,OAEU5D,EAFV,OAGUkC,EAAYlC,EAAO3L,KAAI,SAAC0C,EAAMoL,GAClC,IAAQjN,EAAkB6B,EAAlB7B,cACR,OAAO,yBACLZ,GAAI6N,EAAQ,GACTpL,GAFL,IAGE7B,cAAiC,SAAlBA,EAA2B,eAAO,oBAIrDmgB,EAAenT,GACfqT,EAAuB,IACvBjU,GAAW,GAdf,0DAiBoBwE,KADR9D,EAAY,KAAMI,SAASrL,KAA3BiL,SAhBZ,wBAkBMF,EAAY,QAAS,gHACrBR,GAAW,GAnBjB,2BAsBIQ,EAAY,QAASE,GACrBV,GAAW,GAvBf,2DAnEwC,sBAkHxCW,qBAAU,WACR,GAAkB,KAAdkG,EAAJ,CAIA,IAAMvE,EAAc,CAClB7I,eACA9F,YAAakT,GAGf7G,GAAW,GACXe,YAAW,YA7H2B,oCA8HpCoT,CAAsB7R,KACrB,QAEF,CAACuE,IAKJlG,qBAAU,WACJqG,IACFhH,GAAW,GAEXe,YAAW,WACTmT,EAAgBza,KACf,QAGJ,CAACuN,IA4BJ,OACE,eAAC,WAAD,UACE,eAAC8F,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMF,EACNO,QAAS8I,EACTtD,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CAAEhD,QAAS,KAN5B,SAQE,eAAC,GAAD,CAAYD,GAAIjD,EAAhB,SACE,sBACE9C,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,gBAAC,GAAD,CAAc1B,WAAYA,EAA1B,UACE,eAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,uCAGA,+BACE,eAAC0E,GAAA,EAAD,CAAYC,QAASiM,EAArB,SACE,eAAC,KAAD,CAAgB/Q,KAAM,YAI3BH,GACC,sBACEC,MAAO,CACLrB,MAAO,OACPqD,OAAQ,OACR6K,UAAW,QACXhL,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,eAAC,GAAD,OAGFhC,GACA,gBAACoD,GAAA,EAAD,CAAMC,WAAS,EAAC4R,QAAQ,SAAxB,UACE,eAAC7R,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,uBACEvD,MAAO,CACL6B,QAAS,QAFb,UAKE,sBACE7B,MAAO,CACL+G,KAAM,GAFV,SAKE,eAAC,GAAD,CACEV,aAAcA,EACdC,YAAY,wEACZC,UAAQ,MAIZ,eAACoI,GAAA,EAAO3P,IAAR,CACEgP,SA1IA,CACpBqD,KAAM,CAAEuB,MAAO,GACfuB,MAAO,CAAEvB,MAAO,KAChBqC,QAAS,CAAErC,MAAO,MAwIE3E,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UACTlV,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,UARhB,SAWE,eAACgD,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS,kBAzG/BpE,GAAW,QACXe,YAAW,WACTmT,EAAgBza,KACf,MA6FiB,SAWE,eAAC,KAAD,aAKR,gBAAC8I,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIvD,MAAO,CAAE2C,UAAW,OAAvC,UACE,sBAAK3C,MAAO,CAAEgC,OAAQ,IAAKrD,MAAO,QAAlC,SACE,eAAC,KAAD,CACEsD,KAAMyS,EACNpU,QAlKN,CACd,CAAEC,MAAO,cAAeC,WAAY,eAAM7B,MAAO,KACjD,CAAE4B,MAAO,eAAgBC,WAAY,2BAAQ7B,MAAO,KACpD,CAAE4B,MAAO,gBAAiBC,WAAY,eAAM7B,MAAO,KACnD,CAAE4B,MAAO,aAAcC,WAAY,qBAAO7B,MAAO,KACjD,CAAE4B,MAAO,aAAcC,WAAY,yCAAY7B,MAAO,KACtD,CAAE4B,MAAO,eAAgBC,WAAY,iBAAQ7B,MAAO,KACpD,CAAE4B,MAAO,eAAgBC,WAAY,iBAAQ7B,MAAO,KACpD,CAAE4B,MAAO,gBAAiBC,WAAY,2BAAQ7B,MAAO,MA2JjCwD,YA/GK,SAACyB,GAC1B,IAAQvB,EAAQuB,EAARvB,IACRwS,EAAuBxS,IA8GHH,SAAU,OAGbiT,OAAOC,KAAKR,GAAqB3e,OAAS,GACzC,sBAAK+J,MAAO,CAAE2C,UAAW,QAAzB,SACE,eAACjE,GAAA,EAAD,CACE2C,QAAQ,WACRxC,MAAM,UACNmG,QAAS,kBAnHI,WACnC,IAAQ1Q,EAAcsgB,EAAdtgB,UAERqJ,EAAS3E,EAAa1E,IAGtBqJ,EACE1E,EAAgB,CACdvG,KAAM,mBACNwG,QAAQ,KA0GyBmc,IAHjB,qDCnDTC,GAhPc,WAC3B,IAAM3X,EAAWsD,cAGjB,EAAgCN,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAGA,EAAsCD,mBAAS,IAA/C,oBAAO+T,EAAP,KAAoBC,EAApB,KAEQzT,EAAoBC,cAApBD,gBAGA7G,EAAiByG,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAArDI,aAGFvB,EAAmBgI,aACvB,SAAC5N,GAAD,OAAWA,EAAMkC,iBAAiB0D,oBAGpC,EAA0B6H,mBAAS,CACjCgP,KAAM,EACN4F,YAAa,KAFf,oBAAOC,EAAP,KAAcC,EAAd,KAKMrU,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAYEqU,EAAgB,CACpBrE,KAAM,CAAEuB,MAAO,GACfuB,MAAO,CAAEvB,MAAO,KAChBqC,QAAS,CAAErC,MAAO,MAzCa,SAiDlB+C,EAjDkB,gFAiDjC,WAA8Btb,GAA9B,kBAAA+E,EAAA,+EAEyBuU,GAAgBtZ,GAFzC,OAEUiF,EAFV,OAGIqV,EAAerV,EAAOjJ,KAAKA,MAC3BuK,GAAW,GAJf,wDAOoBwE,KADR9D,EAAY,KAAMI,SAASrL,KAA3BiL,SANZ,wBAQMF,EAAY,QAASE,GACrBV,GAAW,GATjB,kCAYIQ,EAAY,QAAD,MACXR,GAAW,GAbf,6EAjDiC,sBAsEjCW,qBAAU,WACRX,GAAW,GACXe,YAAW,WACTgU,EAAetb,KACd,OAEF,IA6BH,OACE,iCACE,yBACE2F,MAAO,CACL+S,SAAU,SACVC,IAAK,EACL3H,gBAAiB,QACjBC,OAAQ,GALZ,SAQE,eAAC,GAAD,MAEF,gCACE,eAACnI,GAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,gBAAC,GAAD,WACE,oDACA,8EAEF,uBACEuB,UAAU,YACV9E,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZ6T,UAAW,6BACXC,aAAc,6BACdnL,WAAY,SACZD,cAAe,UARnB,UAWE,eAACkE,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UAJX,SAME,eAACnQ,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS,WAzH3BrH,EACExE,EAAe,CACbzG,KAAM,SACNwG,QAAQ,MA6GI,SAWE,eAAC,KAAD,QAIJ,eAACyV,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UAJX,SAME,eAACnQ,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS,kBA5E3BpE,GAAW,GACX+T,EAAe,IACfc,EAAS,CAAE9F,KAAM,EAAG4F,YAAa,UACjC5T,YAAW,WACTgU,EAAetb,KACd,MA8Da,SAWE,eAAC,KAAD,WAKL0F,GACC,sBACEC,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZpD,MAAO,QACPqD,OAAQ,QANZ,SASE,eAAC,GAAD,OAIFjC,GAAa2U,EAAYze,OAAS,GAClC,gBAAC,WAAD,WACE,eAACqT,GAAA,EAAD,CACE5G,UAAW6I,KACXvL,MAAO,CACL2C,UAAW,UAHf,SAME,gBAAC4G,GAAA,EAAD,CAAOvJ,MAAO,CAAE8M,SAAU,QAASgJ,UAAW,UAA9C,UAEE,eAAC,GAAD,IACA,eAACpM,GAAA,EAAD,UACGgL,EACEqB,MACCP,EAAM7F,KAAO6F,EAAMD,YACnBC,EAAM7F,KAAO6F,EAAMD,YACjBC,EAAMD,aAET5hB,KAAI,SAAC0C,EAAMoL,GAAP,OACH,eAAC,WAAD,UACE,eAAC,GAAD,CAA0BpL,KAAMA,KADnBA,EAAK/B,UAAY,sBAO1C,eAAC0hB,GAAA,EAAD,CAEEtT,UAAU,MACVvM,MAAOue,EAAYze,OACnBsf,YAAaC,EAAMD,YACnB5F,KAAM6F,EAAM7F,UAII,IAArB7W,GAA0B,eAAC,GAAD,IAC3B,eAAC,GAAD,mBC1NDmd,GA3Ca,WAC1B,OACE,gBAACzM,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,4BAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,4BAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,wCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,4BAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,yCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,4BAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAErB,MAAO,e,mBC/BxCuX,GAAuBzX,KAAOO,IAAV,2JACf,qBAAGkB,KAAkB,QACpB,qBAAGA,KAAkB,QACX,YAAgB,IAAbrB,EAAY,EAAZA,MACrB,MAAc,uBAAVA,EACK,UACY,wBAAVA,EACF,UACY,yBAAVA,EACF,UACY,0BAAVA,GAA+C,SAAVA,EACvC,UAEFA,KASXqX,GAAqBC,UAAY,CAC/BjW,KAAMkW,KAAUC,OAAOC,WACvBzX,MAAOuX,KAAUG,OAAOD,YAG1BJ,GAAqBpX,aAAe,CAClCoB,KAAM,IACNrB,MAAO,OAEMqX,I,eAAAA,MCsCAM,GApEY,SAAC,GAAc,IAAZngB,EAAW,EAAXA,KACtBsH,EAAWsD,cAQjB,OACE,gBAAC0I,GAAA,EAAD,CAAUwK,OAAK,EAAf,UACE,eAAC1K,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAKogB,aAC9B,eAAChN,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK9B,cAC9B,eAACkV,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK5B,eAC9B,eAACgV,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAC0B,SAAvB7J,EAAK7B,cAA2B,eAAO,iBAE1C,eAACiV,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAKqgB,cAC9B,eAACjN,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAKsgB,aAC9B,eAAClN,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SACE,uBAAKF,MAAO,CAAE6B,QAAS,OAAQE,WAAY,UAA3C,UACE,eAAC,GAAD,CAAsB7B,KAAM,GAAIrB,MAAOxI,EAAKugB,mBACjB,uBAA1BvgB,EAAKugB,kBACJ,eAAC,GAAD,CACEvV,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAEuT,WAAY,WAJvB,0BASyB,wBAA1Bld,EAAKugB,kBACJ,eAAC,GAAD,CACEvV,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAEuT,WAAY,WAJvB,0BASyB,yBAA1Bld,EAAKugB,kBACJ,eAAC,GAAD,CACEvV,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAEuT,WAAY,WAJvB,+BAWN,eAAC9J,GAAA,EAAD,CACEvJ,KAAK,QACLF,MAAO,CACL8M,SAAU,SAHd,SAME,eAAC,GAAD,CAAclO,QAAQ,UAAUC,MAAM,QAAQmG,QAzDhC,WAClBrH,EAAS9B,GAAqBxF,EAAKogB,aAEnC9Y,EAAShH,IAAoB,IAC7BgH,EAASnC,GAAwB,UAqD7B,6C,8BC9DOqb,GANWpY,aAAOqY,KAAPrY,CAAH,gEC+DRsY,GA/DmB,WAChC,OACE,gBAACvN,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,wCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,wCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAKF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,4BAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,8CAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,gCCoCO2W,GAzFmB,SAAC,GAAc,IAAZ3gB,EAAW,EAAXA,KACnC,OACE,gBAACsT,GAAA,EAAD,CAAUwK,OAAK,EAAf,UACE,eAAC1K,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAKW,aAC9B,eAACyS,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK0S,WAC9B,eAACU,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK+Q,aAC9B,eAACqC,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK2S,WAC9B,gBAACS,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,UAC0B,IAAvB7J,EAAK4gB,eAAyB,IAAK,IACZ,IAAvB5gB,EAAK4gB,eAAyB5gB,EAAK4gB,iBAEtC,eAACxN,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK6gB,mBAC9B,gBAACzN,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,UAC6B,KAA1B7J,EAAK8gB,kBACJ,eAAC,GAAD,CAAkB9V,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,eAKyB,KAA1BhK,EAAK8gB,kBACJ,eAAC,GAAD,CAAkB9V,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,SACGhK,EAAK8gB,sBAKZ,gBAAC1N,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,UACuB,KAApB7J,EAAK+gB,YACJ,eAAC,GAAD,CAAkB/V,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,eAImB,KAApBhK,EAAK+gB,YACJ,uBAAKpX,MAAO,CAAE6B,QAAS,OAAQE,WAAY,UAA3C,UACE,eAAC,GAAD,CAAsB7B,KAAM,GAAIrB,MAAOxI,EAAK+gB,aAC5C,eAAC,GAAD,CACE/V,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAEuT,WAAY,WAJvB,SAMGld,EAAK+gB,mBAKd,eAAC3N,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAKghB,aAC9B,eAAC5N,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SACG7J,EAAKihB,cAAgBjhB,EAAKihB,cAAgB,0CAE7C,eAAC7N,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SACE,uBAAKF,MAAO,CAAE6B,QAAS,OAAQE,WAAY,UAA3C,UACE,eAAC,GAAD,CAAsB7B,KAAM,GAAIrB,MAAOxI,EAAKkhB,iBACnB,uBAAxBlhB,EAAKkhB,gBACJ,eAAC,GAAD,CACElW,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAEuT,WAAY,WAJvB,0BASuB,wBAAxBld,EAAKkhB,gBACJ,eAAC,GAAD,CACElW,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAEuT,WAAY,WAJvB,0BASuB,yBAAxBld,EAAKkhB,gBACJ,eAAC,GAAD,CACElW,QAAQ,YACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAEuT,WAAY,WAJvB,mCC7BGiE,GA/CwB,WACrC,OACE,gBAAChO,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,wCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,wCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,SAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kCAIF,eAACoJ,GAAA,EAAD,CAAWvJ,KAAK,QAAQF,MAAO,CAAE8M,SAAU,QAA3C,SACE,eAAC,GAAD,CAAkBzL,QAAQ,YAAYqB,UAAU,KAAKrC,OAAQ,EAA7D,kDC7BOoX,GAVShZ,aAAOoE,KAAPpE,CAAH,0NCKfiZ,GAAiC,SAAC,GAAc,IAAZrhB,EAAW,EAAXA,KAClCshB,EAAQlH,GAAS,GACjB9S,EAAWsD,cAGjBM,qBAAU,WACR,IAAQ5F,EAAqBtF,EAArBsF,iBACRgC,EAASjC,GAAuB,CAAEC,mBAAkBC,MAAO,OAC1D,CAACvF,EAAMsH,IAOV,OACE,gBAACgM,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAKW,aAC9B,eAACyS,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK0S,WAC9B,eAACU,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK+Q,aAC9B,eAACqC,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK2S,WAC9B,eAACS,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SACE,eAAC,GAAD,aACEF,MAAO,CAAE4X,UAAW,QACpBnX,KAAK,SACLkD,OAfa,WACnB,IAAM/H,EAAQic,OAAOC,WAAWH,EAAM/b,OAC9BD,EAAqBtF,EAArBsF,iBACRgC,EAASjC,GAAuB,CAAEC,mBAAkBC,aAa1C+b,MAGR,eAAClO,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAK6gB,mBAC9B,eAACzN,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAKghB,aAC9B,eAAC5N,GAAA,EAAD,CAAWvJ,KAAK,QAAhB,SAAyB7J,EAAKihB,oBAKrBrS,OAAMC,KAAKwS,I,mDCbbK,GAAkC,yCAAG,WAAOtB,GAAP,gBAAArX,EAAA,sEACzBlD,KAAMwD,IAAN,gCAAmC+W,IADV,cACxCnX,EADwC,yBAEvCA,EAAOjJ,KAAKA,MAF2B,2CAAH,sDAgClC2hB,GAA0C,yCAAG,WAAOC,GAAP,gBAAA7Y,EAAA,sEACjClD,KAAMmD,KAAK,wBAAyB4Y,GADH,cAChD3Y,EADgD,yBAE/CA,EAAOjJ,KAAKA,MAFmC,2CAAH,sDAmB1C6hB,GAAsB,yCAAG,WAAOC,GAAP,gBAAA/Y,EAAA,sEACblD,KAAMsD,IAAI,+BAAgC2Y,GAD7B,cAC5B7Y,EAD4B,yBAE3BA,EAAOjJ,KAAKA,MAFe,2CAAH,sDAkCtB+hB,GAAyB,yCAAG,WAAOC,GAAP,gBAAAjZ,EAAA,sEAChBlD,KAAMsD,IAAI,yBAA0B6Y,GADpB,cAC/B/Y,EAD+B,yBAE9BA,EAAOjJ,KAAKA,MAFkB,2CAAH,sDAazBiiB,GAAkC,yCAAG,WAAOC,GAAP,gBAAAnZ,EAAA,sEACzBlD,KAAMsD,IAAI,qCAAsC+Y,GADvB,cACxCjZ,EADwC,yBAEvCA,EAAOjJ,KAAKA,MAF2B,2CAAH,sDAalCmiB,GAAiC,yCAAG,WAAO1jB,GAAP,gBAAAsK,EAAA,sEACxBlD,KAAMsD,IAAI,gCAAiC1K,GADnB,cACvCwK,EADuC,yBAEtCA,EAAOjJ,KAAKA,MAF0B,2CAAH,sDAajCoiB,GAAmC,yCAAG,WAAO3jB,GAAP,gBAAAsK,EAAA,sEAC1BlD,KAAMsD,IAAI,kCAAmC1K,GADnB,cACzCwK,EADyC,yBAExCA,EAAOjJ,KAAKA,MAF4B,2CAAH,sDCjI1CoW,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZD,eAAgB,UAElB8K,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QA8MlBsQ,GArMgB,WAC7B,IAAMtL,EAAUX,KAGVkM,EAAeC,mBAEfjb,EAAWsD,cACToE,EAAeF,KAAfE,WACAnE,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAGEuG,EAAW9G,aAAY,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWE,YAAY6F,WAC/Dub,EAAa3V,aAAY,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWmG,qBACrDud,EAAiB/X,aACrB,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWoG,uBAGxBtB,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAGtD,EAAsC0G,mBAAS,IAA/C,oBAAOmY,EAAP,KAAoBC,EAApB,KAGA,EAAoCpY,oBAAS,GAA7C,oBAAOqY,EAAP,KAAoBC,EAApB,KAEMC,EAAcC,2BAAgB,CAClCC,QAAS,kBAAMT,EAAaU,WAGxBC,EAAoB,yCAAG,iCAAAla,EAAA,kEAEzB8Z,IAIqB,yBAFb3B,EAAmBsB,EAAe,GAAlCtB,iBAGa,yBAAnBA,EAPuB,uBASvB5d,QAAQC,IAAI,mEATW,0CAanBse,GAAuB,CAC3Bhf,OAAQ,WACRud,eAfuB,cAoBnBnJ,EAAWuL,EAAellB,KAAI,YAElC,MAAO,CACLgI,iBAH0D,EAAvBA,iBAInC4d,kBAHwBtf,EAAUtF,aArBb,UA4BnB2jB,GAAmChL,GA5BhB,QA6BzBlM,EAAY,UAAW,qHA7BE,kDA+BjBE,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GAhCI,0DAAH,qDAoCpB2P,EAAc,kBAClBtT,EACElC,GAAmB,CACjB/I,KAAM,UACNwG,QAAQ,MAwCd,OAjCAqI,qBAAU,WACJqG,IACFqR,GAAa,GAGbJ,EAAellB,KAAI,WAAe8N,GAAW,IAAvBsH,EAAsB,EAAtBA,SACdyQ,EAASC,SAASC,cAAc,UAChCC,EAAQC,KAAO,IAAIC,MAAQC,OAAO,UAClCC,EAAW,gBAAYtD,EAAZ,YAA0B1N,EAA1B,YAAsC4Q,GACvDK,KAAOC,SAAST,EAAQ,CACtBU,KAAM,cACNC,KAAMJ,EACNnH,MAAO,EACP5Q,OAAQ,GACRoY,aAAa,EACbC,WAAY,WAIZtB,EADY,IAAVtX,EACa,CAAC+X,EAAOc,UAAU,cAElB,SAAC9V,GACd,IAAM7O,EAAW6O,EAEjB,OADA7O,EAASO,KAAKsjB,EAAOc,UAAU,cACxB3kB,OAIbsjB,GAAa,MAId,CAACrR,IAEF,eAAC,WAAD,UACE,eAAC8F,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMF,EACNO,QAAS8I,EACTtD,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CAAEhD,QAAS,KAN5B,SAQE,eAAC,GAAD,CAAYD,GAAIjD,EAAhB,SACE,sBACE9C,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CACE+C,WAAYA,EACZrF,MAAO,CAAE+G,KAAM,GACfjC,UAAU,YAHZ,UAKE,gBAAC,GAAD,CAAcO,WAAYA,EAA1B,UACE,eAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,6CAGA,+BACE,eAAC0E,GAAA,EAAD,CAAYC,QAASiM,EAArB,SACE,eAAC,KAAD,CAAgB/Q,KAAM,YAI5B,sBACEF,MAAO,CACL2C,UAAW,OACXc,aAAc,QAHlB,SAME,eAAC/E,GAAA,EAAD,CACE2C,QAAQ,WACRxC,MAAM,UACNmG,QAAS,kBAAMsU,KAHjB,+CASF,sBACEtZ,MAAO,CACL6B,QAAS,QAGTG,OAAQ,OACR6K,UAAW,QACXvE,UAAW,UAPf,SAUE,sBAAKoD,IAAKiN,EAAV,SACGK,GACCF,GACAA,EAAYnlB,KAAI,SAAC4mB,EAAK9Y,GAAN,OACd,sBAEEzB,MAAO,CACLqD,QAAS,UAHb,SAME,sBAAKb,IAAK+X,EAAK9X,IAAI,UAAU9D,MAAM,UAL9B,UAAY8C,sBCvMnCgL,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZD,eAAgB,UAElB8K,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QAuJlBoS,GA9IkB,WAC/B,IAAMpN,EAAUX,KAEV9O,EAAWsD,cACToE,EAAeF,KAAfE,WAEFuC,EAAW9G,aACf,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWE,YAAY+F,aAGpCnB,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAChDwc,EAAa3V,aAAY,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWmG,qBACrDud,EAAiB/X,aACrB,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWoG,uBAEtB2F,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIE4P,EAAc,kBAClBtT,EACElC,GAAmB,CACjB/I,KAAM,YACNwG,QAAQ,MAIRuhB,EAAe,yCAAG,+BAAArb,EAAA,+EAEd8Y,GAAuB,CAC3Bhf,OAAQ,YACRud,eAJkB,cAOdnJ,EAAWuL,EAAellB,KAAI,YAElC,MAAO,CACLgI,iBAH0D,EAAvBA,iBAInC4d,kBAHwBtf,EAAUtF,aARlB,SAed8jB,GAAoCnL,GAftB,OAgBpBlM,EAAY,UAAW,qHACvB6P,IAjBoB,kDAmBZ3P,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GApBD,0DAAH,qDAuBrB,OACE,eAAC,WAAD,UACE,eAACoM,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMF,EACNO,QAAS8I,EACTtD,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CAAEhD,QAAS,KAN5B,SAQE,eAAC,GAAD,CAAYD,GAAIjD,EAAhB,SACE,sBACE9C,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,gBAAC,GAAD,CAAc1B,WAAYA,EAA1B,UACE,eAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,uCAGA,+BACE,eAAC0E,GAAA,EAAD,CAAYC,QAASiM,EAArB,SACE,eAAC,KAAD,CAAgB/Q,KAAM,YAI5B,gBAACiD,GAAA,EAAD,CAAMC,WAAS,EAACrB,WAAW,SAA3B,UACE,eAACoB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,sBACEf,IAAI,8BACJ7D,MAAM,OACN8D,IAAI,eAGR,gBAACU,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZO,cAAe,UANnB,UASE,eAAC,GAAD,CAAkBjB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,gEAGA,eAAC,GAAD,CAAkBgB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,+DAGA,uBACEL,MAAO,CACL2C,UAAW,OACXd,QAAS,QAHb,UAME,eAACnD,GAAA,EAAD,CACE2C,QAAQ,YACRxC,MAAM,YACNmB,MAAO,CACL8M,SAAU,OACV4G,YAAa,UAEf1O,QAAS,kBAAMyV,KAPjB,oBAWA,eAAC/b,GAAA,EAAD,CACE2C,QAAQ,YACRxC,MAAM,UACNmB,MAAO,CACL8M,SAAU,OACV4G,YAAa,UAEf1O,QAAS,kBAAMiM,KAPjB,qDChJdxE,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZD,eAAgB,UAElB8K,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QAwJlBsS,GA/IkB,WAC/B,IAAMtN,EAAUX,KAEV9O,EAAWsD,cACToE,EAAeF,KAAfE,WAEFuC,EAAW9G,aACf,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWE,YAAY8F,aAEpCsb,EAAa3V,aAAY,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWmG,qBACrDud,EAAiB/X,aACrB,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWoG,uBAEtB2F,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIE4P,EAAc,kBAClBtT,EACElC,GAAmB,CACjB/I,KAAM,YACNwG,QAAQ,MAIRyhB,EAAqB,yCAAG,+BAAAvb,EAAA,+EAGpB8Y,GAAuB,CAC3Bhf,OAAQ,UACRud,eALwB,cAQpBnJ,EAAWuL,EAAellB,KAAI,kBAA2B,CAC7DgI,iBADkC,EAAGA,iBAErCsb,cAAe,EACfsC,kBAAmB,SAGrB5f,QAAQC,IAAI0T,GAdc,SAgBpBkL,GAAkClL,GAhBd,OAiB1BlM,EAAY,UAAW,wGACvB6P,IAlB0B,kDAqBlB3P,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GAtBK,0DAAH,qDA0B3B,OACE,eAAC,WAAD,UACE,eAACoM,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMF,EACNO,QAAS8I,EACTtD,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CAAEhD,QAAS,KAN5B,SAQE,eAAC,GAAD,CAAYD,GAAIjD,EAAhB,SACE,sBACE9C,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,gBAAC,GAAD,CAAc1B,WAAYA,EAA1B,UACE,eAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,uCAGA,+BACE,eAAC0E,GAAA,EAAD,CAAYC,QAASiM,EAArB,SACE,eAAC,KAAD,CAAgB/Q,KAAM,YAI5B,gBAACiD,GAAA,EAAD,CAAMC,WAAS,EAACrB,WAAW,SAA3B,UACE,eAACoB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,sBACEf,IAAI,8BACJ7D,MAAM,OACN8D,IAAI,eAGR,gBAACU,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZO,cAAe,UANnB,UASE,gBAAC,GAAD,CAAkBjB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,+DACa,OAEb,eAAC,GAAD,CAAkBgB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,mDAGA,uBACEL,MAAO,CACL2C,UAAW,OACXd,QAAS,QAHb,UAME,eAACnD,GAAA,EAAD,CACE2C,QAAQ,YACRxC,MAAM,YACNmB,MAAO,CACL8M,SAAU,OACV4G,YAAa,UAEf1O,QAAS,kBAAM2V,KAPjB,oBAWA,eAACjc,GAAA,EAAD,CACE2C,QAAQ,YACRxC,MAAM,UACNmB,MAAO,CACL8M,SAAU,OACV4G,YAAa,UAEf1O,QAASiM,EAPX,qDCzHd2J,GAAcnc,KAAOO,IAAV,2PA6aFmK,GA1ZU,WACvB,IAAQ9D,EAAeF,KAAfE,WACR,EAAgC1E,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAGA,EAA4CD,mBAAS,IAArD,oBAAO7L,EAAP,KAAuB+lB,EAAvB,KACMld,EAAWsD,cAGXwV,EAAa3V,aAAY,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWmG,qBACrDwf,EAAgBha,aACpB,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWkG,uBAExBuM,EAAW9G,aAAY,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWH,aAAakE,UAEtE,EAAoD4H,aAClD,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aADlBG,EAAR,EAAQA,gBAAiBzF,EAAzB,EAAyBA,SAAU0F,EAAnC,EAAmCA,aAK7B+B,EAAU,CACd,CAAE8W,MAAO,4BAASvM,IAAK,cACvB,CAAEuM,MAAO,sBAAQvM,IAAK,cACtB,CAAEuM,MAAO,4BAASvM,IAAK,YACvB,CAAEuM,MAAO,sBAAQvM,IAAK,YACtB,CAAEuM,MAAO,eAAMvM,IAAK,cACpB,CAAEuM,MAAO,sBAAQvM,IAAK,oBACtB,CAAEuM,MAAO,sBAAQvM,IAAK,oBACtB,CAAEuM,MAAO,4CAAevM,IAAK,oBAC7B,CAAEuM,MAAO,sBAAQvM,IAAK,iBACtB,CAAEuM,MAAO,eAAMvM,IAAK,kBACpB,CAAEuM,MAAO,qBAAOvM,IAAK,cACrB,CAAEuM,MAAO,iCAASvM,IAAK,kBAEnB/T,EAAakO,aACjB,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWH,aAAapC,cAGrC8iB,EAAgB,CACpBrE,KAAM,CAAEuB,MAAO,GACfuB,MAAO,CAAEvB,MAAO,KAChBqC,QAAS,CAAErC,MAAO,MAGd/K,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvDhJ,EAAShH,GAAoBmR,MAGzBiT,EAAc,SAACroB,EAAMwG,GACzByE,EACElC,GAAmB,CACjB/I,OACAwG,aAIEgI,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIE2Z,EAAsB,yCAAG,WAAOvE,GAAP,kBAAArX,EAAA,+EAEN2Y,GAAmCtB,GAF7B,OAErBnX,EAFqB,OAG3Bub,EAAkBvb,GAClB3B,EAAS7B,GAAuBwD,IAChCsB,GAAW,GALgB,gDAOnBU,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GACrBuZ,EAAkB,IAClBja,GAAW,GAVgB,yDAAH,sDAoB5BW,qBAAU,YACJqG,GAA2B,oBAAfhV,KACdgO,GAAW,GACXe,YAAW,WACTqZ,EAAuBvE,KACtB,MAEA7O,GACHjK,EAAS5B,QAGV,CAAC6L,EAAUhV,IAEd,IAoFwB0gB,EApFlB2H,EAAa,SAACtL,GAClBhS,EAASnC,GAAwBmU,KAG7BuL,EAAkB,yCAAG,uCAAA9b,EAAA,sEAGjB+b,EAAuBhG,OAAOC,KAAK0F,GAEnCM,EAAeD,EAAqBxnB,KAAI,SAACgI,GAAD,MAAuB,CACnEA,iBAAkBkc,OAAOwD,SAAS1f,GAClCsb,cAAeY,OAAOC,WAAWgD,EAAcnf,IAC/C4d,kBAAmB1B,OAAOwD,SAAS1mB,OARd,SAWjByjB,GAA0BgD,GAXT,cAajBjD,EAAa,CACjBjf,OAAQ,YACRud,cAfqB,SAmBjByB,GAAuBC,GAnBN,cAsBjBmD,EAAwB,CAC5B9O,MAAM,IAAD,OAAMnS,EAAN,WACLoT,SAAU,UACVnM,QAAQ,GAAD,OAAKmV,EAAL,6FAGH8E,EAAuB,CAC3B/O,MAAM,IAAD,OAAMnS,EAAN,UACLoT,SAAU,UACVnM,QAAQ,GAAD,OAAKmV,EAAL,6FA/Bc,UAkCjBpK,GAAgBiP,GAlCC,yBAoCjBjP,GAAgBkP,GApCC,QAsCvBN,EAAW,mBAtCY,kDAwCf3Z,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GAzCE,0DAAH,qDA8IlBka,EAAc,WAClB5a,GAAW,GACXe,YAAW,WACTqZ,EAAuBvE,KACtB,MAGL,OACE,eAAC,WAAD,UACE,eAACzO,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,CACE7H,MAAO,CACLgC,OAAQ,QAFZ,UAKE,gBAAC,GAAD,CACEqD,WAAYA,EACZrF,MAAO,CAAEqD,QAAS,SAAUgI,gBAAiB,QAASC,OAAQ,GAFhE,UAIE,yEACA,+BACE,eAACvG,GAAA,EAAD,CAAYC,QAAS,kBAAMrH,EAAShH,IAAoB,KAAxD,SACE,eAAC,KAAD,CAAgBuJ,KAAM,YAIZ,SAAftN,GAA6C,mBAApBwH,GACxB,uBACE4F,MAAO,CACL6B,QAAS,QAFb,UAKE,gBAAC,GAAD,CAAmB3B,KAAK,SAASrB,MAAM,UAAvC,UACE,eAACH,GAAA,EAAD,CAAQsG,QAAS,kBAAM+V,EAAY,WAAW,IAA9C,6CAGA,eAACrc,GAAA,EAAD,CAAQsG,QAAS,kBAAMiW,EAAW,iBAAlC,uCAIA,eAACvc,GAAA,EAAD,UACE,eAAC,WAAD,CAASrI,KAAMvB,EAAgBsH,QAASA,EAAxC,SACE,uBAAM4D,MAAO,CAAEnB,MAAO,WAAtB,2CAGJ,eAACH,GAAA,EAAD,CAAQsG,QAAS,WAlJY,yBAArClQ,EAAe,GAAGyiB,eAKmB,wBAArCziB,EAAe,GAAGyiB,eAKtBnW,EAAY,QAAS,yIAJnB2Z,EAAY,aAAa,GALzB3Z,EAAY,QAAS,0IAiJX,uCAGA,eAAC1C,GAAA,EAAD,CAAQsG,QAAS,WAtIY,yBAArClQ,EAAe,GAAGyiB,eAOmB,wBAArCziB,EAAe,GAAGyiB,eAKmB,uBAArCziB,EAAe,GAAGyiB,gBACpBnW,EAAY,QAAS,oIALrB2Z,EAAY,aAAa,GAPzB3Z,EACE,QACA,8JAmIQ,0CAEF,eAACuN,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UACTlV,MAAO,CACLuT,WAAY,UANhB,SASE,eAACxO,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS,kBAAMwW,KATjB,SAWE,eAAC,KAAD,WAKQ,SAAf5oB,GAA6C,mBAApBwH,GACxB,uBAAK4F,MAAO,CAAE6B,QAAS,QAAvB,UACE,eAAC,GAAD,CAAmB3B,KAAK,SAASrB,MAAM,UAAvC,SACE,eAACH,GAAA,EAAD,UACE,eAAC,WAAD,CAASrI,KAAMvB,EAAgBsH,QAASA,EAAxC,SACE,uBAAM4D,MAAO,CAAEnB,MAAO,WAAtB,6CAIN,eAAC8P,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UACTlV,MAAO,CACLuT,WAAY,UANhB,SASE,eAACxO,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS,kBAAMwW,KATjB,SAWE,eAAC,KAAD,WAMQ,iBAAf5oB,GACC,uBAAKoN,MAAO,CAAE6B,QAAS,OAAQC,eAAgB,iBAA/C,UACE,gBAAC,GAAD,CACElD,QAAQ,QACRD,MAAM,MACNqB,MAAO,CACL8M,SAAU,QAEZ9H,QAAS,kBAAMiW,EAAW,SAN5B,UAQE,eAAC,KAAD,CAAgB/a,KAAM,KARxB,gCAUA,gBAAC,GAAD,CACEtB,QAAQ,QACRD,MAAM,MACNqB,MAAO,CACL8M,SAAU,QAEZ9H,QAAS,kBAAMkW,KANjB,uCAQQ,eAAC,KAAD,CAAmBhb,KAAM,WAIrB,oBAAftN,GACC,sBAAKoN,MAAO,CAAE6B,QAAS,OAAQC,eAAgB,YAA/C,SACE,gBAAC,GAAD,CACElD,QAAQ,QACRD,MAAM,MACNqB,MAAO,CACL8M,SAAU,QAEZ9H,QAAS,kBAAMiW,EAAW,SAN5B,uCAQQ,eAAC,KAAD,CAAmB/a,KAAM,WAnNrBoT,EAwNA1gB,EAvNT,SAAT0gB,EAEA,gBAAC,WAAD,WACGvT,GACC,sBACEC,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZpD,MAAO,OACPqD,OAAQ,QANZ,SASE,eAAC,GAAD,OAGFjC,GAAajL,EAAemB,OAAS,GACrC,eAACqT,GAAA,EAAD,CAAgB5G,UAAW6I,KAAOvL,MAAO,CAAE2C,UAAW,QAAtD,SACE,gBAAC4G,GAAA,EAAD,CAAOvJ,MAAO,CAAE8M,SAAU,QAASgJ,UAAW,UAA9C,UACE,eAAC,GAAD,IACA,eAACpM,GAAA,EAAD,UACG5U,EAAenB,KAAI,SAAC0C,GAAD,OAClB,eAAC,WAAD,UACE,eAAC,GAAD,CAA2BA,KAAMA,KADpBA,EAAKI,+BAYvB,iBAAT6c,EAEA,eAAChK,GAAA,EAAD,CAAgB5G,UAAW6I,KAAOvL,MAAO,CAAE2C,UAAW,QAAtD,SACE,gBAAC4G,GAAA,EAAD,CAAOvJ,MAAO,CAAE8M,SAAU,QAASgJ,UAAW,UAA9C,UACE,eAAC,GAAD,IACA,eAACpM,GAAA,EAAD,UACG5U,EAAenB,KAAI,SAAC0C,GAAD,OAClB,eAAC,WAAD,UACE,eAAC,GAAD,CAAgCA,KAAMA,KADzBA,EAAKI,4BAUnB,oBAAT6c,EAEA,gBAACsH,GAAD,WACE,eAAC,KAAD,CAAY1a,KAAM,MAClB,iKAJN,GAqKM,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,YChVKub,GAxHK,WAClB,MAA8B9a,mBAAS,CACrC+a,OAAQ9B,OAAS+B,OACjBvnB,UAAWwlB,KAAOA,OAASgC,QAAQ,QAAQC,UAAU/B,OACnD,gCAEFgC,QAASlC,KAAOA,OAASmC,MAAM,QAAQF,UAAU/B,OAAO,kCAL1D,oBAAOkC,EAAP,KAAgBC,EAAhB,KAQA,EAAsCtb,mBAAS,CAC7C+a,OAAQ9B,OAAS+B,OACjBvnB,UAAWwlB,KAAOA,OAASgC,QAAQ,QAAQC,UAAU/B,OAAO,cAC5DgC,QAASlC,KAAOA,OAASmC,MAAM,QAAQF,UAAU/B,OAAO,gBAH1D,oBAAOoC,EAAP,KAAoBC,EAApB,KA4GA,MAAO,CAACH,EAASE,EAtGG7X,uBAAY,WAC9B4X,GAAW,SAACzX,GACV,IACQkX,EADSlX,EACTkX,OACR,MAAO,CACLA,OAAQA,EAAS,EACjBtnB,UAAWwlB,KACTA,OACG+B,KAAKD,EAAS,GACdE,QAAQ,QACRC,UACH/B,OAAO,gCACTgC,QAASlC,KACPA,OACG+B,KAAKD,EAAS,GACdK,MAAM,QACNF,UACH/B,OAAO,oCAIbqC,GAAe,SAAC3X,GACd,IACQkX,EADSlX,EACTkX,OACR,MAAO,CACLA,OAAQA,EAAS,EACjBtnB,UAAWwlB,KACTA,OACG+B,KAAKD,EAAS,GACdE,QAAQ,QACRC,UACH/B,OAAO,cACTgC,QAASlC,KACPA,OACG+B,KAAKD,EAAS,GACdK,MAAM,QACNF,UACH/B,OAAO,oBAGZ,IAEiBzV,uBAAY,WAC9B4X,GAAW,SAACzX,GACV,IACQkX,EADSlX,EACTkX,OACR,MAAO,CACLA,OAAQA,EAAS,EACjBtnB,UAAWwlB,KACTA,OACG+B,KAAKD,EAAS,GACdE,QAAQ,QACRC,UACH/B,OAAO,gCACTgC,QAASlC,KACPA,OACG+B,KAAKD,EAAS,GACdK,MAAM,QACNF,UACH/B,OAAO,oCAIbqC,GAAe,SAAC3X,GACd,IACQkX,EADSlX,EACTkX,OACR,MAAO,CACLA,OAAQA,EAAS,EACjBtnB,UAAWwlB,KACTA,OACG+B,KAAKD,EAAS,GACdE,QAAQ,QACRC,UACH/B,OAAO,cACTgC,QAASlC,KACPA,OACG+B,KAAKD,EAAS,GACdK,MAAM,QACNF,UACH/B,OAAO,oBAGZ,IAEWzV,uBAAY,WACxB4X,EAAW,CACTP,OAAQ9B,OAAS+B,OACjBvnB,UAAWwlB,KAAOA,OAASgC,QAAQ,QAAQC,UAAU/B,OACnD,gCAEFgC,QAASlC,KAAOA,OAASmC,MAAM,QAAQF,UAAU/B,OAC/C,kCAIJqC,EAAe,CACbT,OAAQ9B,OAAS+B,OACjBvnB,UAAWwlB,KAAOA,OAASgC,QAAQ,QAAQC,UAAU/B,OAAO,cAC5DgC,QAASlC,KAAOA,OAASmC,MAAM,QAAQF,UAAU/B,OAAO,kBAEzD,MC7FCrN,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZD,eAAgB,UAElB8K,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QA+YlBgU,GA3Ye,WAC5B,IAAMhP,EAAUX,KAEV9O,EAAWsD,cACToE,EAAeF,KAAfE,WACR,EAAgC1E,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KACA,EAAoCD,mBAAS,UAA7C,oBAAO/N,EAAP,KAAmBypB,EAAnB,KACA,EAAsC1b,mBAAS,IAA/C,oBAAO+T,EAAP,KAAoBC,EAApB,KACA,EAAkDhU,mBAAS,IAA3D,oBAAO2b,EAAP,KAA0BC,EAA1B,KACA,EAAsD5b,mBAAS,IAA/D,oBAAOiU,EAAP,KAA4BC,EAA5B,KACA,EAAkClU,mBAAS,IAA3C,oBAAO8G,EAAP,KAAkBpB,EAAlB,KACQhM,EAAiByG,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAArDI,aACFuN,EAAW9G,aAAY,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWE,YAAY0D,UAE/DkY,EAAc,WAClBtT,EACElC,GAAmB,CACjB/I,KAAM,SACNwG,QAAQ,KAGZ0H,GAAW,GACXyb,EAAc,UACd1H,EAAe,IACfE,EAAuB,IACvBxO,EAAa,KAGPnF,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIEqU,EAAgB,CACpBrE,KAAM,CAAEuB,MAAO,GACfuB,MAAO,CAAEvB,MAAO,KAChBqC,QAAS,CAAErC,MAAO,MAvCc,SA6CnBkC,EA7CmB,gFA6ClC,WAA+Bza,GAA/B,oBAAA+E,EAAA,+EAEyBuU,GAAgBtZ,GAFzC,OAEUiF,EAFV,OAGUkC,EAAYlC,EAAOjJ,KAAKA,KAAK1C,KAAI,SAAC0C,EAAMoL,GAC5C,IAAQjN,EAAkB6B,EAAlB7B,cACR,OAAO,yBACLZ,GAAI6N,EAAQ,GACTpL,GAFL,IAGE7B,cAAiC,SAAlBA,EAA2B,eAAO,oBAGrDmgB,EAAenT,GACfqT,EAAuB,IACvBjU,GAAW,GAbf,kDAeYU,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GACrBV,GAAW,GAjBf,2DA7CkC,oEAkElC,WAAqCsC,GAArC,oBAAA9D,EAAA,+EAEyBkI,GAAwBpE,GAFjD,OAEU5D,EAFV,OAGUkC,EAAYlC,EAAO3L,KAAI,SAAC0C,EAAMoL,GAClC,IAAQjN,EAAkB6B,EAAlB7B,cACR,OAAO,yBACLZ,GAAI6N,EAAQ,GACTpL,GAFL,IAGE7B,cAAiC,SAAlBA,EAA2B,eAAO,oBAGrDmgB,EAAenT,GACfqT,EAAuB,IACvBjU,GAAW,GAbf,0DAiBoBwE,KADR9D,EAAY,KAAMI,SAASrL,KAA3BiL,SAhBZ,wBAkBMF,EAAY,QAAS,gHACrBR,GAAW,GAnBjB,2BAsBIQ,EAAY,QAASE,GACrBV,GAAW,GAvBf,2DAlEkC,oEA6FlC,WAA4CtM,GAA5C,oBAAA8K,EAAA,+EAEyBmI,GAAkCjT,GAF3D,QAEUgL,EAFV,QAGerJ,OAAS,IAClBsmB,EAAqBjd,GACb/K,EAAgB+K,EAAO,GAAvB/K,YACR6M,EACE,UADS,UAEN7M,EAFM,wDAEkB+K,EAAOrJ,OAFzB,uDAIXomB,EAAc,WAIhBzb,GAAW,GAdf,wDAiBoBwE,KADR9D,EAAY,KAAMI,SAASrL,KAA3BiL,SAhBZ,wBAkBMF,EAAY,QAAS,gHACrBR,GAAW,GAnBjB,2BAsBIQ,EAAY,QAASE,GACrBV,GAAW,GAvBf,0DA7FkC,sBAuHlCW,qBAAU,WACJqG,IACFhH,GAAW,GAEXe,YAAW,WACTmT,EAAgBza,KACf,QAGJ,CAACuN,IAEJrG,qBAAU,WACR,GAAkB,KAAdkG,EAAJ,CAIA,IAAMvE,EAAc,CAClB7I,eACA9F,YAAakT,GAEf7G,GAAW,GACXe,YAAW,YA5IqB,oCA6I9BoT,CAAsB7R,KACrB,KAEHvJ,QAAQC,IAAI6N,MAEX,CAACA,IAEJ,IAiCwB6L,EAjClBhT,EAAU,CACd,CAAEC,MAAO,cAAeC,WAAY,eAAM7B,MAAO,KACjD,CAAE4B,MAAO,eAAgBC,WAAY,2BAAQ7B,MAAO,KACpD,CAAE4B,MAAO,gBAAiBC,WAAY,eAAM7B,MAAO,KACnD,CAAE4B,MAAO,aAAcC,WAAY,qBAAO7B,MAAO,KACjD,CAAE4B,MAAO,aAAcC,WAAY,yCAAY7B,MAAO,KACtD,CAAE4B,MAAO,eAAgBC,WAAY,iBAAQ7B,MAAO,KACpD,CAAE4B,MAAO,eAAgBC,WAAY,iBAAQ7B,MAAO,KACpD,CAAE4B,MAAO,gBAAiBC,WAAY,2BAAQ7B,MAAO,MAGjD6c,EAAc,WAClB5a,GAAW,GACXyb,EAAc,UACd1a,YAAW,WACTmT,EAAgBza,KACf,MAGCmiB,EAAqB,SAAC5Y,GAC1B,IAAQvB,EAAQuB,EAARvB,IACRwS,EAAuBxS,IAGnBoa,EAAgC,WACpC7b,GAAW,GAEX,IAAQtM,EAAcsgB,EAAdtgB,UACRqN,YAAW,YAhLqB,oCAiL9B+a,CAA6BpoB,KAC5B,MAqLL,OACE,eAAC,WAAD,UACE,eAACoZ,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMF,EACNO,QAAS8I,EACTtD,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CAAEhD,QAAS,KAN5B,SAQE,eAAC,GAAD,CAAYD,GAAIjD,EAAhB,SACE,sBACE9C,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,gBAAC,GAAD,CAAc1B,WAAYA,EAA1B,UACE,gBAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,UACkB,WAAfzN,GAA2B,4BACZ,WAAfA,GAA2B,4EAE9B,+BACE,eAACmS,GAAA,EAAD,CAAYC,QAASiM,EAArB,SACE,eAAC,KAAD,CAAgB/Q,KAAM,aAzMhBoT,EA6MI1gB,EA5Mb,WAAT0gB,EAEA,uCACGvT,GACC,sBACEC,MAAO,CACLrB,MAAO,OACPqD,OAAQ,OACR6K,UAAW,QACXhL,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,eAAC,GAAD,OAGFhC,GACA,gBAACoD,GAAA,EAAD,CAAMC,WAAS,EAAC4R,QAAQ,SAAxB,UACE,eAAC7R,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,uBACEvD,MAAO,CACL6B,QAAS,QAFb,UAKE,sBACE7B,MAAO,CACL+G,KAAM,GAFV,SAKE,eAAC,GAAD,CACEV,aAAcA,EACdC,YAAY,wEACZC,UAAQ,MAIZ,eAACoI,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UACTlV,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,UARhB,SAWE,eAACgD,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS,kBAAMwW,KATjB,SAWE,eAAC,KAAD,aAKR,gBAACrY,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIvD,MAAO,CAAE2C,UAAW,OAAvC,UACE,sBAAK3C,MAAO,CAAEgC,OAAQ,IAAKrD,MAAO,QAAlC,SACE,eAAC,KAAD,CACEsD,KAAMyS,EACNpU,QAASA,EACT6B,YAAaqa,EACbta,SAAU,OAGbiT,OAAOC,KAAKR,GAAqB3e,OAAS,GACzC,sBAAK+J,MAAO,CAAE2C,UAAW,QAAzB,SACE,eAACjE,GAAA,EAAD,CACE2C,QAAQ,WACRxC,MAAM,UACNmG,QAAS,kBAAMyX,KAHjB,4CAgBH,WAATnJ,EAEA,sCACIvT,GACA,gBAACoD,GAAA,EAAD,CAAMC,WAAS,EAAC4R,QAAQ,SAAxB,UACE,gBAAC7R,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,GACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZ2I,WAAY,SACZkL,UAAW,8BAPf,UAUE,eAACjH,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UACTlV,MAAO,CACL6B,QAAS,OAETE,WAAY,UARhB,SAWE,eAACgD,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS,kBAAMwW,KATjB,SAWE,eAAC,KAAD,QAGJ,eAAC,GAAD,CACEna,QAAQ,YACRqB,UAAU,OACVrC,OAAQ,EACRL,MAAO,CACLuT,WAAY,UALhB,+DAUA,2BAGF,eAACpQ,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,GACJvD,MAAO,CACL2C,UAAW,QACXiT,UAAW,8BALf,SAQE,eAACtM,GAAA,EAAD,CACE5G,UAAW6I,KACXvL,MAAO,CACL2C,UAAW,UAHf,SAME,gBAAC4G,GAAA,EAAD,CAAOvJ,MAAO,CAAE8M,SAAU,QAASgJ,UAAW,UAA9C,UACE,eAAC,GAAD,IACA,eAACpM,GAAA,EAAD,UACG4S,EAAkB3oB,KAAI,SAAC0C,GAAD,OACrB,eAAC,WAAD,UACE,eAAC,GAAD,CAAoBA,KAAMA,KADbA,EAAKogB,kCAvExC,eCjBWkG,GA9QQ,WACrB,IAAMhf,EAAWsD,cAGjB,EAAgCN,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KACA,EAAgE6a,KAAhE,oBAAOO,EAAP,KAAgBE,EAAhB,KAA6BU,EAA7B,KAA0CC,EAA1C,KAAuDte,EAAvD,KAGA,EAA4CoC,mBAAS,IAArD,oBAAO7L,EAAP,KAAuB+lB,EAAvB,KAGQxgB,EAAiByG,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAArDI,aAGFiB,EAAoBwF,aACxB,SAAC5N,GAAD,OAAWA,EAAMiC,WAAWmG,qBAEtB4F,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIEqU,EAAgB,CACpBrE,KAAM,CAAEuB,MAAO,GACfuB,MAAO,CAAEvB,MAAO,KAChBqC,QAAS,CAAErC,MAAO,MA5BO,8CAoC3B,WAAkCtF,GAAlC,kBAAAlO,EAAA,+EAEyB4Y,GAA2C1K,GAFpE,OAEUhO,EAFV,OAGIub,EAAkBvb,GAClBsB,GAAW,GAJf,gDAMIia,EAAkB,IACVvZ,EAAY,KAAMI,SAASrL,KAA3BiL,QACRV,GAAW,GACXQ,EAAY,QAASE,GATzB,0DApC2B,sBAoE3B,OAfAC,qBAAU,WACRX,GAAW,GAEX,IACM0M,EAAW,CACflZ,UAF6B8nB,EAAvB9nB,UAGN0nB,QAH6BI,EAAZJ,QAIjBzhB,gBAEFsH,YAAW,YA9Dc,oCA+DvBmb,CAAmBxP,KAClB,OAEF,CAAC4O,IAGF,iCACE,yBACElc,MAAO,CACL+S,SAAU,SACVC,IAAK,EACL3H,gBAAiB,QACjBC,OAAQ,GALZ,SAQE,eAAC,GAAD,MAEF,gCACE,eAACnI,GAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,gBAAC,GAAD,WACE,oDACA,8EAEF,uBACEuB,UAAU,YACV9E,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZ6T,UAAW,6BACXC,aAAc,6BACdnL,WAAY,SACZD,cAAe,UARnB,UAWE,eAACkE,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UAJX,SAME,eAACnQ,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS,WACPrH,EACElC,GAAmB,CACjB/I,KAAM,SACNwG,QAAQ,MAbhB,SAkBE,eAAC,KAAD,QAGJ,eAACyV,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UAJX,SAME,eAACnQ,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAASzG,EATX,SAWE,eAAC,KAAD,QAGJ,eAACoQ,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UAJX,SAME,eAACnQ,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS4X,EATX,SAWE,eAAC,KAAD,QAIJ,gBAACjO,GAAA,EAAO3P,IAAR,CACEgP,SAAU0H,EACVzH,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UAJX,UAMG,IACD,eAACnQ,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS6X,EATX,SAWE,eAAC,KAAD,SAIJ,kCACGb,EAAQ5nB,UADX,MACyB4nB,EAAQF,cAGlC/b,GACC,sBACEC,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZpD,MAAO,QACPqD,OAAQ,QANZ,SASE,eAAC,GAAD,OAIFjC,GAAajL,EAAemB,OAAS,GACrC,eAACqT,GAAA,EAAD,CACE5G,UAAW6I,KACXvL,MAAO,CACL2C,UAAW,UAHf,SAME,gBAAC4G,GAAA,EAAD,CAAOvJ,MAAO,CAAE8M,SAAU,QAASgJ,UAAW,UAA9C,UACE,eAAC,GAAD,IACA,eAACpM,GAAA,EAAD,UACG5U,EAAenB,KAAI,SAAC0C,GAAD,OAClB,eAAC,WAAD,UACE,eAAC,GAAD,CAAoBA,KAAMA,KADbA,EAAKogB,uBAS5B1W,GAAuC,IAA1BjL,EAAemB,QAC5B,uBACE+J,MAAO,CACL6B,QAAS,OACTS,cAAe,SACfR,eAAgB,SAChBC,WAAY,SACZpD,MAAO,OACPqD,OAAQ,QAPZ,UAUE,sBAAKhC,MAAO,CAAErB,MAAO,OAAQ4D,SAAU,SAAvC,SACE,sBACEC,IAAI,0BACJC,IAAI,YACJ9D,MAAM,WAGV,eAAC,GAAD,CACE0C,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CACL2C,UAAW,QALf,0KAYmB,IAAtBrH,GAA2B,eAAC,GAAD,IAE5B,eAAC,GAAD,mB,yCC7RHyhB,GAAc,yCAAG,WAAO1iB,GAAP,UAAA+E,EAAA,sEACflD,KAAMwD,IAAI,WAAY,CACjCC,OAAQ,CACNtF,kBAHwB,mFAAH,sDAmBd2iB,GAAqB,yCAAG,WAAOC,GAAP,gBAAA7d,EAAA,sEACdlD,KAAMwD,IAAI,mBAAoB,CACjDC,OAAQ,CACNsd,cAH+B,cAC7B3d,EAD6B,yBAM5BA,EAAOjJ,KAAKA,MANgB,2CAAH,sDAoBrB6mB,GAAa,yCAAG,WAAOD,GAAP,gBAAA7d,EAAA,sEACNlD,KAAMwD,IAAI,iBAAkB,CAC/CC,OAAQ,CACNsd,cAHuB,cACrB3d,EADqB,yBAMpBA,EAAOjJ,KAAKA,MANQ,2CAAH,sDAoDb8mB,GAAY,yCAAG,WAAOC,GAAP,UAAAhe,EAAA,sEACblD,KAAMmD,KAAK,UAAW+d,GADT,mFAAH,sDAkBZC,GAAU,yCAAG,WAAOC,GAAP,UAAAle,EAAA,sEACXlD,KAAMmD,KAAK,kBAAmBie,GADnB,mFAAH,sDAgBVC,GAAc,yCAAG,WAAOC,GAAP,gBAAApe,EAAA,sEACPlD,KAAMmD,KAAK,iBAAkBme,GADtB,cACtBle,EADsB,yBAErBA,EAAOjJ,MAFc,2CAAH,sDAmBdonB,GAAY,yCAAG,WAAOL,GAAP,UAAAhe,EAAA,sEACblD,KAAMsD,IAAI,UAAW4d,GADR,mFAAH,sDA+BZM,GAAY,yCAAG,WAAOT,GAAP,UAAA7d,EAAA,sEACblD,KAAMyhB,OAAO,UAAW,CACnChe,OAAQ,CACNsd,cAHsB,mFAAH,sDAgBZW,GAAa,yCAAG,WAAOC,GAAP,UAAAze,EAAA,sEACdlD,KAAMyhB,OAAO,kBAAmB,CAC3Che,OAAQ,CACNke,qBAHuB,mFAAH,sDAgBbC,GAAc,yCAAG,WAAOb,GAAP,UAAA7d,EAAA,sEACflD,KAAMyhB,OAAO,mBAAoB,CAC5Che,OAAQ,CACNsd,cAHwB,mFAAH,sDChNdc,GAAa,yCAAG,WAAO/R,EAAME,GAAb,UAAA9M,EAAA,sEACdlD,KAAMwD,IACjB,8CACA,CACEC,OAAQ,CACNqM,OACAE,QANqB,mFAAH,wDCDb8R,GAA0B,yCAAG,WAAO3jB,GAAP,UAAA+E,EAAA,sEAC3BlD,KAAMwD,IAAI,qBAAsB,CAC3CC,OAAQ,CACNtF,kBAHoC,mFAAH,sDAoB1B4jB,GAAsB,yCAAG,WAAOtpB,GAAP,UAAAyK,EAAA,sEACvBlD,KAAMwD,IAAI,mBAAoB,CACzCC,OAAQ,CACNhL,cAHgC,mFAAH,sDAqBtBupB,GAAU,yCAAG,WAAOC,GAAP,UAAA/e,EAAA,sEACXlD,KAAMmD,KAAK,QAAS8e,GADT,mFAAH,sDAYVC,GAAU,yCAAG,WAAOC,GAAP,UAAAjf,EAAA,sEACXlD,KAAMyhB,OAAO,SAAU,CAClChe,OAAQ,CACN0e,YAHoB,mFAAH,sDAgBVC,GAAe,yCAAG,WAAOD,GAAP,UAAAjf,EAAA,sEAChBlD,KAAMsD,IAAI,kBAAoB6e,GADd,mFAAH,sDAYfE,GAAgB,yCAAG,WAAOF,GAAP,UAAAjf,EAAA,sEACjBlD,KAAMsD,IAAI,mBAAqB6e,GADd,mFAAH,sDCtEhBG,GAAe,yCAAG,WAAOnkB,GAAP,UAAA+E,EAAA,sEAChBlD,KAAMwD,IAAN,oBAAuBrF,IADP,mFAAH,sD,6BCjBtBokB,GAAkBhgB,KAAOO,IAAV,kSA0Bf0f,GAAa,SAAC,GAAc,IAAZroB,EAAW,EAAXA,KAEZsoB,EAA0CtoB,EAA1CsoB,YAAaC,EAA6BvoB,EAA7BuoB,WAAYC,EAAiBxoB,EAAjBwoB,aACjC,OACE,eAACC,GAAA,EAAD,UACE,gBAACL,GAAD,WACE,eAAC,GAAD,CACEpd,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRyE,UAAU,QAJZ,SAMG6Z,IAEH,eAACpW,GAAA,EAAD,CAASzD,UAAU,YACnB,uBAAKA,UAAU,cAAf,UACE,eAAC,GAAD,CAAkBzD,QAAQ,YAAYqB,UAAU,OAAOrC,OAAQ,EAA/D,kCAIA,eAAC,GAAD,CACEgB,QAAQ,YACRqB,UAAU,OACVrC,OAAQ,EACRyE,UAAU,cAJZ,SAMG8U,KAAOgF,GAAY9E,OAAO,cAE7B,eAAC,GAAD,CACEzY,QAAQ,YACRqB,UAAU,OACVrC,OAAQ,EACRyE,UAAU,cAJZ,eAQA,eAAC,GAAD,CACEzD,QAAQ,YACRqB,UAAU,OACVrC,OAAQ,EACRyE,UAAU,cAJZ,kCASA,eAAC,GAAD,CACEzD,QAAQ,YACRqB,UAAU,OACVrC,OAAQ,EACRyE,UAAU,cAJZ,SAMG+Z,aAQE5Z,OAAMC,KAAKwZ,IC1FpBK,GAAkBtgB,aAAOsH,KAAPtH,CAAH,8JAEC,qBAAGG,WAEZ,YACT,OAD0B,EAAdyE,QACK,SAQrB0b,GAAgBjgB,aAAe,CAC7BF,QAAS,QACTyE,QAAS,KAGI0b,I,oCAAAA,M,6CCrBFC,GAAW,SAACC,GAAD,OACtB,IAAIC,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,GACrBI,EAAOG,OAAS,kBAAML,EAAQE,EAAO/f,SACrC+f,EAAOI,QAAU,SAACC,GAAD,OAAWN,EAAOM,QC6LxBC,GA3KW,WAExB,MAAsChf,qBAAtC,oBAAOge,EAAP,KAAoBiB,EAApB,KAEA,EAA8Bjf,mBAAS,IAAvC,oBAAOkf,EAAP,KAAgBC,EAAhB,KACMC,EAAYnH,iBAAO,MACjB1X,EAAoBC,cAApBD,gBACFvD,EAAWsD,cAEX5G,EAAeyG,aACnB,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUI,gBAE9B1F,EAAWmM,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUtF,YACzDwF,EAAa2G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUE,cAC3DiH,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAQE2e,EAAS,yCAAG,WAAO5d,GAAP,sBAAAhD,EAAA,kEAGQ,MADhB6gB,EAAgBF,EAAU1G,QAAQ6G,cAAcC,YACV,KAAhBxB,EAHd,uBAIZvd,EAAY,QAAS,sFAJT,6BAUK,KAFA6e,EAAc5N,QAAQ,iBAAkB,IAR7C,uBAWZjR,EAAY,QAAS,kEAXT,iCAcVgf,EAAkB,GAChBC,EAAiBJ,EACpB5N,QAAQ,iBAAkB,IAC1BiO,UAAU,EAAG,IAEZT,EAAQ5pB,OAAS,IACnBmqB,EAAkBP,EAAQ,IAEL,IAAnBA,EAAQ5pB,SACVmqB,EAAkB,IAEd9S,EAAW,CACfqR,YAAaA,EACbC,YAAY,IAAI/E,MAAO0G,SAASlR,MAAM,KAAK,GAC3CmR,cAAeP,EACfpB,aAAc1kB,EACdE,eACA1F,WACA0rB,iBACAD,mBAjCY,UAoCRjD,GAAa7P,GApCL,QAsCd3P,EAASzG,EAAc,YAtCT,kDAwCdyC,QAAQC,IAAR,MAxCc,0DAAH,sDA4Cf,OACE,gBAAC,WAAD,WACE,uBAAKoG,MAAO,CAAE2C,UAAW,OAAQd,QAAS,QAA1C,UACE,sBAAK7B,MAAO,CAAE+G,KAAM,GAAK0Z,UAAW,UAApC,SACE,qBAAIzgB,MAAO,CAAE0gB,WAAY,OAAzB,4BAEF,sBAAK1gB,MAAO,CAAE+G,KAAM,GAApB,SACE,eAAC,GAAD,CACEnL,MAAO+iB,EACPlY,SAzDW,SAACrE,GACpBwd,EAAexd,EAAMyB,OAAOjI,QAyDpB0K,YAAY,kEAIlB,sBAAKtG,MAAO,CAAE2C,UAAW,QAAzB,SACE,eAAC,UAAD,CACEge,aAAa,WACb3e,OAAO,QACP4e,gBAAgB,UAChBta,YAAY,2DACZua,SAAS,QACTC,MAAO,CACLC,iBAAiB,WAAD,8BAAE,WAAOC,EAAMC,GAAb,4BAAA7hB,EAAA,sEAEV8hB,EAAM,OAEQ,eAAdF,EAAKvgB,KACPygB,EAAM,OACiB,cAAdF,EAAKvgB,KACdygB,EAAM,OACiB,cAAdF,EAAKvgB,KACdygB,EAAM,OACiB,eAAdF,EAAKvgB,OACdygB,EAAM,SAGFC,EAAYC,eAASF,EAdb,SAgBclC,GAASgC,GAhBvB,cAgBRK,EAhBQ,OAkBR/T,EAAW,CACfjT,eACA8mB,YACAE,iBArBY,UAwBU9D,GAAejQ,GAxBzB,eAwBRgU,EAxBQ,OA0BRC,EA1BQ,UA0BShlB,gCA1BT,uBA0ByD+kB,GACvE3nB,QAAQC,IAAI2nB,GAEZzB,GAAW,SAACtb,GACV,IAAM7O,EAAW6O,EAEjB,OADA7O,EAASO,KAAKqrB,GACP5rB,KAGTsrB,EAASM,EAAa,eAnCR,mBAoCP,GApCO,8CAsCcnc,IAAxB,KAAM1D,SAASrL,OACTiL,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,IAEvBF,EAAY,QAAD,MA1CG,mBA2CP,GA3CO,0DAAF,qDAAC,IA+CnBsK,IAAKqU,MAGT,uBACE/f,MAAO,CACL2C,UAAW,OACXd,QAAS,QAHb,UAME,sBAAK7B,MAAO,CAAE+G,KAAM,IAAK2M,YAAa,QAAtC,SACE,gBAAC,GAAD,CACE9U,QAAQ,kBACRC,MAAM,QACNmG,QAASgb,EAHX,UAKE,eAAC,KAAD,CAAgBhgB,MAAO,CAAE0T,YAAa,SALxC,uCASF,sBAAK1T,MAAO,CAAE+G,KAAM,KAApB,SACE,gBAAC,GAAD,CACEnI,QAAQ,gBACRC,MAAM,QACNmG,QAAS,kBAAMrH,EAASzG,EAAc,UAHxC,UAKE,eAAC,KAAD,CAAU8I,MAAO,CAAE0T,YAAa,SALlC,oBASF,sBAAK1T,MAAO,CAAE+G,KAAM,cC9Hbya,GApDa,WAC1B,IAAM7jB,EAAWsD,cAEX3L,EAAawL,aAAY,SAAC5N,GAAD,OAAWA,EAAM8J,OAAO1H,cAEvD,OACE,gBAAC,WAAD,WACE,sBAAK0K,MAAO,CAAE2C,UAAW,OAAQd,QAAS,UAC1C,sBACEiD,UAAU,aACV9E,MAAO,CAAE+G,KAAM,EAAGlF,QAAS,OAAQC,eAAgB,UAFrD,SAIE,sBAAKU,IAAI,qCAAqCC,IAAI,OAAO9D,MAAM,UAEjD,YAAfrJ,GACC,sBAAK0K,MAAO,CAAE6B,QAAS,OAAQC,eAAgB,UAA/C,SACE,qBAAI9B,MAAO,CAAE0gB,WAAY,OAAzB,kGAGY,kBAAfprB,GACC,sBAAK0K,MAAO,CAAE6B,QAAS,OAAQC,eAAgB,UAA/C,SACE,qBAAI9B,MAAO,CAAE0gB,WAAY,OAAzB,kGAGY,WAAfprB,GACC,sBAAK0K,MAAO,CAAE6B,QAAS,OAAQC,eAAgB,UAA/C,SACE,qBAAI9B,MAAO,CAAE0gB,WAAY,OAAzB,kGAIJ,uBACE1gB,MAAO,CACL2C,UAAW,OACXd,QAAS,QAHb,UAME,sBAAK7B,MAAO,CAAE+G,KAAM,OAEpB,sBAAK/G,MAAO,CAAE+G,KAAM,KAApB,SACE,eAAC,GAAD,CACEnI,QAAQ,gBACRC,MAAM,QACNmG,QAAS,kBAAMrH,EAASzG,EAAc,UAHxC,qDAQF,sBAAK8I,MAAO,CAAE+G,KAAM,cChDtB0a,GAAmBhjB,KAAOO,IAAV,2wBAwCPiG,OAAMC,KAAKuc,ICiJXC,GA3KU,WAEvB,MAAkC/gB,mBAAS,IAA3C,oBAAO8G,EAAP,KAAkBpB,EAAlB,KAEA,EAAwBpB,IAAMtE,SAAS,GAAvC,oBAAOgP,EAAP,KAAagS,EAAb,KACA,EAAsC1c,IAAMtE,SAAS,GAArD,oBAAO4U,EAAP,KAAoBqM,EAApB,KAEA,EAA4B3c,IAAMtE,SAAS,IAA3C,oBAAO3D,EAAP,KAAe6kB,EAAf,KAEMxnB,EAAeyG,aACnB,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUI,gBAE9BsD,EAAWsD,cAWjBM,qBAAU,WACR5H,QAAQC,IAAI6N,KACX,CAACA,IAEJlG,qBAAU,YACE,yCAAG,6BAAAnC,EAAA,+EAEc2d,GAAe1iB,GAF7B,OAEHqH,EAFG,OAGTmgB,EAAUngB,EAASrL,KAAKA,MAHf,gDAKTsD,QAAQC,IAAR,MALS,yDAAH,qDAQVkoB,KACC,IAEH,IAcMC,EAAY/kB,EAAOjJ,QAAO,SAACsC,GAAD,OAC9BA,EAAKsoB,YAAYqD,SAASva,MAO5B,OACE,gBAAC,WAAD,WACE,uBAAKzH,MAAO,CAAE2C,UAAW,OAAQd,QAAS,QAA1C,UACE,sBAAK7B,MAAO,CAAE+G,KAAM,EAAG0Z,UAAW,SAAU/M,YAAa,QAAzD,SACE,gBAAC,GAAD,CACE9U,QAAQ,kBACRC,MAAM,QACNF,MAAM,OACNqG,QAAS,kBAAMrH,EAASzG,EAAc,WAJxC,UAME,eAAC,KAAD,CAAgB8I,MAAO,CAAE0T,YAAa,SANxC,0BAUF,sBAAK1T,MAAO,CAAE+G,KAAM,GAApB,SACE,eAAC,GAAD,CACEN,SA3DW,SAAC7C,GACpByC,EAAazC,EAAEC,OAAOjI,OACtBjC,QAAQC,IAAIgK,EAAEC,OAAOjI,QA0DbyK,aAAcA,EACdC,YAAY,+DAGhB,sBACExB,UAAU,YACV9E,MAAO,CACL6B,QAAS,OACTE,WAAY,SAEZ2I,WAAY,SACZD,cAAe,UAPnB,SAUE,eAACkE,GAAA,EAAO3P,IAAR,CACEgP,SAhFY,CACpBqD,KAAM,CAAEuB,MAAO,GACfuB,MAAO,CAAEvB,MAAO,KAChBqC,QAAS,CAAErC,MAAO,MA8EV3E,QAAQ,OACR0E,WAAW,QACXuC,SAAS,UAJX,SAME,eAACnQ,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACbrQ,QAAS,UAEX2B,QAAS,WAjDnBqB,EAAa,KAwCL,SAWE,eAAC,KAAD,aAKR,eAAC,GAAD,UACG0b,EACEhM,MAAMpG,EAAO4F,EAAa5F,EAAO4F,EAAcA,GAC/C5hB,KAAI,SAAC0C,GAAD,OACH,eAAC,WAAD,UACE,uBACE2J,MAAO,CACL6B,QAAS,OACTc,UAAW,OACXsf,OAAQ,WAEVjd,QAAS,YAlFH,SAAC3O,GACnBsH,EAASzF,EAAsB7B,EAAK4mB,WACpCtf,EAASzG,EAAc,SAiFTgrB,CAAY7rB,IAPhB,UAUE,uBAAKyO,UAAU,YAAY9E,MAAO,CAAE+G,KAAM,GAA1C,UACE,sBAAKjC,UAAU,mBAAf,SACE,qBAAI9E,MAAO,CAAEuT,WAAY,OAAzB,SAAmCld,EAAKwoB,iBAE1C,sBAAK/Z,UAAU,sBAAf,SACE,sBAAyBqd,MAAM,OAA/B,SACG9rB,EAAKsoB,aADEtoB,EAAK4mB,YAIjB,sBAAKnY,UAAU,wBAAf,SACE,sBAAKqd,MAAM,OAAX,SAAmB9rB,EAAKgqB,mBAE1B,sBAAKvb,UAAU,qBAAf,SACE,sBAAKqd,MAAM,OAAX,SACGvI,KAAOvjB,EAAKuoB,YAAY9E,OAAO,mBAIrCzjB,EAAK+pB,gBACJ,sBAAKtb,UAAU,aAAa9E,MAAO,CAAE+G,KAAM,GAA3C,SACE,sBAAKvE,IAAKnM,EAAK+pB,gBAAiB3d,IAAI,OAAO9D,MAAM,MAAM4D,SAAS,QAAQqV,UAAU,WAGpF,sBAAK9S,UAAU,aAAa9E,MAAO,CAAE+G,KAAM,SAlClC1Q,EAAK4mB,eAwC1B,eAACjH,GAAA,EAAD,CACEoM,mBAAoB,CAAC,EAAG,GAAI,IAC5B1f,UAAU,MACVvM,MAAO4rB,EAAU9rB,OACjBsf,YAAaA,EACb5F,KAAMA,EACN0S,aA7HmB,SAACjgB,EAAOkgB,GAC/BX,EAAQW,IA6HJC,oBArH0B,SAACngB,GAC/Bwf,EAAexf,EAAMyB,OAAOjI,OAC5B+lB,EAAQ,U,8BC7DNlV,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZygB,aAAc,UAEhB5V,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QAsIlBqa,GA3HY,SAAC,GAKrB,IAJLC,EAII,EAJJA,mBACAC,EAGI,EAHJA,oBACA9E,EAEI,EAFJA,gBACA+E,EACI,EADJA,WAEMxV,EAAUX,KACRpH,EAAeF,KAAfE,WAGAnE,EAAoBC,cAApBD,gBAQF+P,EAAc,WAClB0R,GAAoB,IAKhBE,EAAmB,yCAAG,WAAOzgB,GAAP,UAAAhD,EAAA,sEAExBzF,QAAQC,IAAIikB,GAFY,SAGlBD,GAAcC,GAHI,OAZ1B3c,EAgByB,iEAhBA,CACvBG,QAeY,YAEZuhB,GAAW,GANa,gDAQxBjpB,QAAQC,IAAR,MARwB,yDAAH,sDAYzB,OACE,eAAC,WAAD,UACE,eAAC8T,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAM4a,EACNva,QAAS8I,EACTtD,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbhD,QAAS,KAEX9K,MAAO,CACL8B,eAAgB,UAVpB,SAaE,eAAC,GAAD,CAAY+I,GAAI6X,EAAhB,SACE,sBACE5d,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,eAAC,GAAD,CAAc1B,WAAYA,EAA1B,SACE,+BACE,eAACN,GAAA,EAAD,UACE,eAAC,KAAD,CAAgB7E,KAAM,GAAIiI,QAAS8I,UAIzC,+BACE,sBACEjR,MAAO,CACL8iB,UAAW,UAFf,UAKE,eAAC,GAAD,CACE9iB,MAAO,CACL0gB,WAAY,MACZqC,SAAU,WAHd,4EAQA,sBACE/iB,MAAO,CACLqI,OAAQ,YACR2a,YAAa,mBAEfxgB,IAAI,6BACJC,IAAI,OACJ9D,MAAM,aAIZ,uBACEqB,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBa,UAAW,QAJf,UAOE,gBAAC,GAAD,CACE/D,QAAQ,gBACRC,MAAM,QACNF,MAAM,QACNqG,QAAS6d,EAJX,UAME,eAAC,KAAD,CAAsB7iB,MAAO,CAAE0T,YAAa,SAN9C,kBASA,gBAAC,GAAD,CACE9U,QAAQ,iBACRC,MAAM,QACNF,MAAM,QACNwJ,QAAS8I,EAJX,UAME,eAAC,KAAD,CAAiBjR,MAAO,CAAE0T,YAAa,SANzC,iC,qBC5IV9T,GAAWC,aAAH,+FAYCojB,GANK,SAAC,GAAD,IAAGljB,EAAH,EAAGA,UAAH,OAClB,sBAAKC,MAAO,CAAErB,MAAO,OAAQkD,QAAS,QAAtC,SACE,eAAC,KAAD,CAAYhD,MAAM,UAAUoB,QAASF,EAAWF,IAAKD,GAAUM,KAAM,QCGnEuM,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZygB,aAAc,UAEhB5V,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QAiIlB8a,GArHK,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,YAAaC,EAAsC,EAAtCA,aAAcnG,EAAwB,EAAxBA,SAAUoG,EAAc,EAAdA,QACpD1lB,EAAWsD,cACXmM,EAAUX,KACRpH,EAAeF,KAAfE,WAEAnE,EAAoBC,cAApBD,gBAQF+P,EAAc,WAClBmS,GAAa,IAMTE,EAAkB,yCAAG,WAAOlhB,GAAP,UAAAhD,EAAA,kEAED,IAAnBikB,EAAQptB,OAFY,gCAGf6nB,GAAeb,GAHA,uBAKjBS,GAAaT,GALI,OAbzB/b,EAmByB,iEAnBA,CACvBG,QAkBY,YACZ1D,EAASzG,EAAc,WAPA,kDASvByC,QAAQC,IAAI,KAAM8H,UATK,0DAAH,sDAaxB,OACE,eAAC,WAAD,UACE,eAACgM,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMqb,EACNhb,QAAS8I,EACTtD,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbhD,QAAS,KAEX9K,MAAO,CACL8B,eAAgB,UAVpB,SAaE,eAAC,GAAD,CAAY+I,GAAIsY,EAAhB,SACE,sBACEre,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,eAAC,GAAD,CAAc1B,WAAYA,EAA1B,SAEE,+BACE,eAACN,GAAA,EAAD,UACE,eAAC,KAAD,CAAgB7E,KAAM,GAAIiI,QAAS8I,UAIzC,+BACE,sBACEjR,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZD,eAAgB,UAJpB,UAOE,eAAC,GAAD,CACE9B,MAAO,CACL0gB,WAAY,MACZqC,SAAU,WAHd,4EAQA,sBAAK/iB,MAAO,CAACqI,OAAQ,YAAa2a,YAAa,mBAC/CxgB,IAAI,6BAA6BC,IAAI,OAAO9D,MAAM,aAGtD,uBACEqB,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBa,UAAW,QAJf,UAQE,gBAAC,GAAD,CACE/D,QAAQ,gBACRC,MAAM,QACNF,MAAM,QACNqG,QAASse,EAJX,UAME,eAAC,KAAD,CAAsBtjB,MAAO,CAAE0T,YAAa,SAN9C,kBASA,gBAAC,GAAD,CACE9U,QAAQ,iBACRC,MAAM,QACNF,MAAM,QACNwJ,QAAS8I,EAJX,UAME,eAAC,KAAD,CAAiBjR,MAAO,CAAE0T,YAAa,SANzC,iCCzHD6P,GAlBY9kB,KAAOO,IAAV,8TCMlBiF,GAAkBxF,KAAOO,IAAV,oJAQf4D,GAAanE,aAAOoE,KAAPpE,CAAH,uJAmFD+kB,GA5ES,SAAC,GAQlB,IAPLC,EAOI,EAPJA,gBACAnd,EAMI,EANJA,YACAC,EAKI,EALJA,SACA5R,EAII,EAJJA,SACAsoB,EAGI,EAHJA,SACA9iB,EAEI,EAFJA,WACAyoB,EACI,EADJA,WAEA,EAAgCjiB,mBAAS,IAAzC,oBAAO7N,EAAP,KAAiB0T,EAAjB,KACQtF,EAAoBC,cAApBD,gBAEF8e,EAAS,yCAAG,WAAO5d,GAAP,gBAAAhD,EAAA,kEAEdqkB,EAAgB3wB,GACVwa,EAAW,CACfoJ,YAAa,mBACb2M,QAASvwB,EACT6B,WACAwF,aACA8iB,YAEFtjB,QAAQC,IAAI,cAAe0T,GACV,KAAbxa,EAXU,uBAYZsO,EAAY,QAAS,yEAZT,0CAeRic,GAAW/P,GAfH,OAgBd9G,EAAY,IACZpF,EAAY,UAAW,kEACvBwhB,GAAW,GAlBG,kDAoBdjpB,QAAQC,IAAI,KAAM8H,SAASrL,MApBb,0DAAH,sDAwBT+K,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAqBJ,OACE,eAAC,WAAD,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CACEzF,MAAO9I,EACPwT,YAAaA,EACbG,SAxBa,SAACrE,GACpBoE,EAAYpE,EAAMyB,OAAOjI,QAwBnB8K,WArBe,SAACtE,GACtB,IAAQuE,EAAQvE,EAARuE,IACI,UAARA,GAAmB7T,GACrB2wB,EAAgB3wB,QACCsS,IAAbmB,GACF5E,YAAW,WACT6E,EAAY,MACX,KAEY,UAARG,GAAoB7T,GAC7BsO,EAAY,QAAS,sEAanB,eAAC2D,GAAA,EAAD,CAAYtE,KAAK,SAASuE,QAASgb,EAAnC,SACE,eAAC,KAAD,YCnEJvT,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC2lB,KAAM,CACJ/kB,MAAO,OACP4D,SAAU,OACV8I,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,OAE5C+W,OAAQ,CACN9hB,QAAS,cAgSE+hB,GAjRU,WACvB,IAAMxW,EAAUX,KAEhB,EAAoC9L,oBAAS,GAA7C,oBAAOwiB,EAAP,KAAoBC,EAApB,KAEA,EAAkDziB,oBAAS,GAA3D,oBAAO+hB,EAAP,KAA2BC,EAA3B,KAEA,EAA4B1d,IAAMtE,SAAS,IAA3C,oBAAO3D,EAAP,KAAe6kB,EAAf,KAEA,EAA8B5c,IAAMtE,SAAS,IAA7C,oBAAO0iB,EAAP,KAAgBQ,EAAhB,KAEA,EAAwCljB,mBAAS,IAAjD,oBAAqB8iB,GAArB,WAEA,EAA8B9iB,oBAAS,GAAvC,oBAAOmjB,EAAP,KAAgBlB,EAAhB,KAEA,EAAgCjiB,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAEMjD,EAAWsD,cACX8iB,EAAejjB,aAAY,SAAC5N,GAAD,OAAWA,EAAM8J,OAAOnF,sBACnDsC,EAAa2G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUE,cAC3DxF,EAAWmM,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUtF,YAG/D4M,qBAAU,WACRX,GAAW,GACgB,yCAAG,+BAAAxB,EAAA,+EAGE8d,GAAc6G,GAHhB,cAGpBvD,EAHoB,OAI1BqB,EAAUrB,GAJgB,SAOGxD,GAAsB+G,GAPzB,OAOpBC,EAPoB,OAS1BH,EAAWG,GAEXpjB,GAAW,GACXgiB,GAAW,GAZe,kDAcU,gCAAhC,KAAMlhB,SAASrL,KAAK+iB,SACtByK,EAAW,IAEbjjB,GAAW,GACXgiB,GAAW,GAlBe,0DAAH,oDAqB3BqB,KACC,CAACH,IAMJ,OACE,gBAAC,WAAD,WACG/jB,GACC,sBACEC,MAAO,CACLrB,MAAO,OACPqD,OAAQ,OACRH,QAAS,OACTC,eAAgB,SAChBC,WAAY,UANhB,SASE,eAAC,GAAD,OAGFhC,GACA,gBAAC,WAAD,WACE,uBAAKC,MAAO,CAAE6B,QAAS,OAAQc,UAAW,QAA1C,UACE,sBAAKmC,UAAU,YAAY9E,MAAO,CAAE6B,QAAS,OAAQkF,KAAM,GAA3D,SACE,sBAAKvE,IAAI,+BAA+BC,IAAI,OAAO9D,MAAM,UAE3D,uBACEmG,UAAU,YACV9E,MAAO,CACL+G,KAAM,EACNlF,QAAS,OACT0R,WAAY,MACZjR,cAAe,SACfR,eAAgB,UAPpB,UAUE,sBAAKgD,UAAU,mBAAf,SACE,qBAAI9E,MAAO,CAAE0gB,WAAY,OAAzB,SAAmC1jB,EAAO6hB,iBAE5C,sBAAK/Z,UAAU,qBAAf,SACE,sBACE9E,MAAO,CAAE0gB,WAAY,MAAO/d,UAAW,MAAO9D,MAAO,QADvD,SAGG+a,KAAO5c,EAAO4hB,YAAY9E,OAAO,yCAIxC,uBACE9Z,MAAO,CACL+G,KAAM,EACN2Z,WAAY,MACZ/d,UAAW,MACX9D,MAAO,OACPgD,QAAS,OACTC,eAAgB,SAChBC,WAAY,UARhB,kCAWS/E,EAAOknB,kBAGlB,sBACElkB,MAAO,CAAE2C,UAAW,OAAQc,aAAc,OAAQ5B,QAAS,QAD7D,SAGE,qBACE7B,MAAO,CACL0gB,WAAY,MACZqC,SAAU,QAHd,SAMG/lB,EAAO2hB,gBAGZ,wBACA,sBAAK3e,MAAO,CAAE6B,QAAS,QAAvB,SACE,qBACE7B,MAAO,CACL0gB,WAAY,MACZrd,QAAS,SACTxB,QAAS,OACTc,UAAW,SACXc,aAAc,SACd1B,WAAY,UAPhB,SAUGjE,aAAMd,EAAOwjB,cAAc2D,gBAIhC,wBACA,eAAC,GAAD,UACE,gEAEF,+BACE,eAAC,GAAD,CACE1d,SA7FS,SAAC7C,GACpB6f,EAAgB7f,EAAEC,OAAOjI,QA6Ff6nB,gBAAiBA,EACjBtpB,WAAYA,EACZxF,SAAUA,EACVsoB,SAAU8G,EACVnB,WAAYA,EACZtc,YAAY,gEAIf+c,EAAQ1vB,KAAI,SAAC0C,EAAMoL,GAAP,OACX,gBAAC2iB,GAAA,EAAD,CAAMtf,UAAWsI,EAAQsW,KAAzB,UACE,gBAAC5E,GAAA,EAAD,CAAU/c,WAAW,aAArB,UACE,eAACsiB,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,CAAQ7hB,IAAI,aAAaD,IAAI,kCAE/B,eAAC+hB,GAAA,EAAD,CACEC,QAASnuB,EAAKgtB,QACdoB,UACE,eAAC,IAAMC,SAAP,UACE,eAACtkB,GAAA,EAAD,CACEsC,UAAU,OACVrB,QAAQ,QACRyD,UAAWsI,EAAQuW,OACnB9kB,MAAM,cAJR,SAMGxI,EAAK8D,iBAKbxF,IAAa0B,EAAK1B,SACjB,gBAACoQ,GAAA,EAAD,CACEC,QAAS,WACP2d,GAAoB,SAACne,GAAD,OAAgBA,MAFxC,UAKE,eAAC,GAAD,CACEke,mBAAoBA,EACpBC,oBAAqBA,EACrB9E,gBAAiBxnB,EAAKwnB,gBACtB+E,WAAYA,IAEd,eAAC,KAAD,CACE1iB,KAAM,GACNF,MAAO,CAAEnB,MAAO,gBAIpB,eAAC,WAAD,OAGJ,eAAC0J,GAAA,EAAD,CAASlH,QAAQ,QAAQqB,UAAU,SAzCD,aAAejB,MA6CpDzE,EAAOrI,WAAaA,EACnB,uBACEqL,MAAO,CACL2C,UAAW,OACXd,QAAS,QAHb,UAME,sBAAK7B,MAAO,CAAE+G,KAAM,IAAK2M,YAAa,QAAtC,SACE,gBAAC,GAAD,CACE9U,QAAQ,gBACRC,MAAM,QACNmG,QAAS,kBAAMrH,EAASzG,EAAc,UAHxC,UAKE,eAAC,KAAD,CAAU8I,MAAO,CAAE0T,YAAa,SALlC,oBASF,sBAAK1T,MAAO,CAAE+G,KAAM,IAAK2M,YAAa,QAAtC,SACE,gBAAC,GAAD,CACE9U,QAAQ,kBACRC,MAAM,QACNmG,QAAS,kBAAMrH,EAASzG,EAAc,YAHxC,UAKE,eAAC,KAAD,CAAgB8I,MAAO,CAAE0T,YAAa,SALxC,oBASF,sBAAK1T,MAAO,CAAE+G,KAAM,KAApB,SACE,gBAAC,GAAD,CACEnI,QAAQ,iBACRC,MAAM,QACNmG,QAAS,WACPoe,GAAa,SAAC5e,GAAD,OAAgBA,MAJjC,UAOE,eAAC,GAAD,CACE2e,YAAaA,EACbC,aAAcA,EACdnG,SAAU8G,EACVV,QAASA,IAEX,eAAC,KAAD,CAAiBrjB,MAAO,CAAE0T,YAAa,SAbzC,oBAiBF,sBAAK1T,MAAO,CAAE+G,KAAM,UAGtB,uBACE/G,MAAO,CACL2C,UAAW,OACXd,QAAS,QAHb,UAME,sBAAK7B,MAAO,CAAE+G,KAAM,IAAK2M,YAAa,QAAtC,SACE,gBAAC,GAAD,CACE9U,QAAQ,gBACRC,MAAM,QACNmG,QAAS,kBAAMrH,EAASzG,EAAc,UAHxC,UAKE,eAAC,KAAD,CAAU8I,MAAO,CAAE0T,YAAa,SALlC,oBASF,sBAAK1T,MAAO,CAAE+G,KAAM,IAAK2M,YAAa,UACtC,sBAAK1T,MAAO,CAAE+G,KAAM,IAAK2M,YAAa,UACtC,sBAAK1T,MAAO,CAAE+G,KAAM,iBCxFnB4d,GA3MY,WAEzB,MAAgChkB,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAEA,EAA4BqE,IAAMtE,SAAS,IAA3C,oBAAO3D,EAAP,KAAe6kB,EAAf,KAEA,EAAsClhB,qBAAtC,oBAAOge,EAAP,KAAoBiB,EAApB,KAEA,EAA8Bjf,mBAAS,IAAvC,oBAAgBmf,GAAhB,WACMC,EAAYnH,iBAAO,MAEnBmL,EAAejjB,aAAY,SAAC5N,GAAD,OAAWA,EAAM8J,OAAOnF,sBAEnDwC,EAAeyG,aACnB,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUI,gBAE9BsD,EAAWsD,cAETC,EAAoBC,cAApBD,gBACFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAQJE,qBAAU,WACRX,GAAW,GACD,yCAAG,6BAAAxB,EAAA,+EAEmB8d,GAAc6G,GAFjC,OAEHvD,EAFG,OAGTqB,EAAUrB,GACVZ,EAAeY,EAAc7B,aAC7B/d,GAAW,GALF,gDAOTjH,QAAQC,IAAR,MACAgH,GAAW,GARF,yDAAH,oDAWVkhB,KACC,IAEH,IAAM8C,EAAY,yCAAG,iCAAAxlB,EAAA,kEAGK,MADhB6gB,EAAgBF,EAAU1G,QAAQ6G,cAAcC,YACV,KAAhBxB,EAHX,uBAIfvd,EAAY,QAAS,sFAJN,6BASE,KAFA6e,EAAc5N,QAAQ,iBAAkB,IAP1C,uBAUfjR,EAAY,QAAS,kEAVN,iCAcXif,EAAiBJ,EACpB5N,QAAQ,iBAAkB,IAC1BiO,UAAU,EAAG,IAGVhT,EAAW,CACf2P,SAAU8G,EACVpF,YAAaA,EACb6B,cAAeP,EACfI,kBAvBe,UA2BX5C,GAAanQ,GA3BF,QA8BjB3P,EAASzG,EAAc,kBA9BN,kDAgCjByC,QAAQC,IAAR,MAhCiB,0DAAH,qDAmClB,OACE,gBAAC,WAAD,WACGmG,GACC,sBACEC,MAAO,CACLrB,MAAO,OACPqD,OAAQ,OACRH,QAAS,OACTC,eAAgB,SAChBC,WAAY,UANhB,SASE,eAAC,GAAD,OAGFhC,GACA,gBAAC,WAAD,WACE,uBAAKC,MAAO,CAAE2C,UAAW,OAAQd,QAAS,QAA1C,UACE,sBAAK7B,MAAO,CAAE+G,KAAM,GAAK0Z,UAAW,UAApC,SACE,qBAAIzgB,MAAO,CAAE0gB,WAAY,OAAzB,4BAEF,sBAAK1gB,MAAO,CAAE+G,KAAM,GAApB,SACE,eAAC,GAAD,CACErU,KAAK,cACLkJ,MAAO+iB,EACPlY,SAhFO,SAAC7C,GACpBgc,EAAehc,EAAEC,OAAOjI,eAmFlB,sBAAKoE,MAAO,CAAE2C,UAAW,QAAzB,SACE,qBAAI3C,MAAO,CAAE0gB,WAAY,MAAOrd,QAAS,UAAzC,SACE,eAAC,UAAD,CACEsd,aAAa,WACb3e,OAAO,QACP4e,gBAAgB,UAChBluB,KAAK,gBACLmyB,aAAc7nB,EAAOwjB,cACrBK,SAAS,KACTC,MAAO,CACLC,iBAAiB,WAAD,8BAAE,WAAOC,EAAMC,GAAb,4BAAA7hB,EAAA,sEAEV8hB,EAAM,OAEQ,eAAdF,EAAKvgB,KACPygB,EAAM,OACiB,cAAdF,EAAKvgB,KACdygB,EAAM,OACiB,cAAdF,EAAKvgB,KACdygB,EAAM,OACiB,eAAdF,EAAKvgB,OACdygB,EAAM,SAGFC,EAAYC,eAASF,EAdb,SAgBclC,GAASgC,GAhBvB,cAgBRK,EAhBQ,OAkBR/T,EAAW,CACfjT,eACA8mB,YACAE,iBArBY,UAwBU9D,GAAejQ,GAxBzB,eAwBRgU,EAxBQ,OA0BRC,EA1BQ,UA0BShlB,gCA1BT,uBA0ByD+kB,GACvE3nB,QAAQC,IAAI2nB,GAEZzB,GAAW,SAACtb,GACV,IAAM7O,EAAW6O,EAEjB,OADA7O,EAASO,KAAKqrB,GACP5rB,KAGTsrB,EAASM,EAAa,eAnCR,mBAoCP,GApCO,8CAsCcnc,IAAxB,KAAM1D,SAASrL,OACTiL,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,IAEvBF,EAAY,QAAD,MA1CG,mBA2CP,GA3CO,0DAAF,qDAAC,IA+CnBsK,IAAKqU,QAIX,uBACE/f,MAAO,CACL2C,UAAW,OACXd,QAAS,QAHb,UAME,sBAAK7B,MAAO,CAAE+G,KAAM,IAAK2M,YAAa,QAAtC,SACE,gBAAC,GAAD,CACE9U,QAAQ,kBACRC,MAAM,QACNmG,QAAS4f,EAHX,UAKE,eAAC,KAAD,CAAgB5kB,MAAO,CAAE0T,YAAa,SALxC,uCASF,sBAAK1T,MAAO,CAAE+G,KAAM,IAAK2M,YAAa,QAAtC,SACE,gBAAC,GAAD,CACE9U,QAAQ,gBACRC,MAAM,QACNmG,QAAS,kBAAMrH,EAASzG,EAAc,UAHxC,UAKE,eAAC,KAAD,CAAU8I,MAAO,CAAE0T,YAAa,SALlC,oBASF,sBAAK1T,MAAO,CAAE+G,KAAM,iBCpIjB+d,GA7DM,SAAC,GAA6B,IAA3Bld,EAA0B,EAA1BA,SAAUyC,EAAgB,EAAhBA,UACxBhF,EAAeF,KAAfE,WACF/P,EAAawL,aAAY,SAAC5N,GAAD,OAAWA,EAAM8J,OAAO1H,cACjDqI,EAAWsD,cAEX4G,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvD0D,EAAUvC,KA6BZ,OACE,eAAC,WAAD,UACE,eAACE,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,WACE,gBAAC,GAAD,CAAcxC,WAAYA,EAA1B,UACE,4DACA,+BACE,eAAC,KAAD,CAAgBnF,KAAM,GAAI8E,QAtCf,WACrBqF,GAAU,GACV1M,EAASzG,EAAc,iBAGF,SAACoc,GACtB,OAAQA,GACN,IAAK,OACH,OAAO,eAAC,GAAD,IACT,IAAK,QACH,OAAO,eAAC,GAAD,IACT,IAAK,OACH,OAAO,eAAC,GAAD,IACT,IAAK,SACH,OAAO,eAAC,GAAD,IACT,IAAK,UAEL,IAAK,gBAEL,IAAK,SACH,OAAO,eAAC,GAAD,IACT,QACE,OAAO,eAAC,GAAD,KAoBJE,CAAele,WCtEpB2O,GAAkBxF,KAAOO,IAAV,oJAQf4D,GAAanE,aAAOoE,KAAPpE,CAAH,uJA+FDoS,GAjFE,SAAC,GAQX,IAPLkU,EAOI,EAPJA,aACAze,EAMI,EANJA,YACAC,EAKI,EALJA,SACApM,EAII,EAJJA,WACAxF,EAGI,EAHJA,SACA0F,EAEI,EAFJA,aACAuoB,EACI,EADJA,WAGA,EAAgCjiB,mBAAS,IAAzC,oBAAO7N,EAAP,KAAiB0T,EAAjB,KAGQtF,EAAoBC,cAApBD,gBACFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAIE2e,EAAS,yCAAG,WAAO5d,GAAP,gBAAAhD,EAAA,kEAEd2lB,EAAajyB,GACPwa,EAAW,CACfoJ,aAAa,IAAImD,MAAO0G,SACxByE,YAAalyB,EACb6B,WACA0F,eACAF,cAEe,KAAbrH,EAVU,uBAWZsO,EAAY,QAAS,yEAXT,0CAcR8c,GAAW5Q,GAdH,OAgBd9G,EAAY,IACZpF,EAAY,UAAW,kEAEvBwhB,GAAW,GAnBG,kDAqBdjpB,QAAQC,IAAI,KAAM8H,SAASrL,MArBb,0DAAH,sDA4Cf,OACE,eAAC,WAAD,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CACEuF,MAAO9I,EACPwT,YAAaA,EACbG,SAxBa,SAACrE,GACpBoE,EAAYpE,EAAMyB,OAAOjI,QAwBnB8K,WArBe,SAACtE,GACtB,IAAQuE,EAAQvE,EAARuE,IACI,UAARA,GAAmB7T,GACrBiyB,EAAajyB,QACIsS,IAAbmB,GACF5E,YAAW,WACT6E,EAAY,MACX,KAEY,UAARG,GAAoB7T,GAC7BsO,EAAY,QAAS,sEAanB,eAAC2D,GAAA,EAAD,CAAYtE,KAAK,SAASuE,QAASgb,EAAnC,SACE,eAAC,KAAD,YCpFKiF,GAlBcxmB,KAAOO,IAAV,ySCWpByN,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZygB,aAAc,UAEhB5V,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QA8HlB8c,GAnHS,SAAC,GAAuD,IAArD/B,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,aAAc/E,EAAyB,EAAzBA,OAAQuE,EAAiB,EAAjBA,WACtDxV,EAAUX,KACRpH,EAAeF,KAAfE,WAGAnE,EAAoBC,cAApBD,gBAQF+P,EAAc,WAClBmS,GAAa,IAIT+B,EAAgB,yCAAG,WAAO/iB,GAAP,UAAAhD,EAAA,+EAEfgf,GAAWC,GAFI,OAGrBuE,GAAW,GAdb1hB,EAeyB,iEAfA,CACvBG,QAcY,YAJS,gDAMrB1H,QAAQC,IAAR,MANqB,yDAAH,sDAUtB,OACE,eAAC,WAAD,UACE,eAAC8T,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMqb,EACNhb,QAAS8I,EACTtD,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbhD,QAAS,KAEX9K,MAAO,CACL8B,eAAgB,UAVpB,SAaE,eAAC,GAAD,CAAY+I,GAAIsY,EAAhB,SACE,sBACEre,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,eAAC,GAAD,CAAc1B,WAAYA,EAA1B,SACE,+BACE,eAACN,GAAA,EAAD,UACE,eAAC,KAAD,CAAgB7E,KAAM,GAAIiI,QAAS8I,UAIzC,+BACE,sBACEjR,MAAO,CACL8iB,UAAW,UAFf,UAKE,eAAC,GAAD,CACE9iB,MAAO,CACL0gB,WAAY,MACZqC,SAAU,WAHd,4EAQA,sBACE/iB,MAAO,CACLqI,OAAQ,YACR2a,YAAa,mBAEfxgB,IAAI,6BACJC,IAAI,OACJ9D,MAAM,aAIZ,uBACEqB,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBa,UAAW,QAJf,UAOE,gBAAC,GAAD,CACE/D,QAAQ,gBACRC,MAAM,QACNF,MAAM,QACNqG,QAASmgB,EAJX,UAME,eAAC,KAAD,CAAsBnlB,MAAO,CAAE0T,YAAa,SAN9C,kBASA,gBAAC,GAAD,CACE9U,QAAQ,iBACRC,MAAM,QACNF,MAAM,QACNwJ,QAAS8I,EAJX,UAME,eAAC,KAAD,CAAiBjR,MAAO,CAAE0T,YAAa,SANzC,iCC3HV+K,GAAkBhgB,KAAOO,IAAV,4SA0BfomB,GAAW,SAAC,GAAyC,IAAvC/uB,EAAsC,EAAtCA,KAAMusB,EAAgC,EAAhCA,WAAYyC,EAAoB,EAApBA,cAE5BL,EAA2D3uB,EAA3D2uB,YAAatO,EAA8CrgB,EAA9CqgB,YAAa2H,EAAiChoB,EAAjCgoB,OAAQ1pB,EAAyB0B,EAAzB1B,SAAUwF,EAAe9D,EAAf8D,WAEpD,EAAoCwG,oBAAS,GAA7C,oBAAOwiB,EAAP,KAAoBC,EAApB,KAEA,EAAgCziB,mBAAStK,EAAKivB,SAA9C,oBAAOC,EAAP,KAAkBC,EAAlB,KAGMZ,EAAY,yCAAG,uBAAAxlB,EAAA,mEAGbmmB,EAHa,gCAIThH,GAAiBF,GAJR,cAMfmH,GAAW,SAAChhB,GAAD,OAAgBA,KANZ,0CASX8Z,GAAgBjoB,EAAKgoB,QATV,cAWjBmH,GAAW,SAAChhB,GAAD,OAAgBA,KAXV,qDAcjB7K,QAAQC,IAAR,MAdiB,0DAAH,qDAkBlB,OACE,eAACklB,GAAA,EAAD,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CACEzd,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRyE,UAAU,QAJZ,SAME,uBAAK9E,MAAO,CAAE6B,QAAS,OAAQE,WAAY,UAA3C,UACGwjB,EACC,sBACEzgB,UAAU,OACV9E,MAAO,CAAE+G,KAAM,EAAG0e,eAAgB,eAAgBC,oBAAqB,sBAFzE,SAKGV,IAGH,sBAAKlgB,UAAU,OAAO9E,MAAO,CAAE+G,KAAM,GAArC,SACGie,IAGJrwB,IAAa0wB,EACZ,sBACErlB,MAAO,CAAE+G,KAAM,EAAGlF,QAAS,OAAQC,eAAgB,YADrD,SAGE,eAACiD,GAAA,EAAD,CAAYC,QAAS4f,EAArB,SACGW,EACC,eAAC,KAAD,CAAYrlB,KAAM,GAAIF,MAAO,CAAEnB,MAAO,aAEtC,eAAC,KAAD,CACEqB,KAAM,GACNF,MAAO,CAAEnB,MAAO,iBAMxB,sBAAKmB,MAAO,CAAE+G,KAAM,UAI1B,uBACEjC,UAAU,cACV9E,MAAO,CAAE6B,QAAS,OAAQE,WAAY,UAFxC,UAIE,uBAAK+C,UAAU,OAAO9E,MAAO,CAAE+G,KAAM,GAArC,UACE,eAAC,GAAD,CAAkB1F,QAAQ,YAAYqB,UAAU,OAAOrC,OAAQ,EAA/D,wCAIA,eAAC,GAAD,CACEgB,QAAQ,YACRqB,UAAU,OACVrC,OAAQ,EACRyE,UAAU,cAJZ,SAMG8U,KAAOlD,GAAaiP,SAAS,EAAG,UAAU7L,OAAO,cAEpD,eAAC,GAAD,CACEzY,QAAQ,YACRqB,UAAU,OACVrC,OAAQ,EACRyE,UAAU,cAJZ,eAQA,eAAC,GAAD,CACEzD,QAAQ,YACRqB,UAAU,OACVrC,OAAQ,EACRyE,UAAU,cAJZ,kCASA,eAAC,GAAD,CACEzD,QAAQ,YACRqB,UAAU,OACVrC,OAAQ,EACRyE,UAAU,cAJZ,SAMG3K,OAGJxF,IAAa0wB,EACZ,uBACErlB,MAAO,CAAE+G,KAAM,EAAGlF,QAAS,OAAQC,eAAgB,YACnDkD,QAAS,WACPoe,GAAa,SAAC5e,GAAD,OAAgBA,MAHjC,UAME,eAAC,GAAD,CACE2e,YAAaA,EACbC,aAAcA,EACd/E,OAAQA,EACRuE,WAAYA,IAEd,eAAC7d,GAAA,EAAD,UACE,eAAC,KAAD,CAAuB7E,KAAM,GAAIF,MAAO,CAAEnB,MAAO,kBAIrD,sBAAKmB,MAAO,CAAE+G,KAAM,cAQjB9B,OAAMC,KAAKkgB,IC9KpBxlB,GAAWC,aAAH,+FAYC+lB,GANK,SAAC,GAAD,IAAG7lB,EAAH,EAAGA,UAAH,OAClB,sBAAKC,MAAO,CAAErB,MAAO,OAAQkD,QAAS,QAAtC,SACE,eAAC,KAAD,CAAYhD,MAAM,UAAUoB,QAASF,EAAWF,IAAKD,GAAUM,KAAM,QCsjB1D2lB,GAthBG,WAEhB,MAA8BllB,oBAAS,GAAvC,oBAAOiH,EAAP,KAAiByC,EAAjB,KAEA,EAA2B1J,mBAAS,IAAIkZ,MAAxC,oBAAOiM,EAAP,KAAaC,EAAb,KAEA,EAAkCplB,mBAAS,IAA3C,oBAAkBokB,GAAlB,WAEA,EAA4B9f,IAAMtE,SAAS,IAA3C,oBAAO3D,EAAP,KAAe6kB,EAAf,KAEA,EAAwB5c,IAAMtE,SAAS,IAAvC,oBAAOqlB,EAAP,KAAaC,EAAb,KAEA,EAA8BtlB,oBAAS,GAAvC,oBAAOmjB,EAAP,KAAgBlB,EAAhB,KAEA,EAAgCjiB,mBAAS,IAAzC,oBAAOlG,EAAP,KAAiByrB,EAAjB,KAEA,EAA4BvlB,mBAAS,IAArC,oBAAOwlB,EAAP,KAAeC,EAAf,KAEA,EAAgCzlB,mBAAS,KAAzC,oBAAO0lB,EAAP,KAAiBC,EAAjB,KACA,EAA8B3lB,mBAAS,KAAvC,oBAAO4lB,EAAP,KAAgBC,EAAhB,KAEA,EAAgC7lB,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAGMjD,EAAWsD,cACX5G,EAAeyG,aACnB,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUI,gBAE9BF,EAAa2G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUE,cAC3DxF,EAAWmM,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,UAAUtF,YAG/D4M,qBAAU,WACR5H,QAAQC,IAAI,qDAAcgO,KACzB,CAACA,IAIJrG,qBAAU,WACRX,GAAW,GACoB,yCAAG,uCAAAxB,EAAA,sEAGxB4M,EAAO4N,OACV+L,SAAS,EAAG,QACZ/J,QAAQ,OACR9B,OAAO,uBACJ5N,EAAK0N,OAASgC,QAAQ,OAAO9B,OAAO,uBAC1CngB,QAAQC,IAAI,SAAUoS,GAEtBrS,QAAQC,IAAI,OAAQsS,GAVU,SAWF6R,GAAc/R,EAAME,GAXlB,cAWxBua,EAXwB,OAY9BL,EAAUK,GACV9sB,QAAQC,IAAI,mBAAoB6sB,GAbF,UAgBF1J,GAAe1iB,GAhBb,eAgBxBmmB,EAhBwB,OAiB9BqB,EAAUrB,EAAcnqB,KAAKA,MAjBC,UAoBAmoB,GAAgBnkB,GApBhB,eAoBxBqsB,EApBwB,OAqB9BR,EAAYQ,EAAgBrwB,KAAKA,MACjCsD,QAAQC,IAAI8sB,EAAgBrwB,MAtBE,UAyBJ4nB,GAAuBtpB,GAzBnB,QAyBxBqwB,EAzBwB,OA0B9BiB,EAAQjB,EAAY3uB,KAAKA,MACzBusB,GAAW,GAGXhiB,GAAW,GA9BmB,kDAgC9BjH,QAAQC,IAAR,MACAgH,GAAW,GAjCmB,0DAAH,oDAoC/B+lB,KACC,CAAC7C,IAEJ,IAAM8C,EAAmB,yCAAG,6BAAAxnB,EAAA,+EAED6e,GAAuBtpB,GAFtB,OAElB+M,EAFkB,OAIxBukB,EAAQvkB,EAASrL,KAAKA,MAEtBiwB,EAAY,KACZE,EAAW,KACX5D,GAAW,GARa,kDAUxBjpB,QAAQC,IAAR,MAVwB,0DAAH,qDAcnBitB,EAAuB,yCAAG,6BAAAznB,EAAA,+EAEL4e,GAA2B3jB,GAFtB,OAEtBqH,EAFsB,OAI5BukB,EAAQvkB,EAASrL,KAAKA,MACtBiwB,EAAY,KACZE,EAAW,KACX5D,GAAW,GAPiB,kDAS5BjpB,QAAQC,IAAR,MAT4B,0DAAH,qDAa7B2H,qBAAU,WACR5H,QAAQC,IAAI,wDACX,IAOH,OACE,gBAAC,WAAD,WACGmG,GACC,sBACEC,MAAO,CACLrB,MAAO,OACPqD,OAAQ,OACRH,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZkgB,OAAQ,QAPZ,SAUE,eAAC,GAAD,OAGFliB,GACA,eAAC,WAAD,UACE,iCACE,yBACEC,MAAO,CACL+S,SAAU,SACVC,IAAK,EACL3H,gBAAiB,UACjBC,OAAQ,GALZ,SAQE,eAAC,GAAD,MAEF,gCACE,eAACnI,GAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,gBAACJ,GAAA,EAAD,CAAMC,WAAS,EAAf,UACE,gBAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGC,GAAI,EAA9B,UACE,gBAAC,GAAD,CACErH,QAAQ,UACRyE,QAAQ,MACRrD,MAAO,CACL6B,QAAS,QAJb,UAOE,uBACE7B,MAAO,CACL+G,KAAM,GAFV,UAKE,eAAC,GAAD,CACE1F,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRxB,MAAM,UAJR,SAMGpE,EAASqsB,eAGZ,eAAC,GAAD,CACEzlB,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAE2C,UAAW,QAJtB,SAMG7E,aAAMrD,EAASssB,0BAGpB,eAACpV,GAAA,EAAD,CAAQC,QAAM,EAAd,SACE,sBACEpP,IAAI,gCACJ7D,MAAM,MACN8D,IAAI,YACJzC,MAAO,CACL+G,KAAM,UAKd,uBAAK/G,MAAO,CAAE2C,UAAW,OAAQd,QAAS,QAA1C,UACE,sBAAK7B,MAAO,CAAE+G,KAAM,GAApB,SACE,eAAC,GAAD,CACE1F,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAEuT,WAAY,QAJvB,wCASF,sBAAKvT,MAAO,CAAE+G,KAAM,GAApB,SACE,gBAAC,GAAD,CACEnI,QAAQ,QACRoG,QAhGR,WACpBqF,GAAU,GACV1M,EAASzG,EAAc,UA4FG,UAIE,eAAC,KAAD,IAJF,8BAQJ,eAACktB,GAAA,EAAD,CAAM1hB,UAAU,MAAhB,SACG1F,EACEjJ,QAAO,SAACsC,EAAMoL,GACb,OAAIA,EAAQ,KAKb9N,KAAI,SAAC0C,GACJ,OACE,eAAC,GAAD,CAAgCA,KAAMA,GAArBA,EAAK4mB,kBAKhC,gBAAC9Z,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGC,GAAI,EAA9B,UACE,gBAAC,GAAD,CACErH,QAAQ,UACRoB,MAAO,CAAEuT,WAAY,UAFvB,UAIE,sBACEvT,MAAO,CACL0gB,WAAY,MACZ1e,OAAQ,QACRH,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBQ,cAAe,SACfzD,MAAO,WARX,UAWE,eAAC,GAAD,UACE,sGAEF,uBAAKmB,MAAO,CAAE6B,QAAS,QAAvB,UAEIskB,EAAO9vB,KACL8vB,EAAO9vB,KAAKJ,OAAS,GACrB4jB,KAAKxK,MAAM,cAAc,GAC3B,IALJ,qBAUF,eAAC,GAAD,CACEzQ,QAAQ,UACRoB,MAAO,CACLqD,QAAS,UACTqd,WAAY,MACZqC,SAAU,UALd,SAQE,uBACE/iB,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZlD,MAAO,gBACPwE,QAAS,QANb,UASE,uBACErD,MAAO,CACL+G,KAAM,EACNlF,QAAS,OACTS,cAAe,SACfP,WAAY,UALhB,qCASE,+BACE,0BAEF,uBACE/B,MAAO,CACLnB,MAAO,iBACP4E,aAAc,SACd5B,QAAS,OACTE,WAAY,UALhB,UAQE,eAAC,KAAD,IACA,uBACE/B,MAAO,CACL+iB,SAAU,SACVxP,WAAY,UAHhB,SAMG4S,EAAO9vB,KAAK8vB,EAAO9vB,KAAKJ,OAAS,GAC/B+wB,UACDb,EAAO9vB,KAAK8vB,EAAO9vB,KAAKJ,OAAS,GAC9B+wB,eAGT,+BACGb,EAAO9vB,KACN8vB,EAAO9vB,KAAKJ,OAAS,GACrB+wB,UAAU7C,gBAGhB,uBACEnkB,MAAO,CACL+G,KAAM,EACNlF,QAAS,OACTS,cAAe,SACfP,WAAY,UALhB,qCASE,+BACE,0BAEF,uBACE/B,MAAO,CACLnB,MAAO,kBACP4E,aAAc,SACd5B,QAAS,OACTE,WAAY,UALhB,UAQE,eAAC,KAAD,IACA,uBACE/B,MAAO,CACL+iB,SAAU,SACVxP,WAAY,UAHhB,UAOI4S,EAAO9vB,KAAK8vB,EAAO9vB,KAAKJ,OAAS,GAC9BgxB,UACHd,EAAO9vB,KAAK8vB,EAAO9vB,KAAKJ,OAAS,GAC9BgxB,WACH9C,gBAGN,+BACGgC,EAAO9vB,KACN8vB,EAAO9vB,KAAKJ,OAAS,GACrBgxB,UAAU9C,gBAGhB,uBACEnkB,MAAO,CACL+G,KAAM,EACNlF,QAAS,OACTS,cAAe,SACfP,WAAY,UALhB,+BASE,+BACE,0BAEF,uBACE/B,MAAO,CACLyD,aAAc,SACd5B,QAAS,OACTE,WAAY,UAJhB,UAOE,eAAC,KAAD,IACA,uBACE/B,MAAO,CACL+iB,SAAU,SACVxP,WAAY,UAHhB,SAMG4S,EAAO9vB,KAAK8vB,EAAO9vB,KAAKJ,OAAS,GAC/BixB,OACDf,EAAO9vB,KAAK8vB,EAAO9vB,KAAKJ,OAAS,GAC9BixB,YAGT,+BACGf,EAAO9vB,KACN8vB,EAAO9vB,KAAKJ,OAAS,GACrBixB,OAAO/C,gBAGb,uBACEnkB,MAAO,CACL+G,KAAM,EACNlF,QAAS,OACTS,cAAe,SACfP,WAAY,UALhB,+BASE,+BACE,0BAEF,uBACE/B,MAAO,CACLyD,aAAc,SACd5B,QAAS,OACTE,WAAY,UAJhB,UAOE,eAAC,KAAD,IACA,uBACE/B,MAAO,CACL+iB,SAAU,SACVxP,WAAY,UAHhB,UAQI4S,EAAO9vB,KAAK8vB,EAAO9vB,KAAKJ,OAAS,GAC9BkxB,OACHhB,EAAO9vB,KAAK8vB,EAAO9vB,KAAKJ,OAAS,GAC9BkxB,QACHhD,gBAGN,+BACGgC,EAAO9vB,KACN8vB,EAAO9vB,KAAKJ,OAAS,GACrBkxB,OAAOhD,qBAMjB,sBAAKnkB,MAAO,CAAEuT,WAAY,eAG5B,eAAC5B,GAAA,EAAD,CAAQC,QAAM,EAAd,SACE,sBACE5R,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZ8K,UAAW,QACXlK,UAAW,QANf,SASE,eAACykB,GAAA,EAAD,CACEC,QAAM,EACNC,UAAU,SACVzoB,MAAM,YACNwC,QAAQ,SACRkmB,OAAO,OACP3rB,MAAOkqB,EACPrf,SAAUsf,QAKhB,gBAAC,GAAD,CACEnnB,QAAQ,mBACRoB,MAAO,CACLuT,WAAY,UAHhB,UAME,sBAAKvT,MAAO,CAAE6B,QAAS,OAAQwB,QAAS,UAAxC,SACE,sBAAKrD,MAAO,CAAE+G,KAAM,KAApB,SACE,gBAAC,GAAD,CACE/G,MAAO,CACLiiB,OAAQ,WAFZ,UAKE,uBACEjiB,MAAO,CAAE0gB,WAAY2F,GACrBrhB,QAAS4hB,EAFX,0CAMA,uBACE5mB,MAAO,CAAE0gB,WAAY6F,GACrBvhB,QAAS6hB,EAFX,qDASN,sBACE7mB,MAAO,CACL6B,QAAS,OACTE,WAAY,UAHhB,SAME,sBAAK/B,MAAO,CAAE+G,KAAM,GAApB,SACE,eAAC,GAAD,CACEge,aAAcA,EACdpwB,SAAUA,EACV0F,aAAcA,EACduoB,WAAYA,EACZzoB,WAAYA,EACZmM,YAAY,kEAIlB,eAAC8d,GAAA,EAAD,CAAM1hB,UAAU,MAAhB,SACGsjB,EAAKryB,KAAI,SAAC0C,GACT,OACE,eAAC,GAAD,CACEgvB,cAAe1wB,EAEf0B,KAAMA,EACNusB,WAAYA,GAFPvsB,EAAKgoB,sBAWxB,eAAC,GAAD,CAAczW,SAAUA,EAAUyC,UAAWA,wB,iFC7hB7DoC,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZygB,aAAc,UAEhB5V,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QAmFlBof,GA/ES,WACtB,IAAMpa,EAAUX,KACV9O,EAAWsD,cACToE,EAAeF,KAAfE,WAEFoiB,EAAgB3mB,aAAY,SAAC5N,GAAD,OAAWA,EAAMiK,OAAO9H,eA8B1D,OACE,eAAC,WAAD,UACE,eAACqY,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAM2f,EACNtf,QAjCc,kBAAMxK,EAASxE,IAAe,KAkC5CwU,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbhD,QAAS,KAEX9K,MAAO,CACL8B,eAAgB,UAVpB,SAaE,eAAC,GAAD,CAAY+I,GAAI4c,EAAhB,SACE,sBACE3iB,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,gBAAC,GAAD,CAAc1B,WAAYA,EAA1B,UACE,eAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,0DAGA,+BACE,eAAC0E,GAAA,EAAD,UACE,eAAC,KAAD,CACE7E,KAAM,GACN8E,QAAS,kBAAMrH,EAASxE,IAAe,cAM/C,eAAC,KAAD,CAAcuuB,WA7DH,SAACrxB,GACtB,IAAQsxB,EAAwDtxB,EAAxDsxB,QAASC,EAA+CvxB,EAA/CuxB,YAAaC,EAAkCxxB,EAAlCwxB,MAAOC,EAA2BzxB,EAA3ByxB,aAAcC,EAAa1xB,EAAb0xB,SAC/CC,EAAcL,EACdM,EAAe,GAEC,MAAhBL,IACY,KAAVC,IACFI,GAAgBJ,GAGG,KAAjBC,IACFG,GACmB,KAAjBA,EAAA,YAA2BH,GAAiBA,GAGhDE,GAAgC,KAAjBC,EAAA,YAA2BA,EAA3B,KAA6C,IAG9DtqB,EACEjE,GAAe,CACbJ,cAAeyuB,EACfxuB,aAAcyuB,KAGlBrqB,EAASxE,IAAgBsuB,mB,qBCxDhBS,GAA6B,yCAAG,WAAO7tB,GAAP,UAAA+E,EAAA,sEAC9BlD,KAAMwD,IAAN,UAAqB,CAChCC,OAAQ,CACNtF,kBAHuC,mFAAH,sDA6B7B8tB,GAA4B,yCAAG,WAAOC,GAAP,UAAAhpB,EAAA,sEAC7BlD,KAAMmD,KAAN,iBAA6B+oB,GADA,mFAAH,sDA6B5BC,GAAS,yCAAG,WAAOC,GAAP,UAAAlpB,EAAA,sEACVlD,KAAMmD,KAAN,UAAsBipB,GADZ,mFAAH,sDAmBTC,GAAgB,yCAAG,WAAOD,GAAP,UAAAlpB,EAAA,sEACjBlD,KAAMsD,IAAN,UAAqB8oB,GADJ,mFAAH,sDAWhBE,GAAY,yCAAG,WAAO7zB,GAAP,UAAAyK,EAAA,sEACblD,KAAMyhB,OAAN,UAAwB,CACnChe,OAAQ,CACNhL,cAHsB,mFAAH,sDAeZ8zB,GAAiB,yCAAG,WAAO9zB,GAAP,UAAAyK,EAAA,6DAC/BzF,QAAQC,IAAIjF,GADmB,SAElBuH,KAAMsD,IAAN,sCAAyC7K,IAFvB,mFAAH,sDAgBjB+zB,GAAiB,yCAAG,WAAOC,GAAP,UAAAvpB,EAAA,sEAClBlD,KAAMmD,KAAN,gBAA4BspB,GADV,mFAAH,sDAWjBC,GAAc,yCAAG,WAAO1uB,GAAP,UAAAkF,EAAA,sEACflD,KAAMwD,IAAN,sBAAiC,CAC5CC,OAAQ,CACNzF,iBAHwB,mFAAH,sD,UCknBZ2uB,GA3tBM,SAAC,GAAsD,IAApDjhB,EAAmD,EAAnDA,SAAUyC,EAAyC,EAAzCA,UAAWye,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAChD1jB,EAAeF,KAAfE,WAGR,EAAkC1E,mBAAS,gBAA3C,oBAAOqoB,EAAP,KAAkBC,EAAlB,KAGA,EAA4CtoB,oBAAS,GAArD,oBAAOuoB,EAAP,KAAuBC,EAAvB,KAGA,EAAsCxoB,mBAAS,IAA/C,oBAAOzG,EAAP,KAAoBkvB,EAApB,KAGA,EAA4CzoB,mBAAS,IAAIkZ,MAAzD,oBAAOwP,EAAP,KAAqBC,EAArB,KACA,EAAgD3oB,mBAAS,IAAzD,oBAAO4oB,EAAP,KAAyBC,EAAzB,KAGA,EAAwC7oB,mBAAS,IAAjD,oBAAO8oB,EAAP,KAAqBC,EAArB,KAGA,EAAgC/oB,mBAAS,IAAzC,oBAAOgpB,EAAP,KAAiBC,EAAjB,KACQ1oB,EAAoBC,cAApBD,gBAGRK,qBAAU,WACRqoB,EAAY,IACZR,EAAe,IACfS,EAAkB,CAChBC,QAAQ,EACRC,MAAM,IAERL,EAAgB,MACf,CAAC9hB,IAEJ,IAAMxG,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAaE2oB,EAAM,yCAAG,WAAO5nB,EAAO6nB,GAAd,kBAAA7qB,EAAA,sDACQ,IAAjBgD,EAAMnM,QACQ,GAChBkrB,EAAY/e,EAAM,GAAG1P,KACjBi2B,EAAY,CACdtuB,aAAcyuB,EAAYzuB,aAC1B8mB,YACAE,cAAe4I,EAAQ,IAEzBL,EAAYjB,GACZhvB,QAAQC,IAAI+uB,KAKZhvB,QAAQC,IAAI,qBAAOqwB,GACnBL,EAAY,KAhBD,2CAAH,wDAoBNjsB,EAAWsD,cAEXwmB,EAAgB3mB,aAAY,SAAC5N,GAAD,OAAWA,EAAMiK,OAAO9H,eAE1D,EAAwCyL,aACtC,SAAC5N,GAAD,OAAWA,EAAMiK,OAAO9D,eADlBC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,aAIvB,EAA4CoH,mBAAS,CACnDopB,MAAM,EACND,QAAQ,IAFV,oBAAOI,EAAP,KAAuBL,EAAvB,KAMMM,EAAqB,SAACz3B,GAC1BiH,QAAQC,IAAIlH,GAGVm3B,EAFW,SAATn3B,EAEgB,CAChBo3B,QAAQ,EACRC,MAAM,GAIU,CAChBA,MAAM,EACND,QAAQ,KAMdvoB,qBAAU,WACR5D,EACEjE,GAAe,CACbJ,cAAe,GACfC,aAAc,QAGjB,CAACoE,IAEJ4D,qBAAU,gBACW6D,IAAfC,GACF1L,QAAQC,IAAI,wBAAyByL,KAEtC,CAACA,IAGJ,IAWMwC,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvD0D,EAAUvC,KAINsiB,EAAkB,yCAAG,+BAAAhrB,EAAA,yDACL,KAAhBlF,EADqB,uBAEvBkH,EAAY,QAAS,kEAFE,6BAQvB,uEAE+BipB,KAAKnwB,GAVb,uBAYvBkH,EAAY,QAAS,8GAZE,oDAgBQwnB,GAAe1uB,GAhBvB,iBAgBf7D,EAhBe,EAgBfA,KAhBe,EAgBT6C,OACdS,QAAQC,IAAI,gDAAcvD,GAC1B+K,EAAY,UAAW,+EACvB+nB,GAAkB,GAnBK,yDAqBvB/nB,EAAY,QAAS,yIArBE,6EAAH,qDAgCxBG,qBAAU,WACR4nB,GAAkB,KACjB,CAACjvB,IAGJ,IAAMowB,EAAY,yCAAG,WAAOloB,GAAP,gEAAAhD,EAAA,yDACnBgD,EAAMmoB,iBAGAC,EACJ,uEAIIC,EACJ,2EAGIC,EACJ,+DAEEtwB,EAAkB,GACJ,uBAAd4uB,EACF5uB,EAAkB,gBACK,iBAAd4uB,EACT5uB,EAAkB,cACK,uBAAd4uB,EACT5uB,EAAkB,aACK,uBAAd4uB,IACT5uB,EAAkB,kBAGdF,EAAckI,EAAMyB,OAAO3J,YAAY0B,MACvCmV,EAAW3O,EAAMyB,OAAO8mB,eAAe/uB,MACvCzB,EAAaiI,EAAMyB,OAAO1J,WAAWyB,MACrCgvB,EAAYxoB,EAAMyB,OAAO+mB,UAAUhvB,MACnCivB,EAAczoB,EAAMyB,OAAOgnB,YAAYjvB,MACvCkvB,EAAe1oB,EAAMyB,OAAOknB,eAAenvB,MAC3CovB,EAAc5oB,EAAMyB,OAAOonB,eAAervB,MAC1CsvB,EAAc9oB,EAAMyB,OAAOsnB,eAAevvB,MAC5CwvB,EAAc,GACZC,EAAqBjpB,EAAMyB,OAAOynB,gBAAgB1vB,MAClD2vB,EAAc9B,EAEhBjwB,EAAS,IACkB,IAA3B0wB,EAAc,KAChB1wB,EAAS,QAC6B,IAA7B0wB,EAAc,SACvB1wB,EAAS,UAELgyB,EAAehyB,EAGfiyB,EAAejB,EAAYH,KAAKnwB,GAChCwxB,EAAYjB,EAASJ,KAAKtZ,GAC1B4a,EAAajB,EAAUL,KAAKO,GAE7B1B,EApDc,wBAqDjB9nB,EAAY,QAAS,gFArDJ,8BAuDPqqB,EAvDO,wBAwDjBrqB,EAAY,QAAS,8GAxDJ,8BA0DPsqB,EA1DO,wBA2DjBtqB,EACE,QACA,sPA7De,8BAgES,KAAjBoqB,EAhEQ,wBAiEjBpqB,EAAY,QAAS,4DAjEJ,8BAmEO,KAAfjH,EAnEQ,wBAoEjBiH,EAAY,QAAS,sDApEJ,8BAsEPuqB,EAtEO,wBAuEjBvqB,EACE,QACA,KAzEe,8BA4EQ,KAAhBypB,EA5EQ,wBA6EjBzpB,EAAY,QAAS,+EA7EJ,8BA+Ee,KAArBmoB,EA/EM,wBAgFjB5vB,QAAQC,IAAI2vB,GACZnoB,EACE,QADS,+CAECmoB,EAFD,qEAjFM,8BAsFS,KAAjBuB,GAAuC,KAAhBE,EAtFf,wBAuFjB5pB,EAAY,QAAS,gHAvFJ,8BAyFQ,KAAhB8pB,EAzFQ,wBA0FjB9pB,EAAY,QAAS,uIA1FJ,8BA4FQ,KAAhBmqB,EA5FQ,wBA6FjBnqB,EAAY,QAAS,kIA7FJ,8BAkGF,KAAbuoB,EAlGe,kCAmGcjB,GAAkBiB,GAnGhC,iBAmGTtzB,EAnGS,EAmGTA,KAnGS,EAmGH6C,OACdS,QAAQC,IAAI,gDAAcvD,GAC1B+0B,EAAc/0B,EArGG,yBAyGbiyB,EAAa,CACfjuB,aAAcyuB,EAAYzuB,aAC1B0W,WACA8Z,cACA3wB,cACAsxB,eACArxB,aACAywB,YACAxwB,kBACA0wB,eACAE,cACAE,cACAU,cAAe,EACfR,cACAC,qBACAE,eAEF5xB,QAAQC,IAAI0uB,GA1HK,UA2HcD,GAAUC,GA3HxB,iBA2HTjyB,EA3HS,EA2HTA,KA3HS,EA2HH6C,OACdS,QAAQC,IAAIvD,GA5HK,mDA8HjB+K,EAAY,QAAS,iGA9HJ,QAgInB2nB,IACA3nB,EAAY,UAAW,wEACvBiJ,GAAU,GAlIS,4DAAH,sDAqIlB,OACE,eAAC,WAAD,UACE,eAACrC,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,uBAAMgkB,SAAUvB,EAAhB,SACE,gBAAC,GAAD,CAAqBjlB,WAAYA,EAAjC,UACE,gBAAC,GAAD,CAAcA,WAAYA,EAA1B,UACE,4DACA,+BACE,eAAC,KAAD,CAAgBnF,KAAM,GAAI8E,QAAS,kBAAMqF,GAAU,WAIvD,gBAAClH,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAGpI,MAAO,CAAEqD,QAAS,QAA9C,UACE,eAACF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,gBAACuoB,GAAA,EAAD,CAAa9rB,MAAO,CAAErB,MAAO,QAAU0C,QAAQ,WAA/C,UACE,eAAC0qB,GAAA,EAAD,CAAYn4B,GAAG,aAAf,0BACA,gBAACo4B,GAAA,EAAD,CACEC,QAAQ,aACRr4B,GAAG,eACHsf,MAAM,eACNzM,SAAU,SAAC7C,GAAD,OAAOqlB,EAAarlB,EAAEC,OAAOjI,QACvCA,MAAOotB,EALT,UAOE,eAACkD,GAAA,EAAD,CAAUtwB,MAAM,eAAKoJ,QAAS,kBAAMikB,EAAa,iBAAjD,0BAGA,eAACiD,GAAA,EAAD,CACEtwB,MAAM,qBACNoJ,QAAS,kBAAMikB,EAAa,uBAF9B,gCAMA,eAACiD,GAAA,EAAD,CACEtwB,MAAM,qBACNoJ,QAAS,kBAAMikB,EAAa,uBAF9B,wCASN,eAAC9lB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,kCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,cACL+T,SAxNK,SAACrE,GACpBgnB,EAAehnB,EAAMyB,OAAOjI,QAwNdA,MAAO1B,MAGX,eAACiJ,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CACEnD,QAAQ,YACRoG,QAAS,kBAAMolB,KAFjB,yCAOF,eAACjnB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,wCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiB7Q,KAAK,iBAAiB+N,KAAK,eAE9C,eAAC0C,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,uBACEvD,MAAO,CACL6B,QAAS,OACTU,SAAU,QACVP,OAAQ,SAJZ,UAOE,gBAAC,GAAD,CACEpD,QAAQ,gBACRoB,MAAO,CACL6B,QAAS,OACTE,WAAY,UAEdiD,QAAS,kBAAMmlB,EAAmB,SANpC,UAQGD,EAAeH,MACd,gBAAC,WAAD,WACE,eAAC,KAAD,CAAclrB,MAAM,kBAAkBqB,KAAM,KAC5C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,kBACPX,WAAY,QALhB,uCAaJgsB,EAAeH,MACf,gBAAC,WAAD,WACE,eAAC,KAAD,CAAclrB,MAAM,QAAQqB,KAAM,KAClC,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,QACPX,WAAY,QALhB,yCAcR,gBAAC,GAAD,CACEU,QAAQ,gBACRoB,MAAO,CACL6B,QAAS,OACTE,WAAY,UAEdiD,QAAS,kBAAMmlB,EAAmB,WANpC,UAQGD,EAAeJ,QACd,gBAAC,WAAD,WACE,eAAC,KAAD,CAAgBjrB,MAAM,kBAAkBqB,KAAM,KAC9C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,kBACPX,WAAY,QALhB,yCAaJgsB,EAAeJ,QACf,gBAAC,WAAD,WACE,eAAC,KAAD,CAAgBjrB,MAAM,QAAQqB,KAAM,KACpC,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,QACPX,WAAY,QALhB,gDAgBZ,eAACiF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiB7Q,KAAK,iBAExB,eAACyQ,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,wCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiB7Q,KAAK,gBAExB,eAACyQ,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,wCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,KAAD,CACE7Q,KAAK,cACLy5B,eAAa,EACb5E,OAAO,OACPzN,OAAO,aACPsS,MAAO,CAAC,OAAQ,QAAS,QACzBxwB,MAAOytB,EACP5iB,SAAU6iB,EACV+C,QA/dQ,SAACh2B,EAAMqpB,GACzBrpB,GACFsD,QAAQC,IAAIvD,GACZmzB,EAAoBnzB,KAEpBsD,QAAQC,IAAI,+EACZ4vB,EAAoB,MA0dR8C,mBAAmB,8EACnBC,eAAe,sFACfC,eAAe,iFAGnB,eAACrpB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,GACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAKF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,iBACL4T,YAAY,4BACZ1K,MAAOtC,EACPoK,UAAQ,MAGZ,eAACP,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CACEnD,QAAQ,YACRoG,QAAS,kBAAMrH,EAASxE,IAAgBsuB,KAF1C,yCAQF,eAACtkB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,iBACL4T,YAAY,eACZ1K,MAAOrC,EACPmK,UAAQ,MAGZ,eAACP,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,iBACL4T,YAAY,yEAIlB,iCACE,eAAC,GAAD,CAAkBjF,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,gCAGA,eAAC,KAAD,CACE3N,KAAK,cACL+5B,UAAU,EACVC,WAAW,iEACXjmB,SAAUujB,EACV2C,aAAc,CAAC,OAAQ,OAAQ,SAC/BC,cAAc,0GACdC,cAAc,mFACd3Z,MAAM,+FACN4Z,YAAa,QACbC,aAAW,EACXC,aAAW,OAGf,iCACE,eAAC,GAAD,CAAkB3rB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,sCAGA,eAAC4sB,GAAA,EAAD,CACEv6B,KAAK,kBACLwgB,MAAM,oFACNga,WAAS,EACTjrB,KAAM,EACNZ,QAAQ,WACRqQ,WAAS,OAGb,uBACE1R,MAAO,CACL2C,UAAW,GACXd,QAAS,OACTE,WAAY,UAJhB,UAOE,eAAC,GAAD,CACEV,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAE0T,YAAa,IAJxB,sCAQA,eAAC,KAAD,CAAcjN,SAnpBN,SAAC5H,EAAOuD,GACtBvD,IACF6qB,EAAgB7qB,EAAMsuB,KACtBxzB,QAAQC,IAAIiF,EAAMsuB,SAipBV,eAAC5hB,GAAA,EAAD,CACEvL,MAAO,CACLrB,MAAO,GACPqD,OAAQ,GACRuR,WAAY,GACZlI,gBAAiBoe,QAIvB,sBACEzpB,MAAO,CACL+S,SAAU,QACVU,OAAQ,GACR2Z,MAAO,GACPvrB,QAAS,OACTC,eAAgB,YANpB,SASE,eAAC,GAAD,CAAcrB,KAAK,SAAS7B,QAAQ,YAApC,+CAIF,eAAC,GAAD,cClMGyuB,GArhBY,SAAC,GAMrB,IALLC,EAKI,EALJA,eACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,WACA1E,EAEI,EAFJA,YACAC,EACI,EADJA,WAEQ1jB,EAAeF,KAAfE,WAGR,EAAkC1E,mBAAS,IAA3C,oBAAOqoB,EAAP,KAAkBC,EAAlB,KAGA,EAA4CtoB,oBAAS,GAArD,oBAAOuoB,EAAP,KAAuBC,EAAvB,KAGA,EAAoCxoB,mBAAS,IAA7C,oBAAO2nB,EAAP,KAAmBmF,EAAnB,KAEQvsB,EAAoBC,cAApBD,gBAGR,EAAwCP,mBAAS,IAAjD,oBAAO8oB,EAAP,KAAqBC,EAArB,KAEMtoB,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAKEqsB,EAAe,SAACtrB,GAEM,gBAAtBA,EAAMyB,OAAOnR,MACfy2B,GAAkB,GAEpBsE,EAAc,2BAAKnF,GAAN,mBAAmBlmB,EAAMyB,OAAOnR,KAAO0P,EAAMyB,OAAOjI,SACjEjC,QAAQC,IAAIwI,EAAMyB,OAAOnR,MACzBiH,QAAQC,IAAI,wBAAUwI,EAAMyB,OAAOjI,QAI/BouB,EAAM,yCAAG,WAAO5nB,EAAO6nB,GAAd,sBAAA7qB,EAAA,yDACQ,IAAjBgD,EAAMnM,QAAmC,IAAnBg0B,EAAQh0B,OADrB,iEAMPirB,EAAM,OAEY,eAAlB9e,EAAM,GAAG3B,KACXygB,EAAM,OACqB,cAAlB9e,EAAM,GAAG3B,KAClBygB,EAAM,OACqB,cAAlB9e,EAAM,GAAG3B,KAClBygB,EAAM,OACqB,eAAlB9e,EAAM,GAAG3B,OAClBygB,EAAM,SAGFC,EAAYC,eAASF,EAEvByH,EAAY,CACdtuB,aAAcyuB,EAAYzuB,aAC1B8mB,YACAE,cAAe4I,EAAQ,IAvBd,SA0BLvB,GAAkBC,GA1Bb,OA2BLgF,EA3BK,WA2BehF,EAAUtuB,aA3BzB,YA2ByCsuB,EAAUxH,WAC9DsM,GAAc,SAACjpB,GAAD,mBAAC,eACVA,GADS,IAEZ4mB,YAAauC,OA9BJ,yDAoCXvsB,EAAY,QAAS,yIApCV,6EAAH,wDA0CZG,qBAAU,WACJ+rB,IACFG,EAAc,CACZ94B,SAAU64B,EAAW74B,SACrBwF,WAAYqzB,EAAWrzB,WACvBywB,UAAW4C,EAAW5C,UACtBxwB,gBAAiBozB,EAAWpzB,gBAC5B0wB,aAAc0C,EAAW1C,aACzBE,YAAawC,EAAWxC,YACxBE,YAAasC,EAAWtC,YACxBK,YAAaiC,EAAWjC,YACxBrxB,YAAaszB,EAAWtzB,YACxBkxB,YAAaoC,EAAWpC,YACxBC,mBAAoBmC,EAAWnC,qBAEjC1xB,QAAQC,IAAI,eAAgB4zB,GAC5BvE,EAAauE,EAAWpzB,oBAEzB,CAACkzB,IAEJ,IAAM3vB,EAAWsD,cACXwmB,EAAgB3mB,aAAY,SAAC5N,GAAD,OAAWA,EAAMiK,OAAO9H,eAC1D,EAAwCyL,aACtC,SAAC5N,GAAD,OAAWA,EAAMiK,OAAO9D,eADlBC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,aAKvBgI,qBAAU,WACR5H,QAAQC,IAAI,eAAgB6vB,GAC5BgE,EAAc,2BACTnF,GADQ,IAEXiD,YAAa9B,OAEd,CAACA,IAGJloB,qBAAU,WACR5H,QAAQC,IAAI,kBAAmBovB,GAC/ByE,EAAc,2BACTnF,GADQ,IAEXluB,gBAAiB4uB,OAElB,CAACA,IAGJznB,qBAAU,WACRksB,EAAc,2BACTnF,GADQ,IAEXwC,aAAcxxB,EACd0xB,YAAazxB,OAEd,CAACD,EAAeC,IAGnB,IAAM+wB,EAAY,yCAAG,WAAOloB,GAAP,wBAAAhD,EAAA,yDACnBgD,EAAMmoB,iBADa,SAQXG,EACJ,+DAEIe,EANJ,uEAM+BpB,KAAK/B,EAAWpuB,aAC3CyxB,EAAajB,EAAUL,KAAK/B,EAAWsC,WAGzCgD,GAAY,EAEZtF,EAAWpuB,cAAgBszB,EAAWtzB,cACxC0zB,GAAY,GAEdj0B,QAAQC,IAAI,iDAAesvB,GAEtB0E,EAtBY,oBAuBV1E,EAvBU,wBAwBb9nB,EAAY,QAAS,gFAxBR,sDA2BLqqB,EA3BK,wBA4BfrqB,EAAY,QAAS,8GA5BN,8BA8BoB,KAA1BknB,EAAWnuB,WA9BL,wBA+BfiH,EAAY,QAAS,sDA/BN,8BAiCLuqB,EAjCK,wBAkCfvqB,EACE,QACA,KApCa,8BAwCa,KAA5BknB,EAAWwC,cACgB,KAA3BxC,EAAW0C,YAzCI,wBA2Cf5pB,EAAY,QAAS,gHA3CN,8BA6CqB,KAA3BknB,EAAW4C,YA7CL,wBA8Cf9pB,EAAY,QAAS,uIA9CN,8BAgDqB,KAA3BknB,EAAWiD,YAhDL,wBAiDfnqB,EAAY,QAAS,6FAjDN,kCAoDjBzH,QAAQC,IAAI,aAAc0uB,GApDT,UAqDXC,GAAiBD,GArDN,QAuDjBlnB,EAAY,UAAW,sFACvB2nB,IACAwE,GAAgB,GAzDC,0DA6DDnoB,KAFR9D,EAAY,KAAMI,SAASrL,KAA3BiL,SA3DS,wBA8DfF,EACE,QACA,gJAhEa,kCAqEjBA,EAAY,QAASE,GArEJ,6EAAH,sDA2EZ8oB,EAAkB,yCAAG,+BAAAhrB,EAAA,yDACM,KAA3BkpB,EAAWpuB,YADU,uBAEvBkH,EAAY,QAAS,kEAFE,6BAQvB,uEAE+BipB,KAAK/B,EAAWpuB,aAVxB,uBAYvBkH,EAAY,QAAS,8GAZE,sCAiBnBknB,EAAWpuB,cAAgBszB,EAAWtzB,YAjBnB,kCAkBE0uB,GAAeN,EAAWpuB,aAlB5B,iBAkBb7D,EAlBa,EAkBbA,KACRsD,QAAQC,IAAI,gDAAcvD,GAC1B+K,EAAY,UAAW,+EApBF,QAsBvB+nB,GAAkB,GAtBK,yDAwBvB/nB,EAAY,QAAS,yIAxBE,6EAAH,qDAqCxBG,qBAAU,gBACW6D,IAAfC,GACF1L,QAAQC,IAAI,wBAAyByL,KAEtC,CAACA,IAEJ,IAAMwC,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvD4mB,EAAgBzlB,KAGlB,OACE,eAAC,WAAD,UACE,eAACE,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMwlB,EACNplB,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,uBAAMgkB,SAAUvB,EAAhB,SACE,gBAAC,GAAD,CAAqBjlB,WAAYA,EAAjC,UACE,gBAAC,GAAD,CAAcA,WAAYA,EAA1B,UACE,4EAAgBmoB,EAAWrzB,WAA3B,YACA,+BACE,eAAC,KAAD,CACE+F,KAAM,GACN8E,QAAS,kBAAMuoB,GAAgB,WAKrC,gBAACpqB,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAGpI,MAAO,CAAEqD,QAAS,QAA9C,UACE,eAACF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,gBAACuoB,GAAA,EAAD,CAAa9rB,MAAO,CAAErB,MAAO,QAAU0C,QAAQ,WAA/C,UACE,eAAC0qB,GAAA,EAAD,CAAYn4B,GAAG,aAAf,0BACA,gBAACo4B,GAAA,EAAD,CACEC,QAAQ,aACRr4B,GAAG,eACHsf,MAAM,eACNtX,MAAOotB,EAJT,UAME,eAACkD,GAAA,EAAD,CACEtwB,MAAM,cACNoJ,QAAS,kBAAMikB,EAAa,gBAF9B,0BAMA,eAACiD,GAAA,EAAD,CACEtwB,MAAM,aACNoJ,QAAS,kBAAMikB,EAAa,eAF9B,gCAMA,eAACiD,GAAA,EAAD,CACEtwB,MAAM,iBACNoJ,QAAS,kBAAMikB,EAAa,mBAF9B,wCASN,eAAC9lB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,kCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,cACL+T,SAAUinB,EACV9xB,MAAO0sB,EAAWpuB,aAAe,OAGrC,eAACiJ,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CACEnD,QAAQ,YACRoG,QAAS,kBAAMolB,KAFjB,yCAOF,eAACjnB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,aACLkJ,MAAO0sB,EAAWnuB,YAAc,GAChCsM,SAAUinB,MAGd,eAACvqB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,wCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,YACLkJ,MAAO0sB,EAAWsC,WAAa,GAC/BnkB,SAAUinB,MAGd,eAACvqB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,GACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAKF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,eACL4T,YAAY,4BACZ1K,MAAO0sB,EAAWwC,cAAgB,GAClCrkB,SAAUinB,EACVhqB,UAAQ,MAGZ,eAACP,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CACEnD,QAAQ,YACRoG,QAAS,kBAAMrH,EAASxE,IAAgBsuB,KAF1C,yCAOF,eAACtkB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,cACL4T,YAAY,eACZ1K,MAAO0sB,EAAW0C,aAAe,GACjCvkB,SAAUinB,EACVhqB,UAAQ,MAGZ,eAACP,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,cACL4T,YAAY,kEACZ1K,MAAO0sB,EAAW4C,aAAe,GACjCzkB,SAAUinB,SAKhB,iCACE,eAAC,GAAD,CAAkBrsB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,gCAGA,eAAC,KAAD,CACE3N,KAAK,cACL+5B,UAAU,EACVC,WAAW,iEACXjmB,SAAUujB,EACV2C,aAAc,CAAC,OAAQ,OAAQ,SAC/BC,cAAc,0GACdC,cAAc,mFACd3Z,MAAM,+FACN4Z,YAAa,QACbC,aAAW,EACXC,aAAW,OAGf,iCACE,eAAC,GAAD,CAAkB3rB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,sCAGA,eAAC4sB,GAAA,EAAD,CACEv6B,KAAK,qBACLkJ,MAAO0sB,EAAW+C,oBAAsB,GACxC5kB,SAAUinB,EACVxa,MAAM,oFACNga,WAAS,EACTjrB,KAAM,EACNZ,QAAQ,WACRqQ,WAAS,OAGb,uBACE1R,MAAO,CACL2C,UAAW,GACXd,QAAS,OACTE,WAAY,UAJhB,UAOE,eAAC,GAAD,CACEV,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAE0T,YAAa,IAJxB,sCAQA,eAAC,KAAD,CAAcjN,SAnQN,SAAC5H,EAAOuD,GACtBvD,IACF6qB,EAAgB7qB,EAAMsuB,KACtBxzB,QAAQC,IAAIiF,EAAMsuB,SAiQV,eAAC5hB,GAAA,EAAD,CACEvL,MAAO,CACLrB,MAAO,GACPqD,OAAQ,GACRuR,WAAY,GACZlI,gBAAiBid,EAAWiD,aAAe,SAKjD,sBACEvrB,MAAO,CACL+S,SAAU,QACVU,OAAQ,GACR2Z,MAAO,GACPvrB,QAAS,OACTC,eAAgB,YANpB,SASE,eAAC,GAAD,CAAcrB,KAAK,SAAS7B,QAAQ,YAApC,yCAIF,eAAC,GAAD,cCniBN6N,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZygB,aAAc,UAEhB5V,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QA8HlB8a,GA1HK,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,YAAaC,EAA2C,EAA3CA,aAAcoK,EAA6B,EAA7BA,WAAYzE,EAAiB,EAAjBA,WACtD3b,EAAUX,KACRpH,EAAeF,KAAfE,WACAnE,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAQEwsB,EAAY,yCAAG,+BAAAzuB,EAAA,+EAEcopB,GAAagF,EAAW74B,UAFtC,gBAET0B,EAFS,EAETA,KAFS,EAEH6C,OACdS,QAAQC,IAAIvD,GACZsD,QAAQC,IAAI4zB,EAAW74B,UACvByM,EAAY,UAAW,+CACvB2nB,IANiB,kDAQjB3nB,EAAY,QAAS,2FARJ,QAUnBgiB,GAAa,GAVM,0DAAH,qDAalB,OACE,eAAC,WAAD,UACE,eAAC1V,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAMqb,EACNhb,QAtBc,WAClBib,GAAa,IAsBTzV,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbhD,QAAS,KAEX9K,MAAO,CACL8B,eAAgB,UAVpB,SAaE,eAAC,GAAD,CAAY+I,GAAIsY,EAAhB,SACE,sBACEre,UAAWsI,EAAQR,MACnB5M,MAAO,CAAE6B,QAAS,OAAQS,cAAe,UAF3C,SAIE,gBAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,UACE,gBAAC,GAAD,CAAc1B,WAAYA,EAA1B,UACE,gBAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,+CACYmtB,EAAWrzB,WADvB,YAGA,+BACE,eAAC4K,GAAA,EAAD,UACE,eAAC,KAAD,CACE7E,KAAM,GACN8E,QAAS,kBAAMoe,GAAa,aAKpC,uBACEpjB,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZO,cAAe,UALnB,UAQE,eAAC,GAAD,CAAkBjB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,sEAIA,sBACEL,MAAO,CACLuC,SAAU,QACVV,QAAS,QAHb,SAME,sBACEW,IAAI,mDACJC,IAAI,YACJ9D,MAAM,cAIZ,uBACEqB,MAAO,CACL2C,UAAW,OACXc,aAAc,OACd8P,WAAY,QACZ1R,QAAS,OACTE,WAAY,UANhB,UASE,eAAC,GAAD,CACEnD,QAAQ,mBACRC,MAAM,QACNF,MAAM,KACNqG,QAAS,kBAAM6oB,KACfhsB,QAAQ,OALV,0BASA,eAAC,GAAD,CACEjD,QAAQ,2BACRC,MAAM,QACNF,MAAM,KACNqG,QAAS,kBAAMoe,GAAa,IAJ9B,yC,yCC3IVxjB,GAAWC,aAAH,iGAiBCiuB,GAXO,SAAC,GAAD,IAAG/tB,EAAH,EAAGA,UAAH,OACpB,sBAAKC,MAAO,CAAErB,MAAO,OAAQkD,QAAS,QAAtC,SACE,eAAC,KAAD,CACEhD,MAAM,YACNoB,QAASF,EACTF,IAAKD,GACLM,KAAM,QCshBG6tB,GAxfI,WACjB,MAA8BptB,oBAAS,GAAvC,oBAAOiH,EAAP,KAAiByC,EAAjB,KACA,EAA0C1J,oBAAS,GAAnD,oBAAO2sB,EAAP,KAAuBC,EAAvB,KACA,EAAkC5sB,mBAAS,IAA3C,oBAAO8G,EAAP,KAAkBpB,EAAlB,KAEA,EAAwC1F,mBAAS,IAAjD,oBAAOqtB,EAAP,KAAqBC,EAArB,KACA,EAA4BttB,mBAAS,IAArC,oBAAOxD,EAAP,KAAe+wB,EAAf,KAGA,EAAwBvtB,mBAAS,GAAjC,oBAAOgP,EAAP,KAAagS,EAAb,KACA,EAAsChhB,mBAAS,GAA/C,oBAAO4U,EAAP,KAAoBqM,EAApB,KAEA,EAAoCjhB,oBAAS,GAA7C,oBAAOwiB,EAAP,KAAoBC,EAApB,KACQliB,EAAoBC,cAApBD,gBAGR,EAAgCP,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAGMkoB,EAAchoB,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAnBjC,SAsBR8uB,IAtBQ,6EAsBvB,+BAAA3pB,EAAA,+EAEmC8oB,GAC7BY,EAAYzuB,cAHlB,gBAEYhE,EAFZ,EAEYA,KAFZ,EAEkB6C,OAGdg1B,EAAU73B,EAAKA,MACfuK,GAAW,GANf,kDAQIQ,EAAY,QAAS,mEACrBR,GAAW,GATf,2DAtBuB,oEAoCvB,WAAgCutB,GAAhC,oBAAA/uB,EAAA,yDAC+B,KAAzB+uB,EAAcC,aAAmChpB,IAAlB+oB,EADrC,wDAIM/F,EAAmB,CACrBjuB,WAAYg0B,EACZ9zB,aAAcyuB,EAAYzuB,cAN9B,kBAUmC8tB,GAC7BC,GAXN,mBAUY/xB,EAVZ,EAUYA,KAVZ,EAUkB6C,QAGV7C,EAbR,iBAeM63B,EAAU73B,EAAKA,MAfrB,+BAkBM+K,EAAY,QAAS,4DAlB3B,6EAsBIzH,QAAQC,IAAI,KAAM8H,SAASrL,MAC3B+K,EAAY,QAAS,4DAvBzB,2DApCuB,sBAgEvBG,qBAAU,WACRX,GAAW,GACXmoB,MACC,IAEH,IAAM3nB,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAgBEgtB,EAAkB,yCAAG,WAAOb,GAAP,kBAAApuB,EAAA,+EAEQqpB,GAAkB+E,EAAW74B,UAFrC,gBAEf0B,EAFe,EAEfA,KAFe,EAET6C,OACdS,QAAQC,IAAI,oCAAYvD,GACxB+K,EACE,UADS,UAENosB,EAAWrzB,WAFL,mHAJY,kDASvBiH,EAAY,QAAS,+EATE,0DAAH,sDA4BxB,OAPAG,qBAAU,WACR5H,QAAQC,IAAI6N,GACZka,EAAQ,GA9Ga,oCA+GrB2M,CAAiB7mB,GACjB9N,QAAQC,IAAI,sEACX,CAAC6N,IAGF,iCACG1H,GACC,sBACEC,MAAO,CACLrB,MAAO,OACPqD,OAAQ,OACRH,QAAS,OACTC,eAAgB,SAChBC,WAAY,UANhB,SASE,eAAC,GAAD,OAGFhC,GACA,gBAAC,WAAD,WACE,yBACEC,MAAO,CACL+S,SAAU,SACVC,IAAK,EACL3H,gBAAiB,QACjBC,OAAQ,GALZ,SAQE,eAAC,GAAD,MAEF,gCACE,eAACnI,GAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,gBAAC,GAAD,WACE,oDACA,uEAEF,wBACA,gBAACJ,GAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG0C,GAAI,EAAtB,SACE,eAAC,GAAD,CACEI,aAAcA,EACdC,YAAY,kFAGhB,eAACnD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG0C,GAAI,EAAtB,SACE,eAAClB,GAAA,EAAD,CACElG,MAAM,UACNqB,KAAK,SACL8E,QA9DF,WACpB2c,EAAQ,GACRtb,EAAa,IACb0iB,KA4DsB/oB,MAAO,CAAEuT,WAAY,OAAQ5Q,UAAW,QAJ1C,SAME,eAAC,KAAD,QAGJ,eAACQ,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJ0C,GAAI,EACJjG,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZD,eAAgB,YAPpB,SAUmC,iBAAhCgnB,EAAY1uB,iBACmB,kBAAhC0uB,EAAY1uB,gBACV,eAAC,GAAD,CACEuE,MAAM,QACNC,QAAQ,kBACRC,MAAM,QACNmG,QAAS,kBAAMqF,GAAU,SAAC7F,GAAD,OAAgBA,MAJ3C,0BAQE,OAEN,eAACrB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAACgI,GAAA,EAAD,UACE,eAACjC,GAAA,EAAD,CACEtJ,MAAO,CAAE2C,UAAW,OAAQc,aAAc,QAD5C,SAGE,gBAAC8F,GAAA,EAAD,CACEvJ,MAAO,CAAE8M,SAAU,QAASgJ,UAAW,UADzC,UAGE,eAACtM,GAAA,EAAD,UACE,gBAACG,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,CACE/G,UAAU,KACV1C,MAAO,CACL8M,SAAU,OACVgJ,UAAW,UAJf,0BASA,eAACrM,GAAA,EAAD,CACE/G,UAAU,KACV1C,MAAO,CACL8M,SAAU,OACVgJ,UAAW,YAGf,gBAACrM,GAAA,EAAD,CACE/G,UAAU,KACV1C,MAAO,CACL8M,SAAU,QACVgJ,UAAW,UAJf,yBAOK,IAPL,8BAUE,iBADDgT,EAAY1uB,iBAGX,kBADF0uB,EAAY1uB,gBAEV,gBAACqP,GAAA,EAAD,CACE/G,UAAU,KACV1C,MAAO,CACL8M,SAAU,QACVgJ,UAAW,UAJf,+BAOM,IAPN,wBAUA,gBAAC,WAAD,WACE,eAACrM,GAAA,EAAD,CACE/G,UAAU,KACV1C,MAAO,CACL8M,SAAU,QACVgJ,UAAW,UAJf,gCASA,eAACrM,GAAA,EAAD,CACE/G,UAAU,KACV1C,MAAO,CACL8M,SAAU,QACVgJ,UAAW,UAJf,mCAWJ,eAACrM,GAAA,EAAD,CACE/G,UAAU,KACV1C,MAAO,CACL8M,SAAU,QACVgJ,UAAW,UAJf,0BAUE,iBADDgT,EAAY1uB,iBAGX,kBADF0uB,EAAY1uB,gBAEV,gBAAC,WAAD,WACE,eAACqP,GAAA,EAAD,CACE/G,UAAU,KACV1C,MAAO,CACL8M,SAAU,QACVgJ,UAAW,YAUf,eAACrM,GAAA,EAAD,CACE/G,UAAU,KACV1C,MAAO,CACL8M,SAAU,QACVgJ,UAAW,eAIf,UAGR,eAACpM,GAAA,EAAD,UACGvM,EACE4Y,MACCpG,EAAO4F,GACN5F,EAAO,GAAK4F,GAEd5hB,KAAI,SAAC0C,GAAD,OACH,gBAAC,WAAD,WACGsD,QAAQC,IAAI,mBAAoBvD,GACjC,gBAACsT,GAAA,EAAD,CAAUwK,MAAM,OAAhB,UACE,gBAAC1K,GAAA,EAAD,CAAW/G,UAAU,KAArB,UAEI,iBADDrM,EAAK+D,iBACc,qBAElB,kBADD/D,EAAK+D,iBACe,qBAEnB,gBADD/D,EAAK+D,iBACa,eAEjB,mBADD/D,EAAK+D,iBACgB,qBAEpB,eADD/D,EAAK+D,iBACY,wBAEpB,eAACqP,GAAA,EAAD,CAAW/G,UAAU,KAArB,SACwB,OAArBrM,EAAK+0B,aACsB,KAA5B/0B,EAAK+0B,YAAYgD,OACf,eAAC9J,GAAA,EAAD,CACE9hB,IAAG,UAAKjG,gCAAL,uBAAqDlG,EAAK+0B,eAG/D,eAAC9G,GAAA,EAAD,CACEtkB,MAAO,CACLqL,gBACEhV,EAAKk1B,iBAKf,gBAAC9hB,GAAA,EAAD,CAAW/G,UAAU,KAArB,UACE,oBACE1C,MAAO,CACLyD,aAAc,YAFlB,SAKGpN,EAAK8D,aAER,eAACoO,GAAA,EAAD,IACA,qBACEvI,MAAO,CACL2C,UAAW,YAFf,UAKG,IACAtM,EAAKw0B,kBAIR,iBADD/B,EAAY1uB,iBAGX,kBADF0uB,EAAY1uB,gBAEV,gBAACqP,GAAA,EAAD,CAAW/G,UAAU,KAArB,UACE,oBACE1C,MAAO,CACLyD,aAAc,YAFlB,SAKGpN,EAAK6D,cAER,eAACqO,GAAA,EAAD,IACA,qBACEvI,MAAO,CACL2C,UAAW,YAFf,UAKG,IACAtM,EAAKu0B,gBAIV,gBAAC,WAAD,WACE,eAACnhB,GAAA,EAAD,CAAW/G,UAAU,KAArB,SACGrM,EAAK6D,cAER,eAACuP,GAAA,EAAD,CAAW/G,UAAU,KAArB,SACGrM,EAAKu0B,eAIZ,gBAACnhB,GAAA,EAAD,CAAW/G,UAAU,KAArB,UACGrM,EAAK20B,YADR,KACuB,IACpB30B,EAAK60B,eAGN,iBADDpC,EAAY1uB,iBAGX,kBADF0uB,EAAY1uB,gBAEV,gBAAC,WAAD,WACE,eAACqP,GAAA,EAAD,CAAW/G,UAAU,KAArB,SACE,eAAC,GAAD,CACE9D,QAAQ,mBACRC,MAAM,QACNmG,QAAS,WACPuoB,GACE,SAAC/oB,GAAD,OAAgBA,KAElBypB,EAAgB53B,IAPpB,4BA2BF,eAACoT,GAAA,EAAD,CAAW/G,UAAU,KAArB,SACE,eAAChE,GAAA,EAAD,CACEwB,KAAK,QACLtB,QAAQ,2BACRC,MAAM,QACNmG,QAAS,WACPqpB,EAAmBh4B,IAErBk4B,QAAS,eAAC,KAAD,IAPX,8DAaF,UAnIOl4B,EAAK1B,eAwI1B,eAAC65B,GAAA,EAAD,UACE,eAAC7kB,GAAA,EAAD,UACE,eAACqM,GAAA,EAAD,CACE7f,MAAOgH,EAAOlH,OACd0Z,KAAMA,EACN4F,YAAaA,EACb8M,aArXT,SAACjgB,EAAOkgB,GAC/BX,EAAQW,IAqXwBC,oBAjXF,SAACngB,GAC/Bwf,EAAevG,SAASjZ,EAAMyB,OAAOjI,MAAO,KAC5C+lB,EAAQ,IAkXwBS,mBAAoB,CAAC,EAAG,GAAI,sBAe5C,eAAC,GAAD,CACExa,SAAUA,EACVyC,UAAWA,EACXye,YAAaA,EACbC,WAAYA,IAOd,eAAC,GAAD,CACEuE,eAAgBA,EAChBC,gBAAiBA,EACjBC,WAAYQ,EACZlF,YAAaA,EACbC,WAAYA,IAGd,eAAC,GAAD,CACE5F,YAAaA,EACbC,aAAcA,EACdoK,WAAYQ,EACZjF,WAAYA,sBCvWnB0F,I,OAjKK,WAElB,IAAM9wB,EAAWsD,cACXytB,EAAe5tB,aAAY,SAAC5N,GAAD,OAAWA,EAAMiK,OAAO3D,UAEzD,EAA4CmH,mBAAS,CACnDopB,MAAM,EACND,QAAQ,IAFV,8BAKAvoB,qBAAU,WACP5D,EAAS9D,GAAgB,WACzB,CAAC8D,IAGJ,IAAM+vB,EAAe,SAACh7B,GAmBpBiL,EAAS9D,GAAgBnH,KAK3B,OACE,eAAC,WAAD,UACE,gCACE,eAACyQ,GAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGxC,GAAI,EAAGyC,GAAI,GAArC,SACE,+BACE,uBACEjG,MAAO,CAAE6B,QAAS,OAAQU,SAAU,QAASP,OAAQ,QADvD,UAGE,gBAAC,GAAD,CACEpD,QAAQ,gBACRoB,MAAO,CACL6B,QAAS,OACTE,WAAY,UAEdiD,QAAS,kBAAM0oB,EAAa,SAN9B,UAQoB,WAAjBgB,GACC,gBAAC,WAAD,WACE,eAAC,KAAD,CAAc7vB,MAAM,mBAAmBqB,KAAM,KAC7C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CAAEnB,MAAO,QAASX,WAAY,QAHvC,sCAUY,SAAjBwwB,GACC,gBAAC,WAAD,WACE,eAAC,KAAD,CAAc7vB,MAAM,kBAAkBqB,KAAM,KAC5C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,kBACPX,WAAY,QALhB,yCAcR,gBAAC,GAAD,CACEU,QAAQ,gBACRoB,MAAO,CACL6B,QAAS,OACTE,WAAY,UAEdiD,QAAS,kBAAM0oB,EAAa,WAN9B,UAQoB,SAAjBgB,GACC,gBAAC,WAAD,WACE,eAAC,KAAD,CAAgB7vB,MAAM,mBAAmBqB,KAAM,KAC/C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CAAEnB,MAAO,QAASX,WAAY,QAHvC,wCAUY,WAAjBwwB,GACC,gBAAC,WAAD,WACE,eAAC,KAAD,CAAgB7vB,MAAM,kBAAkBqB,KAAM,KAC9C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,kBACPX,WAAY,QALhB,0DCxIlBuO,GAAYC,cAAW,SAAC3O,GAAD,MAAY,CACvC4O,MAAO,CACL9K,QAAS,OACTE,WAAY,SACZD,eAAgB,UAElB8K,MAAO,CACLC,UAAW,QACXC,SAAU,QACVvK,SAAU,QACVR,WAAY,SACZD,eAAgB,SAChBuJ,gBAAiBtN,EAAMgP,QAAQC,WAAWJ,MAC1CvE,OAAQ,6BACR4E,UAAWlP,EAAMmP,QAAQ,GACzB7J,QAAStF,EAAMqK,QAAQ,EAAG,EAAG,QA6ElBumB,GAzEM,SAAC,GAAoD,IAAlDlH,EAAiD,EAAjDA,cAAemH,EAAkC,EAAlCA,eAAeC,EAAmB,EAAnBA,aAC9CzhB,EAAUX,KACRpH,EAAeF,KAAfE,WA6BR,OACE,eAAC,WAAD,UACE,eAACqI,GAAA,EAAD,CACE5I,UAAWsI,EAAQT,MACnB7E,KAAM2f,EACNtf,QAAS,kBAPWymB,GAAe,IAQnCjhB,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbhD,QAAS,KAPb,SAUE,eAAC,GAAD,CAAYD,GAAI4c,EAAhB,SACE,uBACE3iB,UAAWsI,EAAQR,MACnB5M,MAAO,CACL6B,QAAS,OACTS,cAAe,UAJnB,UAOE,eAAC,GAAD,CAAqB+C,WAAYA,EAAYrF,MAAO,CAAE+G,KAAM,GAA5D,SACE,gBAAC,GAAD,CAAc1B,WAAYA,EAA1B,UACE,eAAC,GAAD,CAAkBhE,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,sCAGA,+BACE,eAAC0E,GAAA,EAAD,CACEC,QAAS,kBAAM4pB,GAAe,IADhC,SAGE,eAAC,KAAD,CAAgB1uB,KAAM,cAK9B,eAAC,KAAD,CAAUwnB,WA3DG,SAACrxB,GAEtB,IAAI2xB,EAAc3xB,EAAKsxB,QACnBM,EAAe,GAEM,MAArB5xB,EAAKuxB,cACY,KAAfvxB,EAAKwxB,QACPI,GAAgB5xB,EAAKwxB,OAGG,KAAtBxxB,EAAKyxB,eACPG,GACmB,KAAjBA,EAAA,YAA2B5xB,EAAKyxB,cAAiBzxB,EAAKyxB,cAE1DE,GAAgC,KAAjBC,EAAA,YAA2BA,EAA3B,KAA6C,IAE9D,IAAM6G,EAAaz4B,EAAK0xB,SAExB8G,EAAa,CAAE7G,cAAa8G,eAE5BF,GAAe,gBCiVJG,GArXO,SAAC,GAIhB,IAHLnnB,EAGI,EAHJA,SACAyC,EAEI,EAFJA,UACA2kB,EACI,EADJA,WAGMx1B,EAASsH,aAAY,SAAC5N,GAAD,OAAWA,EAAMiK,OAAO3D,UAG7CS,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAChD0D,EAAWsD,cACToE,EAAeF,KAAfE,WAGR,EAAwC1E,oBAAS,GAAjD,oBAAO8mB,EAAP,KAAsBmH,EAAtB,KAGA,EAA4CjuB,mBAAS,IAAIkZ,MAAzD,oBAAOwP,EAAP,KAAqBC,EAArB,KACQpoB,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAKJ,EAAgCV,mBAAS,CACvCpM,YAAa,GACb06B,WAAY,GACZx6B,aAAc,GACd4f,aAAc,GACdC,aAAc,GACdC,cAAe,GACfH,WAAY,GACZ8a,cAAe,GACfC,cAAe,GACf36B,cAAe,GACf46B,WAAY,GACZ/0B,aAAc,KAZhB,oBAAOmV,EAAP,KAAkBja,EAAlB,KAeAgM,qBAAU,gBACW6D,IAAfC,GACF1L,QAAQC,IAAI,wBAAyByL,KAEtC,CAACA,IAGJ,IAAMwC,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvD0D,EAAUvC,KAGNunB,EAAc,yCAAG,iCAAAjwB,EAAA,yDAErBoQ,EAAU/a,aAAemlB,KAAOyP,GAAcvP,OAAO,cACrDtK,EAAUyf,WAAarV,KAAOyP,GAAcvP,OAAO,cACnDtK,EAAU4f,WAAaxV,KAAO,IAAIC,MAAQC,OAAO,yBAEnB1U,IAA1BoK,EAAUjb,aAAuD,KAA1Bib,EAAUjb,YANhC,uBAOnB6M,EAAY,QAAS,4DAPF,6BAWN,KAAX5H,EAXiB,wBAYnB4H,EAAY,QAAS,4DAZF,2BAenBoO,EAAUhb,cAAgBgF,EAfP,WAkBU,KAA3BgW,EAAU/a,aAlBO,wBAmBnB2M,EAAY,QAAS,wEAnBF,8BAsBT,qCACHipB,KAAK7a,EAAU4E,YAvBH,wBAwBnBhT,EAAY,QAAS,sFAxBF,8BA8BnByW,OAAOwD,SAAS7L,EAAU0f,iBAAmBI,YACjBlqB,IAA5BoK,EAAU0f,cA/BS,wBAiCnB9tB,EAAY,QAAS,gFAjCF,8BAqCnByW,OAAOwD,SAAS7L,EAAU2f,iBAAmBG,YACjBlqB,IAA5BoK,EAAU2f,cAtCS,wBAwCnB/tB,EAAY,QAAS,sFAxCF,mCA4CSgE,IAA5BoK,EAAU+E,oBACiBnP,IAA3BoK,EAAU6E,aA7CS,wBA+CnBjT,EAAY,QAAS,4DA/CF,kCAkDrBoO,EAAUnV,aAAeJ,EAAUI,aACnCV,QAAQC,IAAI4V,GAnDS,oBAsDIsE,GAAoBtE,GAtDxB,iBAsDXnZ,EAtDW,EAsDXA,KACRsD,QAAQC,IAAIvD,EAAKA,MACjB+K,EAAY,UAAW,kEACvB4tB,GAAW,GACXz5B,EAAW,IACXoI,EAAS9D,GAAgB,KACzByvB,EAAoB,IAAIzP,MACxBxP,GAAU,GA7DS,mDA+DX/I,EAAY,KAAMI,SAASrL,KAA3BiL,QACR3H,QAAQC,IAAI0H,GACZF,EAAY,QAASE,GAjEF,2DAAH,qDAsEdosB,EAAe,SAACtrB,GACpB7M,EAAW,2BACNia,GADK,mBAEPpN,EAAMyB,OAAOnR,KAAO0P,EAAMyB,OAAOjI,UAiBtC,OACE,gBAAC,WAAD,WACE,eAACoM,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,CAAqBxC,WAAYA,EAAjC,UACE,gBAAC,GAAD,CAAcA,WAAYA,EAA1B,UACE,4DACA,+BACE,eAAC,KAAD,CACEnF,KAAM,GACN8E,QAAS,WACPqF,GAAU,GACV9U,EAAW,IACXoI,EAAS9D,GAAgB,aAMjC,gBAACsJ,GAAA,EAAD,CACEC,WAAS,EACTgF,QAAS,EACTrG,WAAW,SACXiT,QAAQ,SACRhV,MAAO,CAAEqD,QAAS,QALpB,UAOE,eAACF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,cACL+T,SAAUinB,EACV1tB,MAAO,CAAErB,MAAO,WAGpB,eAACwE,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZY,UAAW,OANf,SASE,eAAC,GAAD,CAAkBtB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGvD,MAAO,CAAE2C,UAAW,OAAtC,SACE,eAAC,GAAD,MAGF,eAACQ,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CACEV,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAE2C,UAAW,MAAOc,aAAc,OAJ3C,wCASF,eAACN,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGvD,MAAO,CAAE2C,UAAW,MAAOc,aAAc,OAA3D,SACE,eAAC,KAAD,CACE0oB,eAAa,EACb5E,OAAO,OACPzN,OAAO,aACPsS,MAAO,CAAC,OAAQ,QAAS,QACzBxwB,MAAOytB,EACP5iB,SAAU6iB,MAId,eAACnmB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,kCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,aACL+T,SAAUinB,EACV1tB,MAAO,CAAErB,MAAO,WAGpB,eAACwE,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,0BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,gBACLsN,MAAO,CAAErB,MAAO,OAChB8H,SAAUinB,EACVjtB,KAAK,aAGT,eAAC0C,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,sCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,gBACLsN,MAAO,CAAErB,MAAO,OAChB8H,SAAUinB,EACVjtB,KAAK,aAGT,eAAC0C,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,GACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAKF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE+C,YAAY,2BACZ1K,MAAO4T,EAAU+E,eAAiB,GAClC7Q,UAAQ,MAGZ,eAACP,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CACEiD,QAAS,WAjMrB4pB,GAAe,IAkMHhwB,QAAQ,UAFV,yCAOF,eAACuE,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,CACE3H,MAAO4T,EAAU6E,cAAgB,GACjC/N,YAAY,0DACZ5C,UAAQ,MAGZ,eAACP,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,eACL+T,SAAUinB,EACVpnB,YAAY,yEAIlB,eAACnD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIvD,MAAO,CAAE2C,UAAW,OAAvC,SACE,sBAAK3C,MAAO,CAAE8iB,UAAW,UAAzB,SACE,eAAC,GAAD,CACElkB,QAAQ,UACRD,MAAM,MACNqB,MAAO,CAAEnB,MAAO,SAChBmG,QAASqqB,EAJX,gDAaR,eAAC,GAAD,CACE5H,cAAeA,EACfoH,aApOe,SAAC,GAAiC,IAA/B7G,EAA8B,EAA9BA,YAAa8G,EAAiB,EAAjBA,WACnCv5B,EAAW,2BACNia,GADK,IAER+E,cAAeua,EACfza,aAAc2T,MAiOZ4G,eAAgBA,QC3OTH,GA9IK,SAACc,GACnB,IAAM5xB,EAAWsD,cAEXzH,EAAS+1B,EAAYA,YAErBb,EAAc5tB,aAAY,SAAC5N,GAAD,OAAWA,EAAMiK,OAAO3D,UAIlDk0B,EAAe,SAACh7B,GAErBiL,EAAS9D,GAAgBnH,KAS1B,OANA6O,qBAAU,WACT5D,EAAS9D,GAAgBL,MACvB,CAACA,EAAQmE,IAKV,eAAC,WAAD,UACE,gCACE,eAACwF,GAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGxC,GAAI,EAAGyC,GAAI,GAArC,SACE,+BACE,uBACEjG,MAAO,CAAE6B,QAAS,OAAQU,SAAU,QAASP,OAAQ,QADvD,UAGE,gBAAC,GAAD,CACEpD,QAAQ,gBACRoB,MAAO,CACL6B,QAAS,OACTE,WAAY,UAEdiD,QAAS,kBAAM0oB,EAAa,SAN9B,UAQoB,WAAjBgB,GACC,gBAAC,WAAD,WACE,eAAC,KAAD,CAAc7vB,MAAM,mBAAmBqB,KAAM,KAC7C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CAAEnB,MAAO,QAASX,WAAY,QAHvC,sCAUY,SAAjBwwB,GACC,gBAAC,WAAD,WACE,eAAC,KAAD,CAAc7vB,MAAM,kBAAkBqB,KAAM,KAC5C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,kBACPX,WAAY,QALhB,yCAcR,gBAAC,GAAD,CACEU,QAAQ,gBACRoB,MAAO,CACL6B,QAAS,OACTE,WAAY,UAEdiD,QAAS,kBAAM0oB,EAAa,WAN9B,UAQoB,SAAjBgB,GACC,gBAAC,WAAD,WACE,eAAC,KAAD,CAAgB7vB,MAAM,mBAAmBqB,KAAM,KAC/C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CAAEnB,MAAO,QAASX,WAAY,QAHvC,wCAUY,WAAjBwwB,GACC,gBAAC,WAAD,WACE,eAAC,KAAD,CAAgB7vB,MAAM,kBAAkBqB,KAAM,KAC9C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,kBACPX,WAAY,QALhB,yDCsRTsxB,GAnYa,SAAC,GAKtB,IAJLlC,EAII,EAJJA,eACAC,EAGI,EAHJA,gBACAkC,EAEI,EAFJA,gBACAT,EACI,EADJA,WAEQ3pB,EAAeF,KAAfE,WAGR,EAA4C1E,mBAAS,IAAIkZ,MAAzD,oBAAOwP,EAAP,KAAqBC,EAArB,KAEM9vB,EAASsH,aAAY,SAAC5N,GAAD,OAAWA,EAAMiK,OAAO3D,UAC7CmE,EAAWsD,cACTC,EAAoBC,cAApBD,gBAEFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAKJ,EAAoDV,oBAAS,GAA7D,oBAAO+uB,EAAP,KAA4BC,EAA5B,KAGA,EAAgChvB,oBAAS,GAAzC,oBAAOivB,EAAP,KAAmBC,EAAnB,KAGA,EAAsClvB,mBAAS,IAA/C,oBAAOuC,EAAP,KAAoB4sB,EAApB,KAEAvuB,qBAAU,WACJ8D,IAAeoqB,GACjB91B,QAAQC,IAAI,wBAAyByL,KAEtC,CAACA,EAAYoqB,IAIhBluB,qBAAU,WACJ+rB,IACDhE,EAAoBmG,EAAgBh7B,cACpCq7B,EAAeL,MAEjB,CAACA,EAAiBnC,EAAgBpqB,EAAYzO,eAEjD,IAAMoT,EAAe,SAACC,GAAD,OAAU,SAAClE,IAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,KAIvDkpB,GAAU,GACVlyB,EAAS9D,GAAgB,KACzB0zB,EAAgBzlB,IALdgoB,EAAe,MASbC,EAAiB,yCAAG,+BAAA3wB,EAAA,yDAGtB8D,EAAY3O,cAAgBk7B,EAAgBl7B,aAC5C80B,IAAiBoG,EAAgBh7B,cACjCyO,EAAYmR,eAAiBob,EAAgBpb,cAC7CnR,EAAYqR,gBAAkBkb,EAAgBlb,eAC9CrR,EAAYkR,aAAeqb,EAAgBrb,YAC3ClR,EAAYgsB,gBAAkBO,EAAgBP,eAC9ChsB,EAAYisB,gBAAkBM,EAAgBN,eAC9CjsB,EAAYoR,eAAiBmb,EAAgBnb,cAC7CpR,EAAY1O,gBAAkBgF,EAXR,iCAepB0J,EAAY1O,cAAgBgF,EAC5B0J,EAAYzO,aAAemlB,KAAOyP,GAAcvP,OAAO,cAEvDgW,EAAe5sB,GAlBK,SAmBG6Q,GAAc7Q,GAnBjB,gBAmBZ7M,EAnBY,EAmBZA,KACRsD,QAAQC,IAAIvD,EAAKA,MACjB+K,EAAY,UAAW,mEACvBzD,EAAS9D,GAAgB,KACzBg2B,GAAU,GAvBU,kDAyBpBzuB,EAAY,QAAS,+EAzBD,gCA4BtBA,EAAY,QAAS,mEA5BC,0DAAH,qDA4CjB4uB,EAAqB,SAAC5tB,GAC1B0tB,EAAe,2BACV5sB,GADS,mBAEXd,EAAMyB,OAAOnR,KAAO0P,EAAMyB,OAAOjI,UA8BtC,OACE,gBAAC,WAAD,WACE,eAACoM,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMwlB,EACNplB,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,CAAqBxC,WAAYA,EAAjC,UACE,gBAAC,GAAD,CAAcA,WAAYA,EAA1B,UACE,yEACA,+BACE,eAAC,KAAD,CAAgBnF,KAAM,GAAI8E,QAzBb,WACvB6qB,GAAU,GACVlyB,EAAS9D,GAAgB,KACzB0zB,GAAgB,YAyBM,IAAfqC,EACC,gBAACzsB,GAAA,EAAD,CACEC,WAAS,EACTgF,QAAS,EACTrG,WAAW,SACXiT,QAAQ,SACRhV,MAAO,CAAEqD,QAAS,QALpB,UAOE,eAACF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,cACLkJ,MAAOsH,EAAY3O,YACnBkS,SAAUupB,EACVhwB,MAAO,CAAErB,MAAO,WAGpB,eAACwE,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZY,UAAW,OANf,SASE,eAAC,GAAD,CAAkBtB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGvD,MAAO,CAAE2C,UAAW,OAAtC,SACE,eAAC,GAAD,CAAsB4sB,YAAarsB,EAAY1O,kBAEjD,eAAC2O,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CACEV,QAAQ,KACRqB,UAAU,KACVrC,OAAQ,EACRL,MAAO,CAAE2C,UAAW,MAAOc,aAAc,OAJ3C,wCASF,eAACN,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CAAE2C,UAAW,MAAOc,aAAc,OAH3C,SAKE,eAAC,KAAD,CACE0oB,eAAa,EACb5E,OAAO,OACPzN,OAAO,aACPsS,MAAO,CAAC,OAAQ,QAAS,QACzBxwB,MAAOytB,EACP5iB,SAhHe,SAACqf,GAC9BnsB,QAAQC,IAAI,OAAQyvB,GACpB,IAAM4G,EAAQrW,KAAOkM,GAAMhM,OAAO,cAClCwP,EAAoB2G,QAiHV,eAAC9sB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,kCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,aACLkJ,MAAOsH,EAAYkR,WACnB3N,SAAUupB,EACVhwB,MAAO,CAAErB,MAAO,WAGpB,eAACwE,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,0BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,gBACLsN,MAAO,CAAErB,MAAO,OAChB/C,MAAOsH,EAAYgsB,cACnBzoB,SAAUupB,EACVvvB,KAAK,aAGT,eAAC0C,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,sCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,gBACLsN,MAAO,CAAErB,MAAO,OAChB/C,MAAOsH,EAAYisB,cACnB1oB,SAAUupB,EACVvvB,KAAK,aAGT,eAAC0C,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,GACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAKF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACE+C,YAAY,2BACZ1K,MAAOsH,EAAYqR,cACnB7Q,UAAQ,MAGZ,eAACP,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CACEiD,QAxMe,WAC7B2qB,GAAqB,IAwMP/wB,QAAQ,UAFV,yCAOF,eAACuE,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,CACE+C,YAAY,0DACZ1K,MAAOsH,EAAYmR,aACnB3Q,UAAQ,MAGZ,eAACP,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,CACE7Q,KAAK,eACL+T,SAAUupB,EACVp0B,OAC+B,IAA7BsH,EAAYoR,cACZpR,EAAYoR,aAEdhO,YAAY,sEAGhB,eAACnD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGvD,MAAO,CAAE2C,UAAW,OAAtC,SACE,sBAAK3C,MAAO,CAAE8iB,UAAW,UAAzB,SACE,eAAC,GAAD,CACElkB,QAAQ,UACRD,MAAM,MACNqB,MAAO,CAAEnB,MAAO,SAChBmG,QAAS+qB,EAJX,8CAYN,uBAAK/vB,MAAO,CAAE8iB,UAAW,UAAzB,UACE,+BACE,sBAAKtgB,IAAI,2BAA2BC,IAAI,aAE1C,+BACE,qBAAIzC,MAAO,CAAE0gB,WAAY,OAAQjd,aAAc,OAA/C,8EAIF,+BACE,eAAC,GAAD,CACE9E,MAAM,MACNC,QAAQ,UACRC,MAAM,QACNmG,QAhPM,WAClBgqB,GAAW,GACXzB,GAAgB,GAChBsC,GAAU,IAyOA,sFAeV,eAAC,GAAD,CACEpI,cAAeiI,EACfd,eAAgBe,EAChBd,aApSe,SAAC,GAAiC,IAA/B7G,EAA8B,EAA9BA,YAAa8G,EAAiB,EAAjBA,WACnCgB,EAAe,2BACV5sB,GADS,IAEZqR,cAAeua,EACfza,aAAc2T,EACd1T,aAAc,a,qBCtHd1U,GAAWC,aAAH,2FAYCqwB,GANM,SAAC,GAAD,IAAGnwB,EAAH,EAAGA,UAAH,OACnB,sBAAKC,MAAO,CAAErB,MAAO,QAArB,SACE,eAAC,KAAD,CAAaE,MAAM,MAAMoB,QAASF,EAAWF,IAAKD,GAAUM,KAAM,QC2TvDiwB,GArSK,WAElB,MAA8BxvB,oBAAS,GAAvC,oBAAOiH,EAAP,KAAiByC,EAAjB,KAGA,EAA0C1J,oBAAS,GAAnD,oBAAO2sB,EAAP,KAAuBC,EAAvB,KAGA,EAA8C5sB,mBAAS,IAAvD,oBAAO8uB,EAAP,KAAwBW,EAAxB,KAGA,EAAmCzvB,mBAAS,IAA5C,oBAAO0vB,EAAP,KAAoBC,EAApB,KAGA,EAAgC3vB,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAGA,EAAiCD,oBAAS,GAA1C,oBAAO4vB,EAAP,KAAmBvB,EAAnB,KAGM/0B,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAGtDsH,qBAAU,YACQ,yCAAG,+BAAAnC,EAAA,+EAEQuU,GAAgB1Z,EAAUI,cAFlC,gBAEPhE,EAFO,EAEPA,KACRi6B,EAAYj6B,EAAKA,MAHF,gDAKfsD,QAAQC,IAAR,MACA02B,EAAY,IACZ1vB,GAAW,GAPI,yDAAH,qDAUhB4vB,KACC,CAACv2B,IAGJsH,qBAAU,WACJ8uB,EAAYp6B,OAAS,GACvB2K,GAAW,KAEZ,CAACyvB,IAGJ9uB,qBAAU,WACLgvB,IACD3vB,GAAW,GACQ,yCAAG,+BAAAxB,EAAA,+EAEKuU,GAAgB1Z,EAAUI,cAF/B,gBAEVhE,EAFU,EAEVA,KACRi6B,EAAYj6B,EAAKA,MAHC,gDAKlBsD,QAAQC,IAAR,MACA02B,EAAY,IACZ1vB,GAAW,GAPO,yDAAH,oDAUnB6vB,GACAzB,GAAW,MAEZ,CAACuB,EAAYt2B,IAEhB,IAAMy2B,EAAY,yCAAG,+BAAAtxB,EAAA,6DACjBwB,GAAW,GADM,kBAGU+S,GAAgB1Z,EAAUI,cAHpC,gBAGLhE,EAHK,EAGLA,KACRi6B,EAAYj6B,EAAKA,MAJJ,gDAMbsD,QAAQC,IAAR,MACA02B,EAAY,IACZ1vB,GAAW,GARE,yDAAH,qDAcZyF,EAAY,yCAAG,WAAOvT,GAAP,kBAAAsM,EAAA,6DAEnBwB,GAAW,GAFQ,kBAIMgT,GAAqB,CAC1CvZ,aAAcJ,EAAUI,aACxB9F,YAAazB,IANE,gBAITuD,EAJS,EAITA,KAIRi6B,EAAYj6B,EAAKA,MARA,gDAUjBi6B,EAAY,IACZ32B,QAAQC,IAAI,KAAM8H,SAASrL,MAC3BuK,GAAW,GAZM,yDAAH,sDAgClB,OACE,iCACE,yBACEZ,MAAO,CACL+S,SAAU,SACVC,IAAK,EACL3H,gBAAiB,QACjBC,OAAQ,GALZ,SAQE,eAAC,GAAD,MAEF,gCACE,eAACnI,GAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,gBAAC,GAAD,WACE,oDACA,iEAEF,wBACA,gBAACJ,GAAA,EAAD,CAAMC,WAAS,EAAC4R,QAAQ,SAAxB,UACE,eAAC7R,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG0C,GAAI,EAAtB,SACE,eAAC,GAAD,CACEI,aAAcA,EACdC,YAAY,4EAGhB,eAACnD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG0C,GAAI,EAAtB,SACE,eAAClB,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,SACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,SACb/Q,UAAY,UAEdqC,QAAS0rB,EATX,SAWE,eAAC,KAAD,QAGJ,eAACvtB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJ0C,GAAI,EACJjG,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZD,eAAgB,YAPpB,SAUE,eAAC,GAAD,CACEnD,MAAM,QACNC,QAAQ,kBACRC,MAAM,QACNmG,QAAS,WACPqF,GAAU,IALd,4BAWDtK,GA9Eb,sBACEC,MAAO,CACLgC,OAAQ,QACRH,QAAS,OACTC,eAAgB,SAChBC,WAAY,UALhB,SAQE,eAAC,GAAD,CAAchC,UAAWA,MAwEf,gBAACoD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,WACIxD,GAAoC,IAAvBswB,EAAYp6B,QACzB,gBAACkN,GAAA,EAAD,CAAMC,WAAS,EAACrB,WAAW,SAASiT,QAAQ,SAA5C,UACE,eAAC7R,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJC,GAAI,EACJyC,GAAI,EACJC,GAAI,EACJlG,MAAO,CACL8iB,UAAW,UAPf,SAUE,qBACE9iB,MAAO,CACL0gB,WAAY,QAFhB,iEAQF,eAACvd,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJC,GAAI,EACJyC,GAAI,EACJC,GAAI,EACJlG,MAAO,CAAE2C,UAAW,OANtB,SAQE,sBACEH,IAAI,oCACJ7D,MAAM,MACN8D,IAAI,oBAKV1C,GAAaswB,EAAYp6B,OAAS,GAClC,eAACqT,GAAA,EAAD,CAAgBtJ,MAAO,CAAE2C,UAAW,QAApC,SACE,gBAAC4G,GAAA,EAAD,CACEvJ,MAAO,CAAE8M,SAAU,QAASgJ,UAAW,UADzC,UAGE,eAACtM,GAAA,EAAD,UACE,gBAACG,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,CAAW/G,UAAU,KAArB,0BACA,eAAC+G,GAAA,EAAD,CAAW/G,UAAU,KAArB,0BACA,eAAC+G,GAAA,EAAD,CAAW/G,UAAU,KAArB,sCACA,eAAC+G,GAAA,EAAD,CAAW/G,UAAU,KAArB,0BACA,eAAC+G,GAAA,EAAD,CAAW/G,UAAU,YAGzB,eAACgH,GAAA,EAAD,UACG2mB,EAAY18B,KAAI,SAAC0C,GAAD,OACf,eAAC,WAAD,UACE,gBAACsT,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,CAAW/G,UAAU,KAArB,SACGrM,EAAK/B,YAER,eAACmV,GAAA,EAAD,CAAW/G,UAAU,KAArB,SACGrM,EAAK9B,cAER,eAACkV,GAAA,EAAD,CAAW/G,UAAU,KAArB,SACGkX,KAAOvjB,EAAK5B,cAAcqlB,OACzB,kCAGJ,gBAACrQ,GAAA,EAAD,CAAW/G,UAAU,KAArB,eACyB0C,IAAtB/O,EAAKie,cACJje,EAAKge,kBACgBjP,IAAtB/O,EAAKie,cACJje,EAAKge,aACH,IACAhe,EAAKie,gBAEX,eAAC7K,GAAA,EAAD,CAAW/G,UAAU,KAArB,SACE,eAAC,GAAD,CACE9D,QAAQ,mBACRC,MAAM,QACNmG,QAAS,WACPuoB,GAAgB,GAChB6C,EAAmB/5B,IALvB,gCAtBSA,EAAK/B,sCAgD5C,eAAC,GAAD,CACEsT,SAAUA,EACVyC,UAAWA,EACX2kB,WAAYA,IAGd,eAAC,GAAD,CACE1B,eAAgBA,EAChBC,gBAAiBA,EACjBkC,gBAAiBA,EACjBT,WAAYA,QCpSP2B,GAAkB,yCAAG,WAAOC,GAAP,UAAAxxB,EAAA,sEACnBlD,KAAMmD,KAAK,oBAAqBuxB,GADb,mFAAH,sDAuBlBC,GAAuB,yCAAG,WAAOn8B,GAAP,UAAA0K,EAAA,sEACxBlD,KAAMmD,KAAK,eAAgB3K,GADH,mFAAH,sDAevBo8B,GAAqB,yCAAG,WAAOC,GAAP,UAAA3xB,EAAA,sEACtBlD,KAAMsD,IAAI,eAAgBuxB,GADJ,mFAAH,sDAUrBC,GAAqB,yCAAG,WAAO78B,GAAP,UAAAiL,EAAA,sEACtBlD,KAAMsD,IAAN,uBAA0BrL,IADJ,mFAAH,sDAyBrBwhB,GAAc,yCAAG,WAAOsb,GAAP,UAAA7xB,EAAA,sEACflD,KAAMmD,KAAK,uBAAwB4xB,GADpB,mFAAH,sDAedC,GAAa,yCAAG,WAAO72B,GAAP,UAAA+E,EAAA,sEACdlD,KAAMwD,IAAN,8BAAiCrF,IADnB,mFAAH,sDA8Bb82B,GAA2B,yCAAG,WAAOC,GAAP,UAAAhyB,EAAA,sEAC5BlD,KAAMmD,KAAK,8BAA+B+xB,GADd,mFAAH,sD,qBCmLzBC,I,qBA1SkB,SAAC,EAShCttB,GACI,IARFutB,EAQC,EARDA,gBACAC,EAOC,EAPDA,WACAruB,EAMC,EANDA,YACAmH,EAKC,EALDA,UACAmnB,EAIC,EAJDA,eACAC,EAGC,EAHDA,cASF,EAAiC9wB,mBAAS,IAA1C,oBAAO+wB,EAAP,KAAoBC,EAApB,KAGA,EAAwChxB,oBAAS,GAAjD,oBAAOixB,EAAP,KAAqBC,EAArB,KAEM53B,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAM9CiH,EAAoBC,cAApBD,gBACFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAwCEywB,EAAqB,yCAAG,yCAAA1yB,EAAA,sEAEpBhL,EAAYwlB,KAAO0X,EAAgBS,MAAMlW,UAAU/B,OACvD,oBAEIgC,EAAUlC,KAAO0X,EAAgBU,IAAInW,UAAU/B,OACnD,oBAEI/mB,EAAkB,CACtB2oB,OAAQ4V,EAAgBW,QACxB79B,YACA0nB,UACAznB,aAAcq9B,EACd79B,UAAW,GACXq+B,YAAY,EACZC,YAAY,EACZC,kBAAkB,EAClBC,SAAS,EACTC,kBAAmB,uBACnBh+B,UAAW4O,EAAY5O,UACvBK,SAAU48B,EAAW58B,SACrB0F,aAAcJ,EAAUI,cArBA,SAwBHw2B,GAAwB99B,GAxBrB,uBAwBlBsD,EAxBkB,EAwBlBA,KACRsD,QAAQC,IAAIvD,EAAKA,MAEjBm7B,GAAe,GAEfK,GAAgB,GAChBzwB,EAAY,UAAW,kEAGjBmxB,EAAkB,CACtB/lB,MAAM,IAAD,OAAMvS,EAAUI,aAAhB,WACLoT,SAAU,UACVnM,QAAQ,GAAD,OAAK4B,EAAY3O,YAAjB,+BAAoCg9B,EAAWp3B,WAA/C,6FApCiB,UAuCpBkS,GAAgBkmB,GAvCI,QAyC1Bd,GAAc,GACdpnB,GAAU,GA1CgB,kDA4C1B1Q,QAAQC,IAAI,QAAZ,MACQ0H,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GACrBkwB,GAAe,GACfK,GAAgB,GAhDU,0DAAH,qDAoD3B,OACE,gBAAC1uB,GAAA,EAAD,CACEC,WAAS,EACTgF,QAAS,EACTpI,MAAO,CACLqD,QAAS,QAJb,UAOE,eAACF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAOsH,EAAY3O,gBAE/C,eAAC4O,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,wCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAOsH,EAAYzO,iBAE/C,eAAC0O,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO01B,EAAgBxL,SAEnD,eAAC3iB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO01B,EAAgBkB,cAEnD,eAACrvB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO01B,EAAgBmB,YAEnD,eAACtvB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,kCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO21B,EAAW5a,eAE9C,eAACxT,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO21B,EAAWp3B,eAE9C,eAACgJ,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACEkD,SAjOwB,SAACrE,GAC/BuvB,EAAUvvB,EAAMyB,OAAOjI,QAiOjBA,MAAO81B,OAGO,IAAjBE,EACC,eAACzuB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIvD,MAAO,CAAE8iB,UAAW,SAAUngB,UAAW,SAA5D,SACE,eAAC,GAAD,CACEhE,MAAM,MACNqG,QArNqB,WAEI,KAA7B9B,EAAYwvB,cAAqD,KAA9BxvB,EAAYyvB,cACjDvxB,EAAY,QAAS,4DAGD,KAAhBswB,EACFtwB,EAAY,QAAS,oEAGrBowB,GAAe,GACfK,GAAgB,KA2MZ7xB,MAAO,CAAEqL,gBAAiB,kBAAmBxM,MAAO,SAHtD,wCASF,gBAACsE,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIvD,MAAO,CAAE8iB,UAAW,SAAUngB,UAAW,SAA5D,UACE,sBAAK3C,MAAO,CAAEyD,aAAc,OAA5B,SACE,eAAC,GAAD,CACE9E,MAAM,MACNqB,MAAO,CACLqL,gBAAiB,UACjBxM,MAAO,SAETmG,QAAS,WACPwsB,GAAe,GACfK,GAAgB,IARpB,iEAcF,+BACE,eAAC,GAAD,CACElzB,MAAM,MACNqB,MAAO,CACLqL,gBAAiB,kBACjBxM,MAAO,SAETmG,QAAS8sB,EANX,gDC1SNc,GAAO,SAAC,GAA+B,IAA7B1+B,EAA4B,EAA5BA,QAAS2+B,EAAmB,EAAnBA,aACvB,OACE,iCACE,eAACtqB,GAAA,EAAD,CAASlH,QAAQ,QAAQqB,UAAU,OACnC,gBAACoc,GAAA,EAAD,CACE/c,WAAW,aACX/B,MAAO,CAAEiiB,OAAQ,WACjBjd,QAAS,kBAAM6tB,EAAa3+B,IAH9B,UAKE,eAACmwB,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,CAAQ7hB,IAAKvO,EAAQK,YAAaiO,IAAI,gCAExC,eAAC+hB,GAAA,EAAD,CACEC,QAAStwB,EAAQK,YAAc,MAAQL,EAAQM,cAC/CiwB,UACE,eAAC,WAAD,UACE,eAAC,GAAD,CACE/hB,UAAU,OACVrB,QAAQ,QACRxC,MAAM,cAHR,SAKG,IAAM3K,EAAQO,sBAMzB,eAAC8T,GAAA,EAAD,CAASlH,QAAQ,QAAQqB,UAAU,WAK1BuC,OAAMC,KAAK0tB,ICRXE,GA9BK,WAElB,OACE,uBAAK9yB,MAAO,CAAE+B,WAAY,UAA1B,UACE,sBAAK/B,MAAO,CAAErB,MAAO,OAAQmkB,UAAW,UAAxC,SACE,sBACEtgB,IAAI,6BACJ7D,MAAM,OACN8D,IAAI,qBAGR,sBACEzC,MAAO,CACL+B,WAAY,UAFhB,SAKE,sBACE/B,MAAO,CACL0gB,WAAY,OACZoC,UAAW,SACXngB,UAAW,OAJf,SAOE,oGCyIKowB,OAnJf,SAAyChvB,GACvC,IAAQ+rB,EAAkB/rB,EAAlB+rB,eAKFkD,EAAUlyB,aAAY,SAAC5N,GAAD,OAAWA,EAAM0J,YAAY9J,YACnDmH,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAChD0D,EAAWsD,cAGjB,EAAmCN,mBAAS,IAA5C,oBAAOsyB,EAAP,KAAsBC,EAAtB,KAGA,EAAgCvyB,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAGA,EAAwBD,mBAAS,GAAjC,oBAAOgP,EAAP,KAAagS,EAAb,KAOApgB,qBAAU,WAERogB,EAAQ,GACR,IAAMwR,EAAe,yCAAG,mCAAA/zB,EAAA,sEAEb/E,EAAeJ,EAAUI,aAC1B9F,EAAcy+B,EAHA,SAIGrd,GAAe,CACpCtb,eACA9F,gBANkB,gBAIZ8B,EAJY,EAIZA,KAKR68B,EAAU78B,EAAKA,MACfsrB,EAAQ,GAVY,kDAYpBA,EAAQ,GAZY,0DAAH,qDAetB,IACCwR,IACA,MAAMzT,OAEL,CAACsT,EAAS/4B,IAMbsH,qBAAU,WAENX,IADC+O,EAAK,MAKP,CAACA,IAWJ,IAAMyjB,EAAa/uB,uBAAY,WAC7B1G,EAAStK,EAAW,WACnB,CAACsK,IAOEk1B,EAAexuB,uBACnB,SAACnQ,GACCyF,QAAQC,IAAI,QAAS1F,GACrB47B,EAAe57B,GACfk/B,IACAz1B,EAASrK,EAAc,OAEzB,CAACqK,EAAUy1B,EAAYtD,IAsDzB,OACE,iCACG/vB,GAlDD,sBACEC,MAAO,CACLgC,OAAQ,QACRH,QAAS,OACTC,eAAgB,SAChBC,WAAY,UALhB,SAQE,eAAC,GAAD,CAAchC,UAAWA,OA2CzBA,GAnCF,iCAEA,eAAC,GAAD,CAAciF,QAASouB,EAAvB,SACE,sBAAKpzB,MAAO,CAAEiiB,OAAQ,UAAWtf,UAAW,OAA5C,SACE,eAAC,KAAD,CAASogB,SAAS,YAItB,gBAACqB,GAAA,EAAD,WACKzU,EAAM,GACPsjB,EAAct/B,KAAI,SAACO,GACjB,OACE,eAAC,GAAD,CAEEA,QAASA,EACT2+B,aAAcA,GAFT3+B,EAAQI,cAQV,IAATqb,GACC,eAAC,GAAD,UAWP,QCuDW0jB,GA3LW,SAAC,EAOxBtvB,GAAW,IANZ6D,EAMW,EANXA,SACAyC,EAKW,EALXA,UACAinB,EAIW,EAJXA,gBACAC,EAGW,EAHXA,WACA+B,EAEW,EAFXA,mBACA7B,EACW,EADXA,cAMM9hB,EAAO7O,aAAY,SAAC5N,GAAD,OAAWA,EAAM0J,YAAYhK,cAChD+K,EAAWsD,cAEToE,EAAeF,KAAfE,WAQR,EAAkC1E,mBAAS,CACzC4yB,WAAY,GACZb,aAAc,GACdc,eAAgB,GAChBb,cAAe,KAJjB,oBAAOzvB,EAAP,KAAoB3N,EAApB,KAYA,EAAsCoL,oBAAS,GAA/C,oBAAO8yB,EAAP,KAAoBjC,EAApB,KAGM3pB,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,OAGlDmB,GACHnK,EAAStK,EAAW,SAEtBgX,EAAUvC,MAuBZvG,qBAAU,WACRiwB,GAAe,GACfj8B,EAAW,CACTg+B,WAAY,GACZb,aAAc,GACdc,eAAgB,GAChBb,cAAe,OAEhB,CAAC/qB,IASJ,IAkBMvB,EAAY,yCAAG,WAAMvT,GAAN,UAAAsM,EAAA,sDACnBzB,EAAStK,EAAW,gBACpBsK,EAASrK,EAAcR,IAFJ,2CAAH,sDAOlB,OAEE,eAAC,WAAD,UACE,eAACkV,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMF,EACNM,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,CAAqBxC,WAAYA,EAAjC,UACE,gBAAC,GAAD,CAAcA,WAAYA,EAA1B,UACE,4DACA,+BACE,eAAC,KAAD,CACEnF,KAAM,GAEN8E,QAvEiB,WAC7BqF,GAAU,GACV1M,EAAStK,EAAW,UAsER2M,MAAO,CAAEiiB,OAAQ,mBAIN,IAAhBwR,EAEC,eAAC,GAAD,CACEptB,aAAcA,EACdC,YAAY,0EAGd,uBAAKtG,MAAO,CAAE6B,QAAS,OAAQE,WAAY,UAA3C,UACE,sBAAK/B,MAAO,CAAE+G,KAAM,GAApB,SACE,sBACEvE,IAAI,8BACJ7D,MAAM,OACN8D,IAAI,qBAGR,sBACEzC,MAAO,CACL+G,KAAM,EACNhF,WAAY,SACZwR,WAAY,OAJhB,SAOE,uBAAKvT,MAAO,CAAE0gB,WAAY,QAA1B,UACE,mEACA,wFAME,SAAT/Q,GAEC,eAAC,GAAD,CACE2hB,gBAAiBA,EACjBC,WAAYA,EACZruB,YAAaA,EACbmH,UAAWA,EACXmnB,eAAgBA,EAChBC,cAAeA,IAGT,gBAAT9hB,GAGC,eAAC,GAAD,CAAiCmgB,eA1FpB,SAAC57B,GACrBqB,EAAW,CACVjB,UAAWJ,EAAQI,UACnBC,YAAaL,EAAQK,YACrBC,cAAeN,EAAQM,cACvBC,aAAcP,EAAQO,gBAqFiD6+B,mBAAoBA,YCyKlFI,GA3VkB,SAAC,GAI3B,IAHLC,EAGI,EAHJA,cACAC,EAEI,EAFJA,YACAnC,EACI,EADJA,cAGMx3B,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAE9CiH,EAAoBC,cAApBD,gBACFE,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAKJ,EAAiCV,mBAASizB,EAAYv/B,cAAtD,oBAAOq9B,EAAP,KAAoBC,EAApB,KAEA,EAAkChxB,mBAAS,IAA3C,oBAAOkzB,EAAP,KAAkBC,EAAlB,KAEA,EAA8CnzB,mBAAS,CACrDozB,IAAK,GACLvB,UAAW,GACXC,QAAS,KAHX,oBAAOnB,EAAP,KAAwB/9B,EAAxB,KAUMygC,EAA0B,SAAC5xB,GAC/BuvB,EAAUvvB,EAAMyB,OAAOjI,QASzB2F,qBAAU,WACR,IAAMwyB,EAAMna,KAAOga,EAAY7B,OAAOjY,OAAO,gCACvC0Y,EAAY5Y,KAAOga,EAAY7B,OAAOjY,OAAO,MAC7C2Y,EAAU7Y,KAAOga,EAAY5B,KAAKlY,OAAO,MAC/CvmB,EAAmB,CAAEwgC,MAAKvB,YAAWC,cACpC,CAACmB,IAQJ,IA+BMK,EAAqB,yCAAG,WAAOrgC,GAAP,sBAAAwL,EAAA,+EAGH4xB,GAAsBp9B,GAHnB,uBAGlByC,EAHkB,EAGlBA,KACRsD,QAAQC,IAAIvD,EAAKA,MACjB+K,EAAY,UAAW,kEAEjBmxB,EAAkB,CACtB/lB,MAAM,IAAD,OAAMvS,EAAUI,aAAhB,WACLoT,SAAU,OACVnM,QAAQ,GAAD,OAAKsyB,EAAYr/B,YAAjB,uFAViB,UAapB8X,GAAgBkmB,GAbI,0DAelBjxB,EAAY,KAAMI,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,GACrB3H,QAAQC,IAAI,QAAZ,MAjB0B,QAoB5Bk6B,EAAa,UApBe,0DAAH,sDA6P3B,OACE,iCAEiB,KAAdD,GApKD,gBAAC1wB,GAAA,EAAD,CACEC,WAAS,EACTgF,QAAS,EACTpI,MAAO,CACLqD,QAAS,QAJb,UAOE,eAACF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAOg4B,EAAYM,UAE/C,eAAC/wB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,wCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACEG,UAAQ,EACR9H,MAAOge,KAAOga,EAAYn/B,cAAcqlB,OAAO,oCAGnD,eAAC3W,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO01B,EAAgByC,QAEnD,eAAC5wB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO01B,EAAgBkB,cAEnD,eAACrvB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO01B,EAAgBmB,YAEnD,eAACtvB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,kCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAOg4B,EAAYjd,eAE/C,eAACxT,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAOg4B,EAAYvc,eAE/C,eAAClU,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACEkD,SAAUutB,EACVp4B,MAAO81B,MAGX,eAACvuB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGvD,MAAO,CAAE8iB,UAAW,SAAUngB,UAAW,SAA3D,SACE,eAAC,GAAD,CACEhE,MAAM,MACNC,QAAQ,UACRC,MAAM,QACNmG,QAAS,YArQW,SAACpR,EAAIugC,GAEjC,GAAIzC,IAAgBkC,EAAYv/B,aAC9B+M,EAAY,QAAS,mFAGrB,IACE,IAAMgzB,EAAa,CACjBjgC,OAAQP,EACRU,UAAWs/B,EAAYt/B,UACvBK,SAAUi/B,EAAYj/B,SACtB0F,aAAcJ,EAAUI,aACxBhG,aAAc8/B,GAGR99B,EAASy6B,GAAsBsD,GAA/B/9B,KACRsD,QAAQC,IAAIvD,EAAKA,MACjB+K,EAAY,UAAW,kEAEvB0yB,EAAa,UACb,MAAOpU,GACP,IAAQpe,EAAYoe,EAAMhe,SAASrL,KAA3BiL,QACRF,EAAY,QAASE,IAgPf+yB,CAAsBT,EAAYhgC,GAAI89B,IAL1C,wCAWF,eAACvuB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGvD,MAAO,CAAE8iB,UAAW,SAAUngB,UAAW,SAA3D,SACE,eAAC,GAAD,CACEhE,MAAM,MACNC,QAAQ,UACRC,MAAM,QACNmG,QAAS,WACPivB,EAAsBL,EAAYhgC,KALtC,2CAmBW,WAAdigC,GAnOD,uBAAK7zB,MAAO,CAAE8iB,UAAW,UAAzB,UACE,+BACE,sBAAKtgB,IAAI,2BAA2BC,IAAI,aAE1C,+BACE,qBAAIzC,MAAO,CAAE0gB,WAAY,OAAQjd,aAAc,OAA/C,8EAIF,+BACE,eAAC,GAAD,CACE9E,MAAM,MACNC,QAAQ,UACRC,MAAM,QACNmG,QAAS,WACPysB,GAAc,GACdkC,GAAc,GACdG,EAAa,KAPjB,oEA0NW,WAAdD,GAnMD,uBAAK7zB,MAAO,CAAE8iB,UAAW,UAAzB,UACE,+BACE,sBAAKtgB,IAAI,2BAA2BC,IAAI,aAE1C,+BACE,qBAAIzC,MAAO,CAAE0gB,WAAY,OAAQjd,aAAc,OAA/C,8EAIF,+BACE,eAAC,GAAD,CACE9E,MAAM,MACNC,QAAQ,UACRC,MAAM,QACNmG,QAAS,WACPysB,GAAc,GACdkC,GAAc,GACdG,EAAa,KAPjB,wEC/GKQ,GAxDe,SAAC,GAKxB,IAJLC,EAII,EAJJA,WACAZ,EAGI,EAHJA,cACAC,EAEI,EAFJA,YACAnC,EACI,EADJA,cAEQpsB,EAAeF,KAAfE,WAEFwC,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,OAGlDmB,GACH2pB,GAAc,GAGhBkC,EAAc7rB,MAOhB,OACE,eAAC,WAAD,UACE,eAACE,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMysB,EACNrsB,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,CACExC,WAAYA,EACZrF,MAAO,CAAE2C,UAAW,OAFtB,UAIE,gBAAC,GAAD,CAAc0C,WAAYA,EAA1B,UACE,6DACA,+BACE,eAAC,KAAD,CACEnF,KAAM,GACN8E,QArBiB,WAC7B2uB,GAAc,IAqBF3zB,MAAO,CAAEiiB,OAAQ,kBAIvB,eAAC,GAAD,CACE0R,cAAeA,EACfC,YAAaA,EACbnC,cAAeA,YC2FZ+C,GAxIa,SAAC,GAAkE,IAAhEvB,EAA+D,EAA/DA,cAAewB,EAAgD,EAAhDA,eAAgBd,EAAgC,EAAhCA,cAAee,EAAiB,EAAjBA,WAgBrEC,EAAa,SAAC/3B,GAChB,OACE,iCACE,eAAC2L,GAAA,EAAD,CAASlH,QAAQ,QAAQqB,UAAU,OACnC,gBAACoc,GAAA,EAAD,CACE/c,WAAW,aACX/B,MAAO,CAAEiiB,OAAQ,WACjBjd,QAAS,kBAdjByvB,EAc0C73B,QAb1C+2B,GAAc,IAUR,UAKE,eAACtP,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,CAAQ7hB,IAAK7F,EAAYs3B,MAAO1xB,IAAI,OAEtC,eAAC+hB,GAAA,EAAD,CACEC,QACE5nB,EAAYs3B,MACZ,MACAt3B,EAAY+Z,WACZ,MACAiD,KAAOhd,EAAYm1B,OAAOjY,OAAO,MACjC,MACAF,KAAOhd,EAAYo1B,KAAKlY,OAAO,MAC/B,KAEF2K,UACE,eAAC,WAAD,UACE,eAAC,GAAD,CACE/hB,UAAU,OACVrB,QAAQ,QACRxC,MAAM,cAHR,SAKG,IACCjC,EAAYnI,aAAa,GACzB,IACAmI,EAAYnI,aAAa,GACzB,IACAmI,EAAYnI,aAAa,YAMrC,eAAC8T,GAAA,EAAD,CAASlH,QAAQ,QAAQqB,UAAU,SAvC3B9F,EAAYhJ,KAsG5B,OACE,gBAACwwB,GAAA,EAAD,WACG6O,EAAch9B,OAAS,GACtBg9B,EAAct/B,KAAI,SAACiJ,GAAD,OAChB+3B,EAAW/3B,MAEW,IAAzBq2B,EAAch9B,UACG,IAAfy+B,EA/DC,uBAAK10B,MAAO,CAAE+B,WAAY,UAA1B,UACE,sBAAK/B,MAAO,CAAErB,MAAO,OAArB,SACE,sBACE6D,IAAI,oCACJ7D,MAAM,OACN8D,IAAI,qBAGR,sBACEzC,MAAO,CACL+B,WAAY,UAFhB,SAKE,sBACE/B,MAAO,CACL0gB,WAAY,OACZoC,UAAW,SACXngB,UAAW,OAJf,SAOE,wGAUV,uBAAK3C,MAAO,CAAE+B,WAAY,UAA1B,UACM,sBAAK/B,MAAO,CAAErB,MAAO,OAAQmkB,UAAW,UAAxC,SACE,sBACEtgB,IAAI,6BACJ7D,MAAM,OACN8D,IAAI,qBAGR,sBACEzC,MAAO,CACL+B,WAAY,UAFhB,SAKE,sBACE/B,MAAO,CACL0gB,WAAY,OACZoC,UAAW,SACXngB,UAAW,OAJf,SAOE,wGC8CDiyB,GAzKC,SAAC,GAQX,IAPJhB,EAOG,EAPHA,YACAtC,EAMG,EANHA,gBACA+C,EAKG,EALHA,sBACAL,EAIG,EAJHA,wBACAhD,EAGG,EAHHA,sBACAU,EAEG,EAFHA,YAIA,OACE,gBAACvuB,GAAA,EAAD,CACEC,WAAS,EACTgF,QAAS,EACTpI,MAAO,CACLqD,QAAS,QAJb,UAOE,eAACF,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAOg4B,EAAYM,UAE/C,eAAC/wB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,wCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAOg4B,EAAYn/B,iBAE/C,eAAC0O,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO01B,EAAgByC,QAEnD,eAAC5wB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO01B,EAAgBkB,cAEnD,eAACrvB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAO01B,EAAgBmB,YAEnD,eAACtvB,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,kCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAOg4B,EAAYjd,eAE/C,eAACxT,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,4BAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CAAiBG,UAAQ,EAAC9H,MAAOg4B,EAAYvc,eAE/C,eAAClU,GAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJvD,MAAO,CACL6B,QAAS,OACTE,WAAY,UALhB,SAQE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,yCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAAC,GAAD,CACEkD,SAAUutB,EACVp4B,MAAO81B,MAGX,eAACvuB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGvD,MAAO,CAAE8iB,UAAW,SAAUngB,UAAW,SAA3D,SACE,eAAC,GAAD,CACEhE,MAAM,MACNC,QAAQ,UACRC,MAAM,QACNmG,QAAS,WACPqvB,EAAsBT,EAAYhgC,GAAI89B,IAL1C,wCAWF,eAACvuB,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGvD,MAAO,CAAE8iB,UAAW,SAAUngB,UAAW,SAA3D,SACE,eAAC,GAAD,CACEhE,MAAM,MACNC,QAAQ,UACRC,MAAM,QACNmG,QAAS,WACPgsB,EAAsB4C,EAAYhgC,KALtC,4CCzHOihC,GArCQ,SAAC,GAMjB,IALLf,EAKI,EALJA,aACAgB,EAII,EAJJA,WACAnB,EAGI,EAHJA,cACAoB,EAEI,EAFJA,cACAtD,EACI,EADJA,cAEA,OACE,uBAAKzxB,MAAO,CAAE8iB,UAAW,UAAzB,UACE,+BACE,sBAAKtgB,IAAI,2BAA2BC,IAAI,aAE1C,+BACE,qBAAIzC,MAAO,CAAE0gB,WAAY,OAAQjd,aAAc,OAA/C,8EAIF,+BACE,eAAC,GAAD,CACE9E,MAAM,MACNC,QAAQ,UACRC,MAAM,QACNmG,QAAS,WACP8uB,EAAa,IACbgB,GAAW,GACXrD,GAAc,GACdsD,GAAc,GACdpB,GAAc,IATlB,kFCmBOqB,GArCQ,SAAC,GAMjB,IALLlB,EAKI,EALJA,aACAgB,EAII,EAJJA,WACAnB,EAGI,EAHJA,cACAoB,EAEI,EAFJA,cACAtD,EACI,EADJA,cAEA,OACE,uBAAKzxB,MAAO,CAAE8iB,UAAW,UAAzB,UACE,+BACE,sBAAKtgB,IAAI,2BAA2BC,IAAI,aAE1C,+BACE,qBAAIzC,MAAO,CAAE0gB,WAAY,OAAQjd,aAAc,OAA/C,8EAIF,+BACE,eAAC,GAAD,CACE9E,MAAM,MACNC,QAAQ,UACRC,MAAM,QACNmG,QAAS,WACR8uB,EAAa,IACbgB,GAAW,GACXrD,GAAc,GACdsD,GAAc,GACdpB,GAAc,IATjB,kFCiIOsB,GA7HsB,SAAC,GAM/B,IALLtB,EAKI,EALJA,cACAC,EAII,EAJJA,YACAkB,EAGI,EAHJA,WACAC,EAEI,EAFJA,cACAtD,EACI,EADJA,cAGQvwB,EAAoBC,cAApBD,gBACFjH,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAEhDmH,EAAc,SAACC,EAASC,GAC5BJ,EAAgBI,EAAS,CACvBD,aAQJ,EAAkCV,mBAAS,IAA3C,oBAAOkzB,EAAP,KAAkBC,EAAlB,KAGA,EAAiCnzB,mBAASizB,EAAYv/B,cAAtD,oBAAOq9B,EAAP,KAAoBC,EAApB,KAGA,EAA8ChxB,mBAAS,CACrDozB,IAAK,GACLvB,UAAW,GACXC,QAAS,KAHX,oBAAOnB,EAAP,KAAwB/9B,EAAxB,KAeAgO,qBAAU,WACRhO,EAAmB,CACjBwgC,IAAKna,KAAOga,EAAY7B,OAAOjY,OAAO,gCACtC0Y,UAAW5Y,KAAOga,EAAY7B,OAAOjY,OAAO,MAC5C2Y,QAAS7Y,KAAOga,EAAY5B,KAAKlY,OAAO,UAEzC,CAAC8Z,IAGJ,IAAMS,EAAqB,yCAAG,WAAOzgC,EAAIugC,GAAX,sBAAA/0B,EAAA,yDACxBsyB,IAAgBkC,EAAY//B,UADJ,gBAE1BuN,EAAY,QAAS,8EAFK,8BAIpBgzB,EAAa,CACjBjgC,OAAQP,EACRU,UAAWs/B,EAAYt/B,UACvBK,SAAUi/B,EAAYj/B,SACtB0F,aAAcJ,EAAUI,aACxBhG,aAAc8/B,GATU,kBAYDrD,GAAsBsD,GAZrB,gBAYhB/9B,EAZgB,EAYhBA,KACRsD,QAAQC,IAAIvD,EAAKA,MAChB+K,EAAY,UAAW,iEACxB0yB,EAAa,UACbgB,GAAW,GAhBa,kDAkBjBxzB,EAAW,KAAMI,SAASrL,KAA1BiL,QACPF,EAAY,QAASE,GAnBG,0DAAH,wDA0BrB2yB,EAAqB,yCAAG,WAAMrgC,GAAN,oBAAAwL,EAAA,+EAEH4xB,GAAsBp9B,GAFnB,gBAElByC,EAFkB,EAElBA,KACRsD,QAAQC,IAAIvD,EAAKA,MACjB+K,EAAY,UAAW,kEACvB0yB,EAAa,UACbgB,GAAW,GANe,kDAQpBxzB,EAAW,KAAMI,SAASrL,KAA1BiL,QACNF,EAAY,QAASE,GATK,0DAAH,sDAc3B,OACE,iCACiB,KAAduyB,GACC,eAAC,GAAD,CACED,YAAaA,EACbtC,gBAAiBA,EACjB+C,sBAAuBA,EACvBL,wBAhEwB,SAAC5xB,GAC/BuvB,EAAUvvB,EAAMyB,OAAOjI,QAgEjBo1B,sBAAuBiD,EACvBvC,YAAaA,IAGF,WAAdmC,GACC,eAAC,GAAD,CACEC,aAAcA,EACdgB,WAAYA,EACZnB,cAAeA,EACfoB,cAAeA,EACftD,cAAeA,IAGJ,WAAdoC,GACC,eAAC,GAAD,CACEC,aAAcA,EACdgB,WAAYA,EACZnB,cAAeA,EACfoB,cAAeA,EACftD,cAAeA,QC+BVyD,GA9JW,SAAC,GAIpB,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,gBACA3D,EACI,EADJA,cAIMx3B,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAEtD,EAA8B0G,oBAAS,GAAvC,oBAAO00B,EAAP,KAAgBP,EAAhB,KAGA,EAAgCn0B,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAKA,EAAmCD,mBAAS,IAA5C,oBAAOsyB,EAAP,KAAsBC,EAAtB,KAMA,EAAoCvyB,oBAAS,GAA7C,oBAAO4zB,EAAP,KAAmBZ,EAAnB,KAKA,EAAsChzB,qBAAtC,oBAAOizB,EAAP,KAAoBa,EAApB,KAMA,EAAoC9zB,oBAAS,GAA7C,oBAAO+zB,EAAP,KAAmBK,EAAnB,KAEQ1vB,EAAeF,KAAfE,WACFwC,EAAe,SAACC,GAAD,OAAU,SAAClE,KAC1BA,GAAgB,YAAXA,EAAEnD,MAAiC,QAAVmD,EAAE+C,KAA2B,UAAV/C,EAAE+C,MAGvDyuB,EAAgBttB,KAUlBvG,qBAAU,WACR2xB,EAAU,MACT,CAACqB,IAQJ,IAAMluB,EAAY,yCAAG,WAAOvT,GAAP,kBAAAsM,EAAA,sEAEjBwB,GAAW,GAFM,SAGMuwB,GAA4B,CACjD92B,aAAcJ,EAAUI,aACxB9F,YAAazB,IALE,gBAGTuD,EAHS,EAGTA,KAIR68B,EAAU78B,EAAKA,MACfsD,QAAQC,IAAIvD,EAAKA,MACjBs9B,GAAc,GATG,kDAYjBT,EAAU,IACT6B,GAAc,GACfn0B,GAAW,GAdM,0DAAH,sDAqBlBW,qBAAU,WACJ0xB,EAAch9B,OAAS,GACzB2K,GAAW,KAEZ,CAACqyB,IAiBJ,OACE,eAAC,WAAD,UACE,eAACjrB,GAAA,EAAD,CACEC,OAAO,QACPH,KAAMqtB,EACNjtB,OAAQL,GAAa,GACrBM,QAASN,GAAa,GAJxB,SAME,gBAAC,GAAD,CAAqBxC,WAAYA,EAAjC,UACE,gBAAC,GAAD,CAAcA,WAAYA,EAA1B,UACE,yEACA,+BACE,eAAC,KAAD,CACEnF,KAAM,GACN8E,QAzEiB,WAC7BowB,GAAgB,GAChBzB,GAAc,GACdoB,GAAc,GACd7B,EAAU,KAsEElzB,MAAO,CAAEiiB,OAAQ,mBAKV,IAAZoT,GACC,eAAC,GAAD,CACEhvB,aAAcA,EACdC,YAAY,0EAGfvG,GAvCL,sBACEC,MAAO,CACLgC,OAAQ,QACRH,QAAS,OACTC,eAAgB,SAChBC,WAAY,UALhB,SAQE,eAAC,GAAD,CAAchC,UAAWA,OAgCrBA,GACA,sBAAKC,MAAO,CAAE2C,UAAW,OAAzB,UACkB,IAAf4xB,EAEC,eAAC,GAAD,CACEtB,cAAeA,EACfU,cAAeA,EACfc,eAAgBA,EAChBC,WAAYA,IAId,eAAC,GAAD,CACEf,cAAeA,EACfC,YAAaA,EACbkB,WAAYA,EACZC,cAAeA,EACftD,cAAeA,cCublB6D,GApjBS,WAetB,IAAMr7B,EAAY6G,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAMhDs7B,EAAc3c,mBAMpB,EAAsCjY,mBAAS,MAA/C,oBAAO60B,EAAP,KAAoBC,EAApB,KAKA,EAA8B90B,oBAAS,GAAvC,oBAAOiH,EAAP,KAAiByC,EAAjB,KAEA,EAAoC1J,oBAAS,GAA7C,oBAAO4zB,EAAP,KAAmBZ,EAAnB,KAEA,EAAwChzB,oBAAS,GAAjD,oBAAOw0B,EAAP,KAAqBC,EAArB,KAGA,EAAgCz0B,oBAAS,GAAzC,oBAAOZ,EAAP,KAAkBa,EAAlB,KAGA,EAA8BD,oBAAS,GAAvC,oBAAO+0B,EAAP,KAIA,GAJA,KAIoC/0B,oBAAS,IAA7C,oBAAO4vB,EAAP,KAAmBkB,EAAnB,KAMA,EAAgC9wB,mBAAS,IAAzC,oBAAOg1B,EAAP,KAAiBC,EAAjB,KAKA,EAAoCj1B,mBAAS,CAC3Ck1B,UAAW,GACXC,YAAa,GACbC,YAAa,KAHf,oBAAOxE,EAAP,KAAmByE,EAAnB,KAQA,EAAkDr1B,mBAAS,IAA3D,oBAAOs1B,EAAP,KAA4BC,EAA5B,KAKA,EAA4Cv1B,mBAAS,IAArD,oBAAOw1B,EAAP,KAAuBC,EAAvB,KAMA,EAA8Cz1B,mBAAS,CACrDmlB,KAAM,GACN0M,UAAW,GACXC,QAAS,GACT4D,cAAe,GACfC,YAAa,GACbrE,QAAS,KANX,oBAAOX,EAAP,KAAwB/9B,EAAxB,KAaA,EAAsCoN,mBAAS,IAA/C,oBAAOizB,EAAP,KAAoBa,GAApB,KAGM8B,GAAM,IAAI1c,KACVoY,GAAUrY,KAAO2c,GAAK,cAAc5a,OACpC6a,GAAgB5c,KAAOA,OAASgC,QAAQ,QAAQC,UAAU/B,OAC9D,gCAEI2c,GAAc7c,KAAOA,OAASmC,MAAM,QAAQF,UAAU/B,OAC1D,gCASF,GAAkCnZ,mBAAS,CACzC+a,OAAQ9B,KAAO2c,GAAK,cAAc5a,OAClCvnB,UAAWoiC,GACX1a,QAAS2a,KAHX,sBAAOC,GAAP,MAAkBC,GAAlB,MAOAp1B,qBAAU,WACRk0B,EAAeF,EAAYlc,QAAQ6G,iBAClC,CAACqV,IAQJh0B,qBAAU,WAER,IAAMq1B,EAAmB,yCAAG,WAAOjiC,GAAP,kBAAAyK,EAAA,+EAEDuxB,GAAmB,CACxCjV,OAAQuW,GACRt9B,WACA0F,aAAcJ,EAAUI,eALF,gBAEhBhE,EAFgB,EAEhBA,KAKRsD,QAAQC,IAAIvD,EAAKA,MACjB6/B,EAAmB7/B,EAAKA,MARA,gDAUxBsD,QAAQC,IAAR,MACAgH,GAAW,GAXa,yDAAH,uDAeT,yCAAG,+BAAAxB,EAAA,+EAEQ8xB,GAAcj3B,EAAUI,cAFhC,gBAEPhE,EAFO,EAEPA,KAER2/B,EAAc,CACZrhC,SAAU0B,EAAKA,KAAK,GAAG1B,SACvBwF,WAAY9D,EAAKA,KAAK,GAAG8D,WACzBwc,WAAYtgB,EAAKA,KAAK,GAAGsgB,aAE3Byf,EAAkB//B,EAAKA,MACvBwgC,GAAexgC,EAAKA,KAAK,GAAG1B,UAC5BiiC,EAAoBvgC,EAAKA,KAAK,GAAG1B,UAXlB,kDAafgF,QAAQC,IAAR,MACAgH,GAAW,GAdI,0DAAH,qDAkBhBk2B,KACC,CAAC78B,EAAUI,aAAc43B,KAK5B1wB,qBAAU,WACR,IAAMq1B,EAAmB,yCAAG,+BAAAx3B,EAAA,+EAEDuxB,GAAmB,CACxCjV,OAAQgb,GAAUhb,OAClB/mB,SAAU48B,EAAW58B,SACrB0F,aAAcJ,EAAUI,eALF,gBAEhBhE,EAFgB,EAEhBA,KAKR6/B,EAAmB7/B,EAAKA,MAPA,gDASxBsD,QAAQC,IAAR,MACA47B,EAAYuB,QACZb,EAAmB,IACnBt1B,GAAW,GAZa,yDAAH,qDAgBrB2vB,IACF3vB,GAAW,GACX6wB,GAAc,GACdmF,OAED,CAACrG,EAAYmG,GAAWnF,EAAYt3B,IAMvCsH,qBAAU,WACJ00B,EAAoBhgC,OAAS,IAC/Bu/B,EAAYuB,QACZvB,EAAYwB,gBAAgBf,GAC5BT,EAAYyB,SACZr2B,GAAW,MAEZ,CAACq1B,EAAqBT,IAQzB,IAAM0B,GAAmB,yCAAG,WAAO5zB,GAAP,kBAAAlE,EAAA,sDAC1BwB,GAAW,GACXi2B,GAAevzB,EAAK3O,UACd5B,EAHoB,iCAAAqM,EAAA,MAGF,WAAO+3B,GAAP,sBAAA/3B,EAAA,6DAChBsc,EAAS7D,OAAOwD,SAASqb,GAAUhb,QACnC/mB,EAAWkjB,OAAOwD,SAAS8b,GAFX,kBAIGxG,GAAmB,CACxCjV,SACA/mB,WACA0F,aAAcJ,EAAUI,eAPN,gBAIZhE,EAJY,EAIZA,KAKR6/B,EAAmB7/B,EAAKA,MATJ,kDAWpBsD,QAAQC,IAAR,MACAs8B,EAAmB,IACnBV,EAAYuB,QACZn2B,GAAW,GAdS,0DAHE,sDAoBpBvK,EAAO,CACX1B,SAAU2O,EAAK3O,SACfwF,WAAYmJ,EAAKnJ,WACjBwc,WAAYrT,EAAKqT,YAEnBqf,EAAc3/B,GAEdtD,EAAgBuQ,EAAK3O,UA3BK,2CAAH,sDA+BnByiC,GAAkB,WACtBx2B,GAAW,GACX40B,EAAY6B,OAEZ,IAAM3b,EAAS9B,KACb4b,EAAY8B,oBAAoBzb,SAChC,cACAF,OACIvnB,EAAYwlB,KAAO4b,EAAY8B,oBAAoBzb,UAAU/B,OACjE,gCAEIgC,EAAUlC,KAAO4b,EAAY+B,kBAAkB1b,UAAU/B,OAC7D,iCAGmB,yCAAG,WAAOqd,GAAP,kBAAA/3B,EAAA,sEAEpBu3B,GAAa,CAAEjb,SAAQtnB,YAAW0nB,YAFd,SAGG6U,GAAmB,CACxCjV,SACA/mB,SAAUwiC,EACV98B,aAAcJ,EAAUI,eANN,gBAGZhE,EAHY,EAGZA,KAKR6/B,EAAmB7/B,EAAKA,MARJ,gDAUpBsD,QAAQC,IAAR,MACAs8B,EAAmB,IACnBV,EAAYuB,QACZn2B,GAAW,GAbS,yDAAH,sDAgBrB7N,CAAgBw+B,EAAW58B,WAIvB6iC,GAAe,yCAAG,iCAAAp4B,EAAA,sDACtBwB,GAAW,GACX40B,EAAYiC,OACN/b,EAAS9B,KACb4b,EAAY8B,oBAAoBzb,SAChC,cACAF,OAEIvnB,EAAYwlB,KAAO4b,EAAY8B,oBAAoBzb,UAAU/B,OACjE,gCAEIgC,EAAUlC,KAAO4b,EAAY+B,kBAAkB1b,UAAU/B,OAC7D,gCAZoB,iCAAA1a,EAAA,MAeE,WAAO+3B,GAAP,kBAAA/3B,EAAA,sEAEpBu3B,GAAa,CAAEjb,SAAQtnB,YAAW0nB,YAFd,SAGG6U,GAAmB,CACxCjV,SACA/mB,SAAUwiC,EACV98B,aAAcJ,EAAUI,eANN,gBAGZhE,EAHY,EAGZA,KAKR6/B,EAAmB7/B,EAAKA,MARJ,gDAUpBsD,QAAQC,IAAR,MACAs8B,EAAmB,IACnBV,EAAYuB,QACZn2B,GAAW,GAbS,yDAfF,qDA+BtB7N,CAAgBw+B,EAAW58B,UA/BL,2CAAH,qDAyCf+iC,GAAyB,SAAC9zB,GAE9B,IAAMmuB,EAAQnuB,EAAEmuB,MACVC,EAAMpuB,EAAEouB,IACRlM,EACJlM,KAAOmY,GAAOjY,OAAO,QACrB,UACAF,KAAOmY,GAAOjY,OAAO,KACrB,UACAF,KAAOmY,GAAOjY,OAAO,KACrB,SACI0Y,EAAY5Y,KAAOmY,EAAMlW,UAAU/B,OAAO,MAC1C2Y,EAAU7Y,KAAOoY,EAAInW,UAAU/B,OAAO,MAEtCuc,EAAgBzc,KAAOmY,EAAMlW,UAAU/B,SACvCwc,EAAc1c,KAAOoY,EAAInW,UAAU/B,SAGzCvmB,EAAmB,CACjBuyB,OACAiM,QACAC,MACAQ,YACAC,UACA4D,gBACAC,cACArE,QAASyE,GAAUhb,SAOrBrR,GAAU,IAUNstB,GAAkB,SAACv1B,GAEvB,IAAM9C,EAAS22B,EAAoBliC,QACjC,SAAC6jC,GAAD,OAAcA,EAAShkC,KAAOwO,EAAMw1B,SAAShkC,MAO/C6gC,GAAen1B,EAAO,IAKtBq0B,GAAc,IAGVkD,GAAiB,SAACj7B,GACtBg6B,EAAYh6B,IAIRi8B,GAAuB,WAE3BzC,GAAgB,IAgKlB,OACE,iCACE,0BACEp1B,MAAO,CACL+S,SAAU,SACVC,IAAK,EACL3H,gBAAiB,QACjBC,OAAQ,GALZ,UAQE,eAAC,GAAD,IACA,eAAC/C,GAAA,EAAD,OAEF,kCAxKA,eAACpF,GAAA,EAAD,CAAMC,WAAS,EAACrB,WAAW,SAASiT,QAAQ,SAA5C,SACE,eAAC7R,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,gBAAC,GAAD,CACEvD,MAAO,CACL83B,WAAW,GAAD,OAAM/3B,EAAwB,SAAZ,YAFhC,UAKE,uBAAKC,MAAO,CAAE+G,KAAM,GAApB,UACE,oDACA,iEAIF,gBAAC+kB,GAAA,EAAD,CACEzqB,QAAQ,WACRrB,MAAO,CAAErB,MAAO,OAAQoI,KAAM,GAFhC,UAIE,eAACglB,GAAA,EAAD,CAAYn4B,GAAG,WAAf,oBACA,eAACo4B,GAAA,EAAD,CACEC,QAAQ,WACRr4B,GAAG,YACHgI,MAAO+5B,EACPziB,MAAM,SAJR,SAMGijB,EAAexiC,KAAI,SAAC2P,GAAD,OAClB,eAAC4oB,GAAA,EAAD,CAEEtwB,MAAO0H,EAAK3O,SACZqQ,QAAS,kBAAMkyB,GAAoB5zB,IAHrC,SAKGA,EAAKnJ,YAJDmJ,EAAK3O,qBAWpB,eAAC,GAAD,CACEoL,UAAWA,EACXC,MAAO,CAAEqL,gBAAiB,WAE5B,uBACEvG,UAAU,YACV9E,MAAO,CACL6B,QAAS,OACTE,WAAY,SACZ+1B,WAAW,GAAD,OAAM/3B,EAAwB,SAAZ,YALhC,UAQE,eAACgF,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,OACbrQ,QAAS,UAGX2B,QAAS6yB,GAVX,SAYE,eAAC,KAAD,MAEF,eAAC9yB,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRqL,YAAa,SACbrQ,QAAS,UAEX2B,QAASoyB,GARX,SAUE,eAAC,KAAD,MAGF,eAACryB,GAAA,EAAD,CACEtE,KAAK,SACLP,KAAK,QACLF,MAAO,CACLqI,OAAQ,6BACRkL,WAAY,SACZG,YAAa,OACbrQ,QAAS,UAEX2B,QAASwyB,GATX,SAWE,eAAC,KAAD,MAGF,kCACGd,GAAUtiC,UADb,MAC2BsiC,GAAU5a,cAIvC,sBACEhX,UAAU,gBACV9E,MAAO,CACL2C,UAAW,OACXm1B,WAAW,GAAD,OAAM/3B,EAAwB,SAAZ,YAJhC,SAOE,eAAC,KAAD,CACEiC,OAAO,OACP+1B,KAAK,OACLrsB,IAAK6pB,EACLmC,uBAAwBA,GACxBC,gBAAiBA,OAIrB,eAAC,GAAD,CACE/vB,SAAUA,EACVyC,UAAWA,EACXinB,gBAAiBA,EACjBC,WAAYA,EACZE,cAAeA,IAGjB,eAAC,GAAD,CACE8C,WAAYA,EACZZ,cAAeA,EACfC,YAAaA,EACbnC,cAAeA,IAGjB,eAAC,GAAD,CACE0D,aAAcA,EACdC,gBAAiBA,EACjB3D,cAAeA,aAuCtBiE,GA5BH,sBACE11B,MAAO,CACLgC,OAAQ,QACRH,QAAS,OACTC,eAAgB,SAChBC,WAAY,UALhB,SAQE,kD,wDCxQOi2B,GA9SQ,WACrB,OACE,eAAC,WAAD,UACE,gBAAC,KAAD,CACEC,aAAc,GACdC,YAAY,EAFd,UAIE,eAAC,KAAD,CACEl4B,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,iBCvSlBw5B,KAAWC,IAAI,CAACC,OAQhB,IA8SeC,GA9SO,WAEpB,OACE,eAAC,WAAD,UAEE,gBAAC,KAAD,CACEL,aAAc,GACdC,YAAY,EAFd,UAIE,eAAC,KAAD,CACEl4B,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,mEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,mEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,mEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,mEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,mEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,mEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,mEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,mEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,mEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,iBC5SlBw5B,KAAWC,IAAI,CAACC,OAShB,IA+LeE,GA/LW,WAExB,OACE,eAAC,WAAD,UAEE,gBAAC,KAAD,CACEN,aAAc,GACdC,YAAY,EAFd,UAIE,eAAC,KAAD,CACEl4B,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAIV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,qGACJC,IAAI,OACJ9D,MAAM,iBCnMlBw5B,KAAWC,IAAI,CAACC,OAQhB,IA4JeG,GA5JQ,WACrB,OACE,eAAC,WAAD,UACE,gBAAC,KAAD,CACEP,aAAc,GACdC,YAAY,EAFd,UAIE,eAAC,KAAD,CACEl4B,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oEACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oEACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oEACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oEACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oEACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oEACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oEACJC,IAAI,OACJ9D,MAAM,WAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oEACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,oEACJC,IAAI,OACJ9D,MAAM,gBC3JlBw5B,KAAWC,IAAI,CAACC,OAQhB,IA8DeI,GA9DO,WAEpB,OACE,eAAC,WAAD,UAEE,gBAAC,KAAD,CACER,aAAc,GACdC,YAAY,EAFd,UAIE,eAAC,KAAD,CACEl4B,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,6DACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,6DACJC,IAAI,OACJ9D,MAAM,UAGV,eAAC,KAAD,CACEqB,MAAO,CACLrB,MAAO,OACPqD,OAAQ,QACRqJ,gBAAiB,aACjBxJ,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,sBACES,IAAI,6DACJC,IAAI,OACJ9D,MAAM,gBC9ClBw5B,KAAWC,IAAI,CAACC,OAahB,I,GAqGeK,GArGM,WAEnB,MAAkC/3B,mBAAS,UAA3C,oBAAOg4B,EAAP,KAAkBC,EAAlB,KACMj7B,EAAWsD,cACX3L,EAAawL,aAAY,SAAC5N,GAAD,OAAWA,EAAMqK,SAASjI,cAoBnD4sB,EAAc,SAACyW,GACnBC,EAAaD,GACbh7B,EAASzG,GAAcyhC,KAGzB,OACE,iCACE,0BACE34B,MAAO,CACL+S,SAAU,SACVC,IAAK,EACL3H,gBAAiB,QACjBC,OAAQ,GALZ,UAQE,eAAC,GAAD,IACA,eAAC/C,GAAA,EAAD,OAEF,gCACE,eAACpF,GAAA,EAAD,CAAMC,WAAS,EAAf,SACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,eAAC,GAAD,UACE,gBAAC,GAAD,WACE,gBAAC,GAAD,WACE,uBAAKvD,MAAO,CAAE+G,KAAM,GAApB,UACE,4EAAgB4xB,KAChB,gEAGF,eAAC7M,GAAA,EAAD,CAAa9rB,MAAO,CAAErB,MAAO,OAAQoI,KAAM,GAA3C,SACE,gBAACilB,GAAA,EAAD,CACEpwB,MAAO+8B,EACPlyB,SAAU,SAAC7C,GAAD,OAAOse,EAAYte,EAAEC,OAAOjI,QAFxC,UAIE,eAACswB,GAAA,EAAD,CACEtwB,MAAM,SACNoJ,QAAS,kBAAMkd,EAAY,WAF7B,0BAMA,eAACgK,GAAA,EAAD,CACEtwB,MAAM,SACNoJ,QAAS,kBAAMkd,EAAY,WAF7B,0BAMA,eAACgK,GAAA,EAAD,CACEtwB,MAAM,QACNoJ,QAAS,kBAAMkd,EAAY,UAF7B,gCAMA,eAACgK,GAAA,EAAD,CACEtwB,MAAM,YACNoJ,QAAS,kBAAMkd,EAAY,cAF7B,gCAMA,eAACgK,GAAA,EAAD,CACEtwB,MAAM,QACNoJ,QAAS,kBAAMkd,EAAY,UAF7B,wCA5EG,SAAC5O,GAEtB,OADA3Z,QAAQC,IAAI0Z,GACJA,GACN,IAAK,SACH,OAAO,eAAC,GAAD,IACT,IAAK,SACH,OAAO,eAAC,GAAD,IACT,IAAK,QACH,OAAO,eAAC,GAAD,IACT,IAAK,YACH,OAAO,eAAC,GAAD,IACT,IAAK,QACH,OAAO,eAAC,GAAD,IACT,QACE,OAAO,eAAC,GAAD,KAuEEE,CAAele,kBCFjBujC,GAlGG,WAChB,IAAQ33B,EAAoBC,cAApBD,gBACF8N,EAAUC,eACV9P,EAAW2B,aAAY,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAOpC,aAC/CmH,EAAciD,uBAClB,SAAChD,EAASC,GACRJ,EAAgBI,EAAS,CACvBD,cAGJ,CAACH,IAGHK,qBAAU,WACoC,OAAxC9D,eAAeC,QAAQ,eACzB0D,EAAY,QAAS,2EACrB4N,EAAQ9Y,KAAK,QAKd,CAACkL,EAAa4N,IAGjB,MAAyDzS,2UAAjDu8B,EAAR,EAAQA,wBAAyBC,EAAjC,EAAiCA,oBAC7BC,EAASpgB,iBAAO,MAsDpB,OARArX,qBAAU,WAER,OA9CAy3B,EAAO3f,QAAU,IAAI4f,KAAKC,OACxBJ,EACAjhB,OAAOwD,SAAS0d,GAChB,WAAY,IAAIlf,MAAOsf,WAEzBH,EAAO3f,QAAQ+f,iBAAmB,WAChCz/B,QAAQC,IAAI,8BAEdo/B,EAAO3f,QAAQggB,iBAAmB,SAACC,GACjC,IAAMC,EAAW17B,KAAKC,MAAMw7B,EAAIE,eACxB/rB,EAAsB8rB,EAAtB9rB,SAAUnM,EAAYi4B,EAAZj4B,QAClBF,EAAYqM,EAAUnM,IAGxB03B,EAAO3f,QAAQogB,QAAQ,CACrBC,UAAW,WACT,IAAQt/B,EAAkC+E,EAAlC/E,gBAAiBC,EAAiB8E,EAAjB9E,aAEzBV,QAAQC,IAAIQ,GAEY,iBAApBA,IACF4+B,EAAO3f,QAAQsgB,UAAf,WAA6Bt/B,IAC7B2+B,EAAO3f,QAAQsgB,UAAf,WAA6Bt/B,EAA7B,QAGsB,kBAApBD,EACF4+B,EAAO3f,QAAQsgB,UAAf,WAA6Bt/B,EAA7B,cAC6B,gBAApBD,EACT4+B,EAAO3f,QAAQsgB,UAAf,WAA6Bt/B,EAA7B,YAC6B,eAApBD,EACT4+B,EAAO3f,QAAQsgB,UAAf,WAA6Bt/B,EAA7B,WAC6B,mBAApBD,GACT4+B,EAAO3f,QAAQsgB,UAAf,WAA6Bt/B,EAA7B,eAGFV,QAAQC,IAAI,6CAWT,WALPo/B,EAAO3f,QAAQugB,gBASd,IAGD,eAAC,WAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOC,KAAK,aAAaC,OAAK,EAACp3B,UAAWmjB,KAC1C,eAAC,KAAD,CAAOgU,KAAK,uBAAuBn3B,UAAWmQ,KAC9C,eAAC,KAAD,CACEgnB,KAAK,+BACLn3B,UAAW4S,KAEb,eAAC,KAAD,CAAOukB,KAAK,wBAAwBn3B,UAAWia,KAC/C,eAAC,KAAD,CAAOkd,KAAK,oBAAoBn3B,UAAWqrB,KAC3C,eAAC,KAAD,CAAO8L,KAAK,qBAAqBn3B,UAAWytB,KAC5C,eAAC,KAAD,CAAO0J,KAAK,yBAAyBn3B,UAAW4yB,KAChD,eAAC,KAAD,CAAOuE,KAAK,sBAAsBn3B,UAAWg2B,WC9DtCqB,GApDE,WACf,OACE,iCACE,yBACE/5B,MAAO,CACL+S,SAAU,SACVC,IAAK,EACL3H,gBAAiB,QACjBC,OAAQ,GALZ,SAQE,eAAC,GAAD,MAEF,kCACE,eAAC,GAAD,UACE,eAACvF,GAAA,EAAD,CACExD,SAAS,KACTvC,MAAO,CACLg6B,gBAAgB,mCAChBh4B,OAAQ,OACRrD,MAAO,OACPs7B,mBAAoB,SACpBC,iBAAkB,YAClBC,eAAgB,WARpB,SAWE,uBACEn6B,MAAO,CACL2C,UAAW,OACXmgB,UAAW,UAHf,UAME,eAAC,GAAD,CAAkBzhB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,uEAGA,sBACEL,MAAO,CACL2C,UAAW,QAFf,SAKE,eAAC,GAAD,CAAkBtB,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,uIAMU,W,qBClCX+5B,GAdO37B,aAAOC,KAAPD,CAAH,8OAIR,SAACsF,GAAD,OAAWA,EAAMlF,OAAS,WACf,SAACkF,GAAD,OAAWA,EAAMs2B,UAAY,WAG3B,SAACt2B,GAAD,OAAWA,EAAMu2B,YAE7B,SAACv2B,GAAD,OAAWA,EAAMsE,UAClB,SAACtE,GAAD,OAAWA,EAAMpF,S,iDCmHb47B,I,eAAAA,GArGf,SAAmBx2B,GAKjB,MAAwBpD,mBAAS,GAAjC,oBAAOgP,EAAP,KAAagS,EAAb,KACA,EAAiChhB,mBAAS65B,IAA1C,oBAAOtwB,EAAP,KAAkBuwB,EAAlB,KACA,EAAsC95B,mBAAS,IAA/C,oBAAO4U,EAAP,KAAoBqM,EAApB,KACA,EAA4BjhB,mBAAS,IAArC,oBAAO5H,EAAP,KAAe2hC,EAAf,KAqCA,OACE,uCACE,eAACC,GAAA,EAAD,CAAOl0B,SAdY,SAACrE,GACtBs4B,EAAUt4B,EAAMyB,OAAOjI,UAcrB,eAAC8C,GAAA,EAAD,CAAQsG,QA1BQ,SAAC5C,GACnBq4B,GAAY,SAACD,GAAD,6BACPA,GADO,CAEV,CACEI,cAAe,SACfC,cAAe,kBAqBjB,kDAEA,eAACvxB,GAAA,EAAD,CAAgB5G,UAAW6I,KAA3B,SACE,gBAAChC,GAAA,EAAD,CAAOrJ,KAAK,QAAZ,UACE,eAACsJ,GAAA,EAAD,UACE,gBAACG,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,iBACA,eAACA,GAAA,EAAD,kCACA,eAACA,GAAA,EAAD,kCACA,eAACA,GAAA,EAAD,uCAGJ,eAACC,GAAA,EAAD,UACGQ,EACEnW,QAAO,SAAUgC,GAEhB,OAAOA,EAAQ8kC,cAAc7Y,SAASjpB,MAEvCgd,MAAMpG,EAAO4F,GAAc5F,EAAO,GAAK4F,GACvC5hB,KACC,WAEEmnC,GAFF,IACIC,EADJ,EACIA,YAAaF,EADjB,EACiBA,cAAeG,EADhC,EACgCA,cAAeC,EAD/C,EAC+CA,cAD/C,OAIE,gBAACtxB,GAAA,EAAD,WACE,eAACF,GAAA,EAAD,CAAW/G,UAAU,KAAK8H,MAAM,MAAhC,SACGmF,EAAO4F,EAAculB,EAAI,IAE5B,eAACrxB,GAAA,EAAD,UAAYoxB,IACZ,eAACpxB,GAAA,EAAD,UAAYuxB,IACZ,eAACvxB,GAAA,EAAD,UAAYwxB,MANCF,QAWvB,eAACvM,GAAA,EAAD,UACE,eAAC7kB,GAAA,EAAD,UACE,eAACqM,GAAA,EAAD,CACE7f,MAAO+T,EAAUjU,OACjB0Z,KAAMA,EACN4F,YAAaA,EACb8M,aA9EW,SAACjgB,EAAOkgB,GAC/B3oB,QAAQC,IAAI,YAAa0oB,GACzBX,EAAQW,IA6EIC,oBA1EkB,SAACngB,GAC/Bwf,EAAevG,SAASjZ,EAAMyB,OAAOjI,MAAO,KAC5C+lB,EAAQ,IAyEIS,mBAAoB,CAAC,EAAG,GAAI,mBCjGtC8Y,GAAWz8B,KAAOO,IAAV,mKASRm8B,GAAgB18B,aAAO,MAAPA,CAAc,CAClC4J,OAAQ,SAACtE,GAAD,OAAWA,EAAMsE,QACzBrG,OAAQ,IACRH,QAAS,OACTmL,WAAY,SAACjJ,GAAD,OAAWA,EAAMs2B,UAAY,SACzCh3B,QAAS,KAKL+3B,GAAc38B,aAAO,IAAPA,CAAY,CAC9BskB,SAAU,GACVrC,WAAY,OACZ1Z,OAAQ,KAIJb,GAAe1H,aAAO,MAAPA,CAAc,CACjCoD,QAAS,OACTwB,QAAS,KAILg4B,GAAc58B,aAAO,KAAPA,CAAa,CAC/BE,MAAO,IACPgE,UAAW,GACXX,OAAQ,KAIJs5B,GAAmB78B,aAAO88B,KAAP98B,CAAuB,CAC9C0jB,MAAO,WAGHqZ,GAAU/8B,aAAO,MAAPA,CAAc,CAC5B6D,cAAe,MACfP,WAAY,SACZD,eAAgB,kBAIZ25B,GAAeh9B,aAAO6lB,KAAP7lB,CAAe,CAClCoD,QAAS,OACTG,OAAQ,GACRrD,MAAO,GACPqI,OAAQ,KAIJyF,GAAYC,aAAW,CAC3BgvB,KAAM,CACJ/8B,MAAO,KAETg9B,SAAU,CACRh9B,MAAO,UAsNIi9B,GAjNM,WACnB,IAsBc3zB,EAtBRmF,EAAUX,KAEhB,EAA0BxH,IAAMtE,SAAS,CACvCqS,KAAK,EACL6oB,MAAM,EACNpoB,QAAQ,EACR2Z,OAAO,IAJT,oBAAOl6B,EAAP,KAAc4oC,EAAd,KAQMj0B,EAAe,SAACI,EAAQH,GAAT,OAAkB,SAAC1F,KAEpCA,GACe,YAAfA,EAAM3B,MACS,QAAd2B,EAAMuE,KAA+B,UAAdvE,EAAMuE,MAKhCm1B,EAAS,2BAAK5oC,GAAN,mBAAc+U,EAASH,OA0CjC,OACE,uCACE,iCACE,8EACA,uEACA,wBAEA,eAAC,GAAD,CACEuyB,SAAS,UACTC,SAAS,OACTt1B,QAAS6C,EAAa,SAAS,GAHjC,gCAOA,wBAEA,eAAC,GAAD,CAAewyB,SAAS,UAAUC,SAAS,SAAS37B,MAAM,QAA1D,gEAGA,wBAEA,eAAC,GAAD,CAAe07B,SAAS,UAAUC,SAAS,SAAS37B,MAAM,QAA1D,oDAGA,wBAEA,eAAC,GAAD,CACEuB,KAAK,QACLrB,MAAM,OACNw7B,SAAS,QACThyB,OAAO,iBAJT,uCAQA,wBAEA,eAAC,GAAD,CAAegyB,SAAS,UAAUC,SAAS,OAA3C,0BAGA,wBAEA,eAAC,GAAD,CAAeD,SAAS,UAAUC,SAAS,OAA3C,0BAGA,wBAEA,eAAC,GAAD,CAAeD,SAAS,UAAUC,SAAS,SAA3C,0BAGA,wBAEA,eAAC,GAAD,CAAeD,SAAS,UAAUC,SAAS,MAA3C,0BAGA,wBAEA,eAAC,GAAD,CAAeD,SAAS,UAAUC,SAAS,UAA3C,0BAGA,wBAEA,eAAC,GAAD,CACEp6B,KAAK,QACLrB,MAAM,OACNw7B,SAAS,QACThyB,OAAO,iBAJT,uCAQA,wBAEA,eAAC,GAAD,CAAegyB,SAAS,UAAU17B,MAAM,QAAQ27B,SAAS,OAAzD,uCAGA,wBAEA,eAAC,GAAD,CAAeD,SAAS,UAAUC,SAAS,SAAS37B,MAAM,QAA1D,oDAGA,wBAEA,eAAC,GAAD,CAAe07B,SAAS,UAAU17B,MAAM,QAAQ27B,SAAS,OAAzD,sDAKF,iCACE,uEACA,eAACY,GAAD,UACE,eAACjO,GAAA,EAAD,CACE8O,WAAY,CACVC,eACE,eAACC,GAAA,EAAD,CAAgBlpB,SAAS,QAAzB,SACE,eAAC,KAAD,CAAU7S,KAAM,QAItBoG,YAAY,wEACZoL,WAAS,MAGb,wBAEA,eAACwpB,GAAD,UACE,eAACjO,GAAA,EAAD,CACE8O,WAAY,CACVC,eACE,eAACC,GAAA,EAAD,CAAgBlpB,SAAS,QAAzB,SACE,eAAC,KAAD,CAAU7S,KAAM,QAItBoG,YAAY,8EACZoL,WAAS,MAGb,wBAEA,eAACipB,GAAA,EAAD,CAAOr0B,YAAY,wEAAiBoL,WAAS,IAC7C,2BAGF,eAAC7B,GAAA,EAAD,CACE5H,OAAQ,QACRH,KAAM5U,EAAK,MACXiV,QAASN,EAAa,SAAS,GAHjC,UAjKUI,EAsKF,QArKV,sBACEnD,UAAWgL,aAAK1C,EAAQsuB,KAAT,gBACZtuB,EAAQuuB,SAAsB,QAAX1zB,GAA+B,WAAXA,IAE1Ci0B,KAAK,eACLl3B,QAAS6C,EAAaI,GAAQ,GAC9Bk0B,UAAWt0B,EAAaI,GAAQ,GANlC,SAQE,2BAAUvV,KAAK,aAAf,SACE,uBAAKsN,MAAO,CAAErB,MAAO,QAArB,UACE,gBAAC,GAAD,WACE,eAAC08B,GAAD,oDACA,eAACC,GAAD,CAAkBp7B,KAAM,QAE1B,gBAACi7B,GAAD,CAAed,SAAS,UAAxB,UACE,eAACoB,GAAD,CAAcj5B,IAAI,0CAClB,gBAAC,GAAD,WACE,mEACA,kDAGJ,eAAC44B,GAAD,iCACA,eAACA,GAAD,iCACA,eAACA,GAAD,qBACA,eAACA,GAAD,2BACA,eAAChX,GAAA,EAAD,UACG,CAAC,qBAAO,qBAAO,SAAK,gBAAMzwB,KAAI,SAACwmB,EAAM1Y,GAAP,OAC7B,gBAACqd,GAAA,EAAD,CAAU3gB,QAAM,EAAhB,UACE,eAAComB,GAAA,EAAD,CAAcC,QAASrK,IACvB,eAACzb,GAAA,EAAD,oBAFoByb,kBA6I9B,eAAC,GAAD,QCjOSiiB,GApDG,WAChB,OACE,iCACE,eAAC,GAAD,CAAcp8B,MAAO,CAAEqD,QAAS,OAAhC,SACE,+CAEF,gBAACF,GAAA,EAAD,CAAMC,WAAS,EAACgF,QAAS,EAAGpI,MAAO,CAAEqD,QAAS,OAA9C,UACE,gBAACF,GAAA,EAAD,CACEG,MAAI,EACJ4C,GAAI,EACJD,GAAI,EACJzC,GAAI,EACJwC,GAAI,EACJzC,GAAI,EACJvD,MAAO,CAAE0gB,WAAY,OAAQ3e,WAAY,UAP3C,UASE,qDACA,gBAACoB,GAAA,EAAD,CAAMC,WAAS,EAACpD,MAAO,CAAE2C,UAAW,OAApC,UACE,eAACQ,GAAA,EAAD,CACEG,MAAI,EACJ4C,GAAI,EACJD,GAAI,EACJzC,GAAI,EACJwC,GAAI,EACJzC,GAAI,EACJvD,MAAO,CAAE0gB,WAAY,OAAQ3e,WAAY,UAP3C,SASE,eAAC,GAAD,CAAkBV,QAAQ,KAAKqB,UAAU,KAAKrC,OAAQ,EAAtD,wCAIF,eAAC8C,GAAA,EAAD,CAAMG,MAAI,EAAC4C,GAAI,EAAGD,GAAI,EAAGzC,GAAI,EAAGwC,GAAI,EAAGzC,GAAI,EAA3C,SACE,eAAC,GAAD,YAIN,eAACJ,GAAA,EAAD,CACEG,MAAI,EACJ4C,GAAI,EACJD,GAAI,EACJzC,GAAI,EACJwC,GAAI,EACJzC,GAAI,EACJvD,MAAO,CAAEqL,gBAAiB,QAP5B,SASE,qECvCKgxB,GARI,WACjB,OACE,+BACE,eAAC,GAAD,OCYSC,GAXK79B,aAAOC,KAAPD,CAAH,6NAKN,kBAAkC,UAAlC,EAAG89B,UAAyC,UAAY,WCR7DC,GAAc/9B,KAAOO,IAAV,4NAqCFw8B,GAvBC,SAAC,GAAc,IAAZnlC,EAAW,EAAXA,KACTkkB,EAAoBlkB,EAApBkkB,IAAK7nB,EAAe2D,EAAf3D,KAAMwpC,EAAS7lC,EAAT6lC,KAEnB,OACE,uBACEl8B,MAAO,CACLqD,QAAS,SACTxB,QAAS,OACTE,WAAY,SACZD,eAAgB,QALpB,UAQE,eAAC06B,GAAD,UACE,iCACE,qBAAIx8B,MAAO,CAAErB,MAAO,QAApB,SAA+BjM,IAC/B,qBAAIsN,MAAO,CAAErB,MAAO,QAApB,SAA+Bu9B,SAGnC,eAAC5X,GAAA,EAAD,CAAQ9hB,IAAK+X,QC/Bb1I,GAAgBpT,KAAOO,IAAV,+gBA+Bby9B,GAAe,CACnBliB,IAAK,2BACL7nB,KAAM,YACNwpC,KAAM,eAiCOQ,GA9BI,WACjB,MAAgC/7B,oBAAS,GAAzC,oBAAOqR,EAAP,KAAkBC,EAAlB,KAEM0qB,EAAiBt4B,uBAAY,WACjC4N,GAAW,SAACzN,GAAD,OAAgBA,OAC1B,IAEH,OACE,gBAAC,GAAD,WACE,sBAAKM,UAAU,YAAf,SACE,sBAAKtC,IAAI,2BAA2BC,IAAI,OAAO9D,MAAM,WAEvD,uBAAKmG,UAAU,aAAf,UAEGkN,EAAY,eAAC,GAAD,CAAS3b,KAAMomC,KAAmB,GAI/C,eAAC,GAAD,CACE33B,UAAU,gBACVy3B,UAAWvqB,EAAUmS,WACrBnf,QAAS23B,EAHX,SAKG3qB,EAAY,SAAW,iBCCnB4qB,GAhECn+B,KAAOO,IAAV,onCCkKE69B,GA1JK,WAClB,IAAMl/B,EAAWsD,cAEjB,EAAyCH,aACvC,SAAC5N,GAAD,OAAWA,EAAMmJ,OAAO/B,eADlBE,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAAUvG,EAA7B,EAA6BA,QASvB8a,EAAUC,eAEV6tB,EAAmB,SAACntB,GACxBX,EAAQ9Y,KAAKyZ,IAGf,OACE,gBAAC,GAAD,WACE,uBAAK7K,UAAU,iBAAf,UACE,8CACA,0DAEF,eAACyD,GAAA,EAAD,CAAS8K,OAAK,IACd,uBACEvO,UAAU,qBACVE,QAAS,WACPrH,EACE7C,GAAe,CACbpI,KAAM,YACNwG,QAASsB,MANjB,UAWE,eAAC,KAAD,CAAiB0F,KAAM,KACvB,iDACA,eAAC,KAAD,CAAeA,KAAM,QAGvB,gBAAC0K,GAAA,EAAD,CAAUC,GAAIrQ,EAAd,UACE,uBAAKsK,UAAU,sBAAf,UACE,uBACEA,UAAU,iBACVE,QAAS,kBAAM83B,EAAiB,2BAFlC,UAIE,eAAC,KAAD,CAAmB58B,KAAM,KACzB,iEAEF,uBACE4E,UAAU,iBACVE,QAAS,kBAAM83B,EAAiB,yBAFlC,UAIE,eAAC,KAAD,CAAmB58B,KAAM,KACzB,iEAEF,uBACE4E,UAAU,iBACVE,QAAS,kBAAM83B,EAAiB,0BAFlC,UAIE,eAAC,KAAD,CAAmB58B,KAAM,KACzB,8EAEF,uBACE4E,UAAU,iBACVE,QAAS,kBAAM83B,EAAiB,iCAFlC,UAIE,eAAC,KAAD,CAAmB58B,KAAM,KACzB,iFAGJ,eAACqI,GAAA,EAAD,CAAS8K,OAAK,OAGhB,uBACEvO,UAAU,qBACVE,QAAS,WACPrH,EACE7C,GAAe,CACbpI,KAAM,WACNwG,QAASuB,MANjB,UAWE,eAAC,KAAD,CAAiByF,KAAM,KACvB,iDACA,eAAC,KAAD,CAAeA,KAAM,QAGvB,gBAAC0K,GAAA,EAAD,CAAUC,GAAIpQ,EAAd,UACE,uBAAKqK,UAAU,sBAAf,UACE,uBAAKA,UAAU,iBAAf,UACE,eAAC,KAAD,CAAmB5E,KAAM,KACzB,iEAEF,uBAAK4E,UAAU,iBAAf,UACE,eAAC,KAAD,CAAmB5E,KAAM,KACzB,iEAEF,uBAAK4E,UAAU,iBAAf,UACE,eAAC,KAAD,CAAmB5E,KAAM,KACzB,8EAEF,uBAAK4E,UAAU,iBAAf,UACE,eAAC,KAAD,CAAmB5E,KAAM,KACzB,iFAGJ,eAACqI,GAAA,EAAD,CAAS8K,OAAK,OAGhB,uBACEvO,UAAU,qBACVE,QAAS,WACPrH,EACE7C,GAAe,CACbpI,KAAM,UACNwG,QAAShF,MANjB,UAWE,eAAC,KAAD,CAAiBgM,KAAM,KACvB,iDACA,eAAC,KAAD,CAAeA,KAAM,QAGvB,gBAAC0K,GAAA,EAAD,CAAUC,GAAI3W,EAAd,UACE,uBAAK4Q,UAAU,sBAAf,UACE,uBAAKA,UAAU,iBAAf,UACE,eAAC,KAAD,CAAmB5E,KAAM,KACzB,iEAEF,uBAAK4E,UAAU,iBAAf,UACE,eAAC,KAAD,CAAmB5E,KAAM,KACzB,iEAEF,uBAAK4E,UAAU,iBAAf,UACE,eAAC,KAAD,CAAmB5E,KAAM,KACzB,8EAEF,uBAAK4E,UAAU,iBAAf,UACE,eAAC,KAAD,CAAmB5E,KAAM,KACzB,iFAGJ,eAACqI,GAAA,EAAD,CAAS8K,OAAK,WC4BP0pB,GA/KM,WACnB,IAAQ13B,EAAeF,KAAfE,WACR,EAAyC1E,mBAAS,IAAIkZ,MAAtD,oBAAOmjB,EAAP,KAAqBC,EAArB,KACA,EAA4Ct8B,mBAAS,IAAIkZ,MAAzD,oBAAOwP,EAAP,KAAqBC,EAArB,KAEA,EAA4C3oB,mBAAS,CACnDopB,MAAM,EACND,QAAQ,IAFV,oBAAOI,EAAP,KAAuBL,EAAvB,KAKM6D,EAAe,SAACh7B,GACpBiH,QAAQC,IAAIlH,GACZ,IAAMkJ,EAAQsuB,EAAex3B,GAC7Bm3B,EAAkB,2BACbK,GADY,mBAEdx3B,GAAQkJ,MAIb,OACE,gBAAC,WAAD,WACE,0BAAQoE,MAAO,CAAE+S,SAAU,SAAUC,IAAK,EAAG3H,gBAAiB,SAA9D,UACE,eAAC,GAAD,IACA,eAAC9C,GAAA,EAAD,OAEF,gCACE,gBAACpF,GAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGyC,GAAI,EAAGxC,GAAI,EAAGyC,GAAI,EAApC,SACkB,OAAfZ,EAAsB,eAAC,GAAD,IAAkB,KAE3C,eAAClC,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIyC,GAAI,EAAGxC,GAAI,EAAGyC,GAAI,GAArC,SACE,uBAAKjG,MAAO,CAAEgC,OAAQ,OAAQqB,QAAS,QAAvC,UACE,gBAAC,GAAD,WACE,oDACA,iEAGF,eAACkF,GAAA,EAAD,CAAS8K,OAAK,IAEd,eAAC+T,GAAA,EAAD,CACE+E,eAAa,EACb5E,OAAO,OACPzN,OAAO,aACPsS,MAAO,CAAC,OAAQ,QAAS,QACzBxwB,MAAOohC,EACPv2B,SAAUw2B,IAGZ,eAAC,KAAD,CACE9Q,eAAa,EACb5E,OAAO,OACPzN,OAAO,aACPsS,MAAO,CAAC,OAAQ,QAAS,QACzBxwB,MAAOytB,EACP5iB,SAAU6iB,IAGZ,wBACA,wBACA,uBACEtpB,MAAO,CAAE6B,QAAS,OAAQU,SAAU,QAASP,OAAQ,SADvD,UAGE,gBAAC,GAAD,CACEpD,QAAQ,gBACRoB,MAAO,CACL6B,QAAS,OACTE,WAAY,UAEdiD,QAAS,kBAAM0oB,EAAa,SAN9B,UAQGxD,EAAeH,MACd,gBAAC,WAAD,WACE,eAAC,KAAD,CAAclrB,MAAM,mBAAmBqB,KAAM,KAC7C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CAAEnB,MAAO,QAASX,WAAY,QAHvC,uCAUJgsB,EAAeH,MACf,gBAAC,WAAD,WACE,eAAC,KAAD,CAAclrB,MAAM,kBAAkBqB,KAAM,KAC5C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,kBACPX,WAAY,QALhB,yCAcR,gBAAC,GAAD,CACEU,QAAQ,gBACRoB,MAAO,CACL6B,QAAS,OACTE,WAAY,UAEdiD,QAAS,kBAAM0oB,EAAa,WAN9B,UAQGxD,EAAeJ,QACd,gBAAC,WAAD,WACE,eAAC,KAAD,CAAgBjrB,MAAM,mBAAmBqB,KAAM,KAC/C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CAAEnB,MAAO,QAASX,WAAY,QAHvC,yCAUJgsB,EAAeJ,QACf,gBAAC,WAAD,WACE,eAAC,KAAD,CAAgBjrB,MAAM,kBAAkBqB,KAAM,KAC9C,sBACEF,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBiF,KAAM,GAJV,SAOE,eAAC,GAAD,CACE1F,QAAQ,YACRhB,OAAQ,EACRL,MAAO,CACLnB,MAAO,kBACPX,WAAY,QALhB,4DCjJTg/B,GAXO,kBACpB,eAAC,WAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOrD,KAAK,oBAAoBC,OAAK,EAACp3B,UAAW25B,KACjD,eAAC,KAAD,CAAOxC,KAAK,uBAAuBC,OAAK,EAACp3B,UAAWy6B,OACpD,eAAC,KAAD,CAAOtD,KAAK,sBAAsBC,OAAK,EAACp3B,UAAWk5B,KACnD,eAAC,KAAD,CAAO/B,KAAK,sBAAsBC,OAAK,EAACp3B,UAAWq6B,WCe1CK,GAbD,WACZ,OACE,eAAC,WAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOvD,KAAK,IAAIC,OAAK,EAACp3B,UAAWq3B,KACjC,eAAC,KAAD,CAAOF,KAAK,aAAan3B,UAAWm2B,KACpC,eAAC,KAAD,CAAOgB,KAAK,aAAan3B,UAAWw6B,WCR7BG,GATH,WACV,OACE,gBAAC,WAAD,WACE,eAAC,GAAD,IACA,eAAC,GAAD,QCISC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,6CCUd3jB,KAAOmkB,OAAO,MAEdC,IAAS/G,OACP,eAAC,IAAD,UACE,eAACgH,EAAA,EAAD,CAAgBC,aAAW,EAA3B,SACE,eAACC,EAAA,EAAD,CAAepgC,MAAOqgC,GAAtB,SACE,eAAC,IAAD,CAAU5hC,MAAOA,GAAjB,SACE,eAAC,IAAD,CACE6hC,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdC,oBAAqBC,KALvB,SAOE,eAAC,KAAD,CAAyBC,YAAa9kB,KAAQ+kB,MAAOC,KAArD,SACE,eAAC,GAAD,gBAOZnlB,SAASolB,eAAe,SAM1BvB,O","file":"static/js/main.c84f316d.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const reservationSlice = createSlice({\n  name: 'reservation',\n  initialState: {\n    pageStatus: 'INFO',\n    addChangeView: false,\n    inputVal: '',\n    reservationInfo: [],\n  },\n  reducers: {\n\n    setAddChangeView(state, action) {\n      state.addChangeView = action.payload;\n    },\n\n    changePage(state, action) {\n      state.pageStatus = action.payload;\n    },\n    chaneInputVal(state, action) {\n      state.inputVal = action.payload;\n    },\n    setReservationTime(state, action) {\n      const newReservationInfo = state.reservationInfo.concat(action.payload);\n      state.reservationInfo = newReservationInfo;\n    },\n    upateReservationTime(state, action) {\n      const newReservationInfo = state.reservationInfo.map((reservationInfo) => {\n        if(action.payload.id === reservationInfo.id){\n          const newInfo = { ...reservationInfo, drOpinion: action.payload.drOpinion };\n          return newInfo;\n        }else{\n          return reservationInfo;\n        }\n      })\n     state.reservationInfo = newReservationInfo;\n    },\n    removeReservationTime(state, action) {\n      const newReservationInfo = state.reservationInfo.filter((reservationInfo) => {\n        if(action.payload === reservationInfo.id) {\n          return false;\n        }\n        return true;\n      })\n       state.reservationInfo = newReservationInfo;\n    }\n  },\n});\n\nexport const { changePage, chaneInputVal, setReservationTime, upateReservationTime,removeReservationTime, setAddChangeView } = reservationSlice.actions;\n\nexport default reservationSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const diagnosisSlice = createSlice({\n  name: 'diagnosis',\n  initialState: {\n    patient: {\n      id: 0,\n      diagId: 0,\n      startDate: '',\n      visitPurpose: '',\n      patientId: 0,\n      patientName: '',\n      patientGender: '',\n      patientBirth: '',\n    },\n    diagnosisInfo: {\n      diagId: 0,\n      memberId: 0,\n      patientId: 0,\n      drOpinion: '',\n      medicineInfo: [],\n      injectorInfo: [],\n      diagnosticInfo: [],\n      vitalInfo: {},\n    },\n    medicineInfo: [],\n    injectorInfo: [],\n    diagnosticInfo: [],\n    drawerStatus: {\n      medicine: false,\n      injector: false,\n      diagnostic: false,\n      diagnosisHistory: false,\n    },\n    modalStatus: false,\n    activeStep: 0,\n  },\n  reducers: {\n    setPatient(state, action) {\n      state.patient = action.payload;\n    },\n    setMedicineDrawer(state, action) {\n      state.drawerStatus.medicine = action.payload;\n    },\n    setInjectorDrawer(state, action) {\n      state.drawerStatus.injector = action.payload;\n    },\n    setDiagnosisInfo(state, action) {\n      const { medicineInfo, injectorInfo, diagnosticInfo } = state;\n      const newState = {\n        ...action.payload,\n        medicineInfo,\n        injectorInfo,\n        diagnosticInfo,\n      };\n      state.diagnosisInfo = newState;\n    },\n    addMedicineInfo(state, action) {\n      const { medicineInfo } = state;\n      // 아무런 값이 없는 경우\n      const isExistItem = medicineInfo.findIndex((element) =>\n        element.medicineId === action.payload.medicineId ? true : false,\n      );\n\n      // 배열에 요소가 없거나, 새로운 아이템인 경우 바로 상태에 추가시킨다.\n      if (medicineInfo.length === 0 || isExistItem === -1) {\n        medicineInfo.push(action.payload);\n      } else if (isExistItem !== -1) {\n        // 값이 있는데 값을 추가하고 싶은 경우\n        medicineInfo[isExistItem] = {\n          ...medicineInfo[isExistItem],\n          count: action.payload.count,\n        };\n      }\n    },\n    removeMedicineInfo(state, action) {\n      const { medicineInfo } = state;\n      const newState = medicineInfo.filter((data) => {\n        if (data.medicineId === action.payload.medicineId) {\n          return false;\n        }\n        return true;\n      });\n      state.medicineInfo = newState;\n    },\n    addInjectorInfo(state, action) {\n      const { injectorInfo } = state;\n      // 아무런 값이 없는 경우\n      const isExistItem = injectorInfo.findIndex((element) =>\n        element.medicineId === action.payload.medicineId ? true : false,\n      );\n\n      // 배열에 요소가 없거나, 새로운 아이템인 경우 바로 상태에 추가시킨다.\n      if (injectorInfo.length === 0 || isExistItem === -1) {\n        injectorInfo.push(action.payload);\n      } else if (isExistItem !== -1) {\n        // 값이 있는데 값을 추가하고 싶은 경우\n        injectorInfo[isExistItem] = {\n          ...injectorInfo[isExistItem],\n          count: action.payload.count,\n        };\n      }\n    },\n    removeInjectorInfo(state, action) {\n      const { injectorInfo } = state;\n      const newState = injectorInfo.filter((data) => {\n        if (data.medicineId === action.payload.medicineId) {\n          return false;\n        }\n        return true;\n      });\n      state.injectorInfo = newState;\n    },\n    addDiagnosticInfo(state, action) {\n      const { diagnosticInfo } = state;\n      // 아무런 값이 없는 경우\n      const isExistItem = diagnosticInfo.findIndex((element) =>\n        element.diagInspectionId === action.payload.diagInspectionId\n          ? true\n          : false,\n      );\n\n      // 배열에 요소가 없거나, 새로운 아이템인 경우 바로 상태에 추가시킨다.\n      if (diagnosticInfo.length === 0 || isExistItem === -1) {\n        diagnosticInfo.push(action.payload);\n      } else if (isExistItem !== -1) {\n        // 값이 있는데 값을 추가하고 싶은 경우\n        diagnosticInfo[isExistItem] = {\n          ...diagnosticInfo[isExistItem],\n          count: action.payload.count,\n        };\n      }\n    },\n    removeDiagnosticInfo(state, action) {\n      const { diagnosticInfo } = state;\n      const newState = diagnosticInfo.filter((data) => {\n        if (data.diagInspectionId === action.payload.diagInspectionId) {\n          return false;\n        }\n        return true;\n      });\n      state.diagnosticInfo = newState;\n    },\n    setDiagnosticDrawer(state, action) {\n      state.drawerStatus.diagnostic = action.payload;\n    },\n    setDiagnosisHistoryDrawer(state, action) {\n      state.drawerStatus.diagnosisHistory = action.payload;\n    },\n\n    addDiagnosticGroupItem(state, action) {\n      action.payload.map((data) => state.diagnosticInfo.push(data));\n    },\n    removeDiagnosticGroupItem(state, action) {\n      const { diagnosticInfo } = state;\n      const filteredItem = diagnosticInfo.filter((data) => {\n        if (data.bundleCode !== action.payload) {\n          return true;\n        }\n        return false;\n      });\n      state.diagnosticInfo = filteredItem;\n    },\n    setDiagnosisModal(state, action) {\n      state.modalStatus = action.payload;\n    },\n    setActiveStep(state, action) {\n      state.activeStep = action.payload;\n    },\n    resetDiagnosisInfos(state) {\n      const initialDiagnosisInfo = {\n        diagId: 0,\n        memberId: 0,\n        patientId: 0,\n        drOpinion: '',\n        medicineInfo: [],\n        injectorInfo: [],\n        diagnosticInfo: [],\n        vitalInfo: {}\n      };\n      const medicineInfo = [];\n      const injectorInfo = [];\n      const diagnosticInfo = [];\n      state.diagnosisInfo = initialDiagnosisInfo\n\n      state.medicineInfo = medicineInfo;\n      state.injectorInfo = injectorInfo;\n      state.diagnosticInfo = diagnosticInfo;\n\n    },\n\n  },\n});\n\nexport const {\n  setPatient,\n  setDiagnosisInfo,\n  addMedicineInfo,\n  removeMedicineInfo,\n  addInjectorInfo,\n  removeInjectorInfo,\n  addDiagnosticInfo,\n  removeDiagnosticInfo,\n  setMedicineDrawer,\n  setInjectorDrawer,\n  setDiagnosticDrawer,\n  setDiagnosisHistoryDrawer,\n  addDiagnosticGroupItem,\n  removeDiagnosticGroupItem,\n  setDiagnosisModal,\n  setActiveStep,\n  resetDiagnosisInfos,\n\n} = diagnosisSlice.actions;\n\nexport default diagnosisSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const noticeSlice = createSlice({\n  name: 'notice',\n  initialState: {\n    activeStep: 'MAIN',\n    noticeItem: [\n      {\n        notice_id: 1,\n        notice_title: '공지사항1',\n        notice_date: '6월 21일',\n        notice_content: '안녕하세요1',\n        notice_author: '홍종현',\n        notice_head_text: '안녕하세요1',\n        notice_head_image: '/assets/image/hospital.png',\n      },\n      {\n        notice_id: 2,\n        notice_title: '공지사항2',\n        notice_date: '6월 9일',\n        notice_content: '안녕하세요2',\n        notice_author: '김형윤',\n        notice_head_text: '안녕하세요2',\n        notice_head_image: '/assets/image/hospital.png',\n      },\n      {\n        notice_id: 3,\n        notice_title: '공지사항3',\n        notice_date: '6월 9일',\n        notice_content: '안녕하세요3',\n        notice_author: '박시현',\n        notice_head_text: '안녕하세요3',\n        notice_head_image: '/assets/image/hospital.png',\n      },\n      {\n        notice_id: 4,\n        notice_title: '공지사항4',\n        notice_date: '6월 9일',\n        notice_content: '안녕하세요4',\n        notice_author: '홍종현',\n        notice_head_text: '안녕하세요4',\n        notice_head_image: '/assets/image/hospital.png',\n      },\n      {\n        notice_id: 5,\n        notice_title: '공지사항5',\n        notice_content: '안녕하세요5',\n        notice_date: '6월 9일',\n        notice_author: '황성욱',\n        notice_head_text: '안녕하세요5',\n        notice_head_image: '/assets/image/hospital.png',\n      },\n      {\n        notice_id: 6,\n        notice_title: '공지사항6',\n        notice_content: '안녕하세요6',\n        notice_date: '6월 9일',\n        notice_author: '김형윤',\n        notice_head_text: '안녕하세요6',\n        notice_head_image: '/assets/image/hospital.png',\n      },\n    ],\n    noticeCurrentIndex: 0,\n  },\n  reducers: {\n    setActiveStep(state, action) {\n      state.activeStep = action.payload;\n    },\n    addNoticeItem(state, action) {\n      const newState = state.noticeItem;\n      newState.push(action.payload);\n      state.noticeItem = newState;\n    },\n    modifyNoticeItem(state, action) {\n      const newState = state.noticeItem;\n      const isExistedItem = newState.findIndex((data) =>\n        data.notice_id === action.payload.notice_id ? true : false,\n      );\n\n      // 배열에 아이템이 없지 않다면 값을 바꾼다.\n      if (isExistedItem !== -1) {\n        newState[isExistedItem] = action.payload;\n        state.noticeItem = newState;\n      }\n    },\n    removeNoticeItem(state, action) {\n      const filteredItem = state.noticeItem.filter((data) => {\n        if (data.notice_id !== action.payload.notice_id) {\n          return true;\n        }\n        return false;\n      });\n      state.noticeItem = filteredItem;\n    },\n    setNoticeCurrentIndex(state, action) {\n      state.noticeCurrentIndex = action.payload;\n    },\n  },\n});\n\nexport const {\n  setActiveStep,\n  addNoticeItem,\n  modifyNoticeItem,\n  removeNoticeItem,\n  setNoticeCurrentIndex,\n} = noticeSlice.actions;\n\nexport default noticeSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const emergencySlice = createSlice({\n  name: 'emergency',\n  initialState: {\n    activeStep: 'MAIN',\n    emergencyItem: [\n      {\n        emergency_id: 1,\n        emergency_name: '병원 대표번호',\n        emergency_tel: '02-212-8282',\n        emergency_line: '내선',\n      },\n      {\n        emergency_id: 2,\n        emergency_name: '송파구 보건소',\n        emergency_tel: '02-2147-3455',\n        emergency_line: '외선',\n      },\n      {\n        emergency_id: 3,\n        emergency_name: '더존병원 응급실',\n        emergency_tel: '02-721-8282',\n        emergency_line: '내선',\n      },\n      {\n        emergency_id: 4,\n        emergency_name: '더존병원 홍길동 교수',\n        emergency_tel: '010-9993-8282',\n        emergency_line: '내선',\n      },\n      {\n        emergency_id: 5,\n        emergency_name: '더존병원 구급대원',\n        emergency_tel: '010-2132-8282',\n        emergency_line: '내선',\n      },\n    ],\n    emergencyCurrentIndex: 0,\n  },\n  reducers: {\n    setActiveStep(state, action) {\n      state.activeStep = action.payload;\n    },\n    addEmergencyItem(state, action) {\n      const newState = state.emergencyItem;\n      newState.push(action.payload);\n      state.emergencyItem = newState;\n    },\n\n    removeEmergencyItem(state, action) {\n      const filteredItem = state.emergencyItem.filter((data) => {\n        if (data.emergency_id !== action.payload.emergency_id) {\n          return true;\n        }\n        return false;\n      });\n      state.emergencyItem = filteredItem;\n    },\n    setEmergencyCurrentIndex(state, action) {\n      state.emergencyCurrentIndex = action.payload;\n    },\n  },\n});\n\nexport const {\n  setActiveStep,\n  addEmergencyItem,\n  removeEmergencyItem,\n  setEmergencyCurrentIndex,\n} = emergencySlice.actions;\n\nexport default emergencySlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const diagnosisHistorySlice = createSlice({\n  name: 'diagnosisHistory',\n  initialState: {\n    currentPatientId: 0,\n    drawerStatus: {\n      diagnosisHistory: false\n    },\n    modalStatus: {\n      search: false\n    }\n  },\n  reducers: {\n    setPatientId(state, action) {\n      state.currentPatientId = action.payload;\n    },\n    setDrawerStatus(state, action) {\n      const { name, status } = action.payload;\n      state.drawerStatus[name] = status;\n    },\n    setModalStatus(state, action) {\n      const { name, status } = action.payload;\n      state.modalStatus[name] = status;\n    }\n  },\n});\n\nexport const { setPatientId, setDrawerStatus, setModalStatus } = diagnosisHistorySlice.actions;\n\nexport default diagnosisHistorySlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const memberSlice = createSlice({\n  name: 'member',\n  initialState: {\n    modalStatus: false,\n    addressInfo: {\n      member_postal: '',\n      member_addr1: '',\n    },\n    gender: '',\n    imageModalStatus: false,\n  },\n  reducers: {\n    setModalStatus(state, action) {\n      state.modalStatus = action.payload; //http.body\n    },\n    setAddressInfo(state, action) {\n      const { member_postal, member_addr1 } = action.payload;\n      console.log('값 저장', action.payload);\n      state.addressInfo = {\n        member_postal,\n        member_addr1,\n      };\n    },\n    setGenderStatus(state, action) {\n      state.gender = action.payload;\n    },\n\n    setImageModalStatus(state, action) {\n      state.imageModalStatus = action.payload;\n    },\n  },\n});\n\nexport const {\n  setModalStatus,\n  setAddressInfo,\n  setGenderStatus,\n  setImageModalStatus,\n} = memberSlice.actions;\n\nexport default memberSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const commonSlice = createSlice({\n  name: 'common',\n  initialState: {\n    authToken: '',\n    loginInfo: {\n      memberId: 0,\n      memberEmail: '',\n      memberName: '',\n      memberAuthority: '',\n      hospitalCode: '',\n    },\n    sidebarInfo: {\n      drawer: false,\n      diagnosis: false,\n      hospital: false,\n      patient: false,\n    },\n    headerInfo: {\n      drawer: false,\n      notification: false,\n      auth: false,\n      diagnosis: false,\n      hospital: false,\n      patient: false,\n    },\n  },\n  reducers: {\n    setLoginInfo(state, action) {\n      // Stringify된 JSON을 파싱해서 Redux의 상태로 적용\n      if (action.payload === '') {\n        return;\n      }\n      state.loginInfo = action.payload;\n      // state.loginInfo = a.payload;\n    },\n    setSidebarInfo(state, action) {\n      const { name, status } = action.payload;\n      state.sidebarInfo[name] = status;\n    },\n    setHeaderInfo(state, action) {\n      const { name, status } = action.payload;\n      state.headerInfo[name] = status;\n    },\n    setAuthToken(state, action) {\n      state.authToken = action.payload;\n    }\n  },\n});\n\nexport const { setLoginInfo, setSidebarInfo, setHeaderInfo, setAuthToken } =\n  commonSlice.actions;\n\nexport default commonSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const diagnosticSlice = createSlice({\n  name: 'diagnostic',\n  initialState: {\n    drawerStatus: {\n      status: false,\n      pageStatus: 'LIST',\n    },\n    modalStatus: {\n      barcode: false,\n      reception: false,\n      bloodDraw: false,\n      search: false,\n    },\n    diagnosticDataInput: {},\n    currentDiagTestId: 0,\n    currentDiagTestList: []\n  },\n  reducers: {\n    setDiagnosticDrawer(state, action) {\n      state.drawerStatus.status = action.payload;\n    },\n    setDiagnosticDrawerPage(state, action) {\n      state.drawerStatus.pageStatus = action.payload;\n    },\n    setDiagnosticModal(state, action) {\n      const { name, status } = action.payload;\n      state.modalStatus[name] = status;\n    },\n    setDiagnosticDataInput(state, action) {\n      const { diagTestRecordId, value } = action.payload;\n      state.diagnosticDataInput[diagTestRecordId] = value;\n    },\n    setCurrentDiagTestId(state, action) {\n      state.currentDiagTestId = action.payload;\n    },\n    setCurrentDiagTestList(state, action) {\n      state.currentDiagTestList = action.payload;\n    },\n    resetDiagnosticData(state) {\n      state.diagnosticDataInput = {};\n      state.currentDiagTestId = 0;\n      state.currentDiagTestList = [];\n    }\n\n  },\n});\n\nexport const {\n  setDiagnosticDrawer,\n  setDiagnosticDrawerPage,\n  setDiagnosticModal,\n  setDiagnosticDataInput, setCurrentDiagTestId, setCurrentDiagTestList, resetDiagnosticData\n} = diagnosticSlice.actions;\n\nexport default diagnosticSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const tutorialSlice = createSlice({\n  name: 'notice',\n  initialState: {\n    activeStep: 'MAIN',\n    \n  },\n  reducers: {\n    setActiveStep(state, action) {\n      state.activeStep = action.payload;\n    }\n  }\n});\n\nexport const {\n  setActiveStep\n} = tutorialSlice.actions;\n\nexport default tutorialSlice.reducer;","import axios from 'axios';\naxios.defaults.baseURL = `${process.env.REACT_APP_SERVER_PATH}/api/v1`;\n\n// axios.defaults.baseURL = 'http://localhost:8080/api/v1';\n\nexport function addAuthHeader(authToken) {\n  axios.defaults.headers.common['authToken'] = authToken;\n}\n\nexport function removeAuthHeader() {\n  delete axios.defaults.headers.common['authToken'];\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport reservationReducer from './features/reservation/reservationSlice';\nimport diagnosisReducer from './features/diagnosis/diagnosisSlice';\nimport noticeReducer from './features/notice/noticeSlice';\nimport emergencyReducer from './features/emergency/emergencySlice';\nimport diagnosisHistoryReducer from './features/history/diagnosisHistorySlice';\nimport memberReducer from './features/member/memberSlice';\nimport commonReducer, { setAuthToken, setLoginInfo } from './features/common/commonSlice';\nimport diagnosticReducer from './features/diagnostic/diagnosticSlice';\nimport tutorialReducer from './features/tutorial/tutorialSlice';\nimport { addAuthHeader } from 'apis/axiosConfig';\n\n\nconst store = configureStore({\n  reducer: {\n    common: commonReducer,\n    reservation: reservationReducer,\n    diagnosis: diagnosisReducer,\n    diagnosisHistory: diagnosisHistoryReducer,\n    notice: noticeReducer,\n    diagnostic: diagnosticReducer,\n    member: memberReducer,\n    emergency: emergencyReducer,\n    tutorial: tutorialReducer,\n  },\n});\n\n// Axios에 인증 헤더 추가\nif (sessionStorage.getItem(\"authToken\")) {\n  addAuthHeader(sessionStorage.getItem('authToken'));\n  store.dispatch(setAuthToken(sessionStorage.getItem(\"authToken\")));\n}\n\nif (sessionStorage.getItem(\"userInfo\")) {\n  const parseJSON = JSON.parse(sessionStorage.getItem(\"userInfo\"));\n  store.dispatch(setLoginInfo(parseJSON));\n}\n\n\n\nexport default store;","import { createMuiTheme } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      'Spoqa Han Sans Neo',\n      'Lato',\n      'Noto Sans KR',\n      '-apple-system',\n      'BlinkMacSystemFont',\n    ],\n\n    button: {\n      textTransform: 'none',\n    },\n  },\n});\n\nexport default theme;\n","import { createGlobalStyle } from 'styled-components';\nimport { reset } from 'styled-reset';\n\nconst GlobalStyle = createGlobalStyle`\n    ${reset}\n    \n    body {\n        font-family:  'Spoqa Han Sans Neo', 'Lato', 'Noto Sans KR','-apple-system',\n      'BlinkMacSystemFont',\n       sans-serif;\n        letter-spacing: -0.2px;\n    }\n\n    h1 {\n        font-size: 2rem;\n    }\n\n    h2 {\n        font-size: 1.5rem;\n    }\n\n    h3 {\n        font-size: 1.17em;\n    }\n\n    h4 {\n        font-size: 1em;\n    }\n\n    h5 {\n        font-size: 0.83em;\n    }\n\n    h6 {\n        font-size: 0.67em;\n    }\n    ::-webkit-scrollbar {\n  width: 2px;\n  height: 2px;\n}\n::-webkit-scrollbar-button {\n  width: 0px;\n  height: 0px;\n}\n::-webkit-scrollbar-thumb {\n  background: #e1e1e1;\n  border: 0px none #ffffff;\n  border-radius: 50px;\n}\n::-webkit-scrollbar-thumb:hover {\n  background: #ffffff;\n}\n::-webkit-scrollbar-thumb:active {\n  background: #000000;\n}\n::-webkit-scrollbar-track {\n  background: #666666;\n  border: 0px none #ffffff;\n  border-radius: 50px;\n}\n::-webkit-scrollbar-track:hover {\n  background: #666666;\n}\n::-webkit-scrollbar-track:active {\n  background: #333333;\n}\n::-webkit-scrollbar-corner {\n  background: transparent;\n}\n\n*:focus {\n  outline: none;\n}\n\na{\n  text-decoration: none;\n  color: black;\n}\n\n@media screen and (-webkit-min-device-pixel-ratio:0) { \n  select,\n  textarea,\n  input {\n    font-size: 16px;\n  }\n}\n\n@media print {\n\n  @page { \n    size: A4;\n    display: block;\n    overflow: scroll;\n    height: 100%;\n    margin: 4rem;\n  }\n  .printArea {\n    display: block;\n\n  }\n}\n\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\n/**\n * 버튼의 색상을 여러가지로 입력 가능한 컴포넌트 (Atom)\n * 사용법 : <StyledButton width={120} bgColor=\"red\" color=\"red\"/>\n * width는 버튼의 폭을 설정할 수 있으며\n * bgColor는 배경 색을 설정할 수 있으며\n * color는 글자의 색을 설정할 수 있습니다.\n * @author SUNG WOOK HWANG\n */\nconst StyledButton = styled(Button)`\n  width: ${({ width }) => width};\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  border-radius: 12px;\n  background-color: ${({ bgColor }) => bgColor || 'purple'};\n  color: ${({ color }) => color};\n\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nStyledButton.defaultProps = {\n  width: '100%',\n  color: 'default',\n};\n\nexport default StyledButton;\n","import styled from 'styled-components';\n\nconst ContentContainer = styled.div`\n  height: 90vh;\n  padding: 2rem;\n`;\n\nexport default ContentContainer;\n","import styled from 'styled-components';\n\nconst TitleHeader = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 1rem;\n  margin-bottom: 1rem;\n\n  span:first-child {\n    font-weight: 700;\n    font-size: 1.8rem;\n    margin-right: 1rem;\n  }\n\n  span:nth-child(2) {\n    font-size: 1.8rem;\n    font-weight: 300;\n  }\n`;\n\nexport default TitleHeader;\n","import axios from 'axios';\n\n/**\n * * 목적 : 오늘 해당 병원의 해당 의사가 진료를 봐야하는 환자의 리스트를 가져오기 위한 API\n * @param {UserInfoVO} userInfo \n * * !String authToken // JWT Token\n * * !int memberId\n * * !String memberEmail\n * * !String memberAuthority\n * * !String hospitalCode\n * \n * @returns {List<DiagnosisListVO>} diagnosisList\n * * [Patients Entity]\n * * !int patientId \n * * !String patientName\n * * !String patientGender\n * * !String patientBirth (LocalDateTime > String)\n * * [Diagnosis Entity]\n * * !int diagId\n * * !String startDate (LocalDateTime > String)\n * * !String visitPurpose (방문 목적)\n * \n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status - \"no_user_info\"\n * * * message - \"UserInfoVO의 값이 정상적으로 들어오지 않았습니다.\"\n * * HTTP Status 204 - No Content\n * > 검색 결과가 존재하지 않을 경우 throw\n * * HTTP Status 409 - Conflict Request\n * * * status - \"no_patient_info\"\n * * * message - \"환자의 정보가 존재하지 않습니다.\"\n */\nexport const getDiagnosisList = async (userInfo) => {\n    const result = await axios.post('/diagnosis', userInfo);\n    return result.data.data;\n}\n\n/**\n * * 목적 : 해당 병원의 해당 의사가 진료를 등록하기 위한 API\n * @param {RegistDiagnosisVO} diagnosisInfo \n * * !int patientId (환자의 PK)\n * * !int memberId (임직원 (의사)의 PK)\n * * !int diagId (진료의 PK)\n * * !String hospitalCode (병원 코드)\n * * !String drOpinion (의사 의견)\n * * List<MedicineVO> medicines (약품 정보들)\n * * * int medicineId (Medicines 엔티티의 PK)\n * * * int medicineDose (약품 수량)\n * * * String medicineType (약품 타입)\n * * List<MedicineVO> injectors (주사 정보들)\n * * List<Integer> diagnostics (진단 검사 정보들)\n * * VitalVO vital (바이탈 검사 정보)\n * * * !int bloodPressure (혈압)\n * * * !int pulse (맥박)\n * * * !int respirationRate (호흡 수)\n * * * !int temperature (온도)\n * @returns {boolean} result (등록 성공 여부)\n * \n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status : \"no_diagnosis_info\"\n * * * message : \"진료 등록 정보가 올바르지 않습니다. 다시 시도해주세요.\"\n * * HTTP Status 409 - Conflict Request\n * * * status : \"not_updated_diagnosis_info\" || \"not_updated_medicines_info\" || \"not_updated_injectors_info\" || \"not_updated_diagnostics_info\" || \"not_updated_vital_info\"\n * * * message : \"알 수 없는 이유로 진료가 등록되지 않았습니다. 다시 시도해주세요.\"\n */\nexport const registDiagnosisInfo = async (diagnosisInfo) => {\n    const result = await axios.put('/diagnosis', diagnosisInfo);\n    return result.data.data;\n}\n\n/**\n * * 목적 : 환자의 식별자 (patientId)를 통해 진료 기록 리스트를 가져오기 위한 API\n\n * @param {number} patientId \n * @returns {List<DiagnosisHistoryVO>} data\n * * !String startDate // 진료를 시작한 날짜 (LocalDateTime > String)\n * * !String visitPurpose // 병원에 내방한 이유\n * * !String drOpinion // 의사 소견\n * * List<MedicineRecordVO> medicines // 약 처방 기록\n * * * !String medicineCode // 약품 코드\n * * * !String medicineType // 약품 타입\n * * * !String medicineUnit // 내복약, 외용약, 주사약 등등..\n * * * !String medicineExplain // 약과 관련된 상세 설명\n * * * !int medicineDose // 처방 양\n * * !List<MedicineRecordVO> injectors // 주사 처방 기록\n * * !List<DiagnosticTestRecordVO> diagnostics // 진단 검사 기록\n * * * [DiagnosisTestRecords Entity]\n * * * * double diagTestValue // 진단 검사의 결과 값\n * * * * !String diagTestStatus // 진단 검사의 상태\n * * * [DiagnosticInspections Entity]\n * * * * !String bundleCode // 그룹 코드\n * * * * !String bundleName // 그룹 명\n * * * * !String presCode // 처방 코드\n * * * * !String presName // 처방 명\n * * * * !String presUnit // 처방 규격\n * * * * !double presLowerLimit // 하한 값\n * * * * double presUpperLimit // 상한 값\n * * VitalRecordsDTO vital // 바이탈 검사 기록\n * \n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status : \"no_patient_id\"\n * * * message : \"회원의 식별자가 입력되지 않았습니다.\"\n * * HTTP Status 204 - No Content\n * > 환자가 진료를 안 받는 것이 이상한 것이 아니므로 No Content\n * \n */\nexport const showDiagnosisHistoryByPatientId = async (patientId) => {\n    const result = await axios.get(\"/diagnosis/history\", {\n        params: {\n            patientId\n        }\n    });\n    return result.data.data;\n}","import React from 'react';\nimport { css } from 'styled-components';\nimport HashLoader from 'react-spinners/HashLoader';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: #364fc7;\n`;\n\nconst HashSpinner = ({ isLoading }) => (\n  <div style={{ width: '100%' }}>\n    <HashLoader color=\"#364fc7\" loading={isLoading} css={override} size={100} />\n  </div>\n);\n\nexport default HashSpinner;\n","import styled from 'styled-components';\nimport { Typography } from '@material-ui/core';\n\nconst StyledTypography = styled(Typography)`\n  font-weight: ${({ weight }) => {\n    const fontWeight = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    if (weight < 1) {\n      return 500;\n    }\n    return fontWeight[weight - 1] * 100;\n  }};\n  color: ${({ color }) => color};\n`;\n\nStyledTypography.defaultProps = {\n  weight: 1,\n  color: 'initial',\n};\n\nexport default StyledTypography;\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { useSnackbar } from 'notistack';\nimport { setPatient } from 'redux/features/diagnosis/diagnosisSlice';\nimport { getDiagnosisList } from 'apis/diagnosisAPI';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\nconst columns = [\n  { field: 'diagId', headerName: '순번', width: 120, type: 'number' },\n  { field: 'patientName', headerName: '환자 이름', width: 150 },\n  { field: 'patientBirth', headerName: '생년월일', width: 150 },\n  { field: 'patientGender', headerName: '성별', width: 120 },\n  { field: 'startDate', headerName: '예약 시간', width: 200 },\n  { field: 'visitPurpose', headerName: '내원 사유', width: 700 },\n];\n\n/**\n * * 해당 의사에게 맞겨진 환자 리스트를 보여주기 위한 Template\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DataTable = () => {\n  const [isLoading, setLoading] = useState(true);\n  const authInfo = useSelector((state) => state.common.loginInfo);\n  const [diagnosisList, setDiagnosisList] = useState([]);\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n  useEffect(() => {\n    async function getDiagnosis() {\n      try {\n        const result = await getDiagnosisList(authInfo);\n\n        const newResult = result.map((data, index) => ({ id: index, ...data }));\n        setDiagnosisList(newResult);\n        console.log(result);\n        setLoading(false);\n      } catch (error) {\n        const { message } = error.response.data;\n        handleAlert('error', message);\n        setLoading(false);\n      }\n    }\n    setTimeout(() => {\n      getDiagnosis();\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleClick = (event) => {\n    const { row } = event;\n    // console.log('dataTable', event.row);\n    dispatch(setPatient(row));\n  };\n  return (\n    <Fragment>\n      {isLoading && (\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '100vw',\n            height: '80vh',\n          }}\n        >\n          <HashSpinner />\n        </div>\n      )}\n      {!isLoading && diagnosisList.length > 0 && (\n        <div style={{ height: 500, width: '100%' }}>\n          <DataGrid\n            rows={diagnosisList}\n            columns={columns}\n            pageSize={5}\n            onCellClick={handleClick}\n          />\n        </div>\n      )}\n\n      {!isLoading && diagnosisList.length === 0 && (\n        <div\n          style={{\n            height: '80vh',\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          <div style={{ width: '100%', maxWidth: '500px' }}>\n            <img src=\"/assets/image/404/3.png\" alt=\"not found\" width=\"100%\" />\n          </div>\n          <StyledTypography\n            variant=\"h4\"\n            component=\"h5\"\n            weight={7}\n            style={{\n              marginTop: '1rem',\n            }}\n          >\n            검색 시점에 해당 병원의 진료 목록이 존재하지 않습니다.\n          </StyledTypography>\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nexport default DataTable;\n","import React, { Fragment } from 'react';\nimport { InputBase, Grid } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { setDiagnosisInfo } from 'redux/features/diagnosis/diagnosisSlice';\n\nconst SearchBase = styled(InputBase)`\n  flex: 1;\n  width: 90%;\n  border-radius: 0.5rem;\n  padding-left: 1rem;\n  font-weight: 500;\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  margin-bottom: 1rem;\n`;\n\nconst DiagnosisLabel = styled.div`\n  display: flex;\n  align-items: center;\n  height: 100%;\n  font-weight: 700;\n`;\n\nconst DiagnosisTextarea = styled.textarea`\n  width: 100%;\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  border-radius: 0.5rem;\n  padding: 0.5rem 0 0.5rem 0.5rem;\n  /* padding: 0.5rem; */\n  height: 100px;\n  resize: none;\n  font-family: 'Noto Sans KR';\n`;\n\n/**\n * * 진료의 정보를 보여주기 위한 Template 컴포넌트\n * @returns {JSX.Element} View\n * @author SUNG WOOK HWANG\n */\nconst DiagnosisDataPage = () => {\n  // Redux store에 저장되어 있는 회원 정보\n  const { memberId } = useSelector((state) => state.common.loginInfo);\n\n  // Redux store에 저장되어 있는 환자의 정보\n  const patientInfo = useSelector((state) => state.diagnosis.patient);\n  const dispatch = useDispatch();\n\n  // 정보를 입력시에 포인팅을 다른곳으로 옮겼을 시에 작동하는 이벤트 함수\n  const handleBlurOut = (e) => {\n    const { diagId, patientId } = patientInfo;\n    const drOpinion = e.target.value;\n    dispatch(\n      setDiagnosisInfo({\n        diagId,\n        memberId,\n        patientId,\n        drOpinion,\n      }),\n    );\n  };\n\n  return (\n    <Fragment>\n      <Grid container style={{ padding: '1rem' }}>\n        <Grid item xs={6} md={3} style={{ marginBottom: '1rem' }}>\n          <DiagnosisLabel>이름</DiagnosisLabel>\n        </Grid>\n        <Grid item xs={6} md={3}>\n          <SearchBase readOnly value={patientInfo.patientName} />\n        </Grid>\n        <Grid item xs={6} md={3} style={{ marginBottom: '1rem' }}>\n          <DiagnosisLabel>생년월일</DiagnosisLabel>\n        </Grid>\n        <Grid item xs={6} md={3}>\n          <SearchBase readOnly value={patientInfo.patientBirth} />\n        </Grid>\n        <Grid item xs={6} md={3} style={{ marginBottom: '1rem' }}>\n          <DiagnosisLabel>성별</DiagnosisLabel>\n        </Grid>\n        <Grid item xs={6} md={3}>\n          <SearchBase readOnly value={patientInfo.patientGender} />\n        </Grid>\n        <Grid item xs={6} md={3} style={{ marginBottom: '1rem' }}>\n          <DiagnosisLabel>내원사유</DiagnosisLabel>\n        </Grid>\n        <Grid item xs={6} md={3}>\n          <SearchBase readOnly value={patientInfo.visitPurpose} />\n        </Grid>\n        <Grid item xs={12} md={3} style={{ marginBottom: '1rem' }}>\n          <DiagnosisLabel>의사소견</DiagnosisLabel>\n        </Grid>\n        <Grid item xs={12} md={9} style={{ marginBottom: '1rem' }}>\n          {/* <DiagnosisTextarea onChange={handleChange} /> */}\n          <DiagnosisTextarea onBlur={handleBlurOut} />\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default DiagnosisDataPage;\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst ClrButton = styled(Button)`\n  display: flex;\n  background-color: ${(props) => props.setcolor};\n  \n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nClrButton.defaultProps = {\n  setcolor: 'white',\n};\n\nexport default ClrButton;\n","import styled from 'styled-components';\n\nconst SearchContainer = styled.div`\n  padding: 1rem;\n\n  h2 {\n    font-weight: 700;\n    margin-bottom: 1rem;\n  }\n\n  p {\n    font-weight: 300;\n\n    margin-bottom: 0.5rem;\n  }\n\n  .button-area {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n\n    .count-container {\n      display: flex;\n      align-items: center;\n\n      .text-area {\n        margin-left: 0.5rem;\n        margin-right: 0.5rem;\n        font-weight: 700;\n      }\n    }\n\n    .margin-button {\n      margin-left: 1rem;\n    }\n  }\n`;\n\nexport default SearchContainer;\n","import React, { useState, useCallback } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport { AiOutlinePlusCircle, AiOutlineMinusCircle } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport ClrButton from './ClrButton';\nimport SearchContainer from './SearchContainer';\n\n/**\n * * 목표 : 검색 항목을 나타내기 위한 컴포넌트\n * @param {object} data\n * @param {function} addMedicine\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst SearchItem = ({ data, addMedicine }) => {\n  // 갯수를 설정하기 위한 상태\n  const [count, setCount] = useState(1);\n\n  const { enqueueSnackbar } = useSnackbar();\n  const handleAlert = useCallback(\n    (variant, message) => {\n      enqueueSnackbar(message, {\n        variant,\n      });\n    },\n    [enqueueSnackbar],\n  );\n\n  // 항목을 추가하기 위한 이벤트 함수\n  const addItem = useCallback(\n    (data, count) => {\n      addMedicine({ ...data, count });\n    },\n    [addMedicine],\n  );\n\n  // 항목의 갯수를 추가하기 위한 이벤트 함수\n  const handlePlusBtn = useCallback(() => {\n    setCount((prevState) => prevState + 1);\n  }, []);\n\n  // 항목의 갯수를 제거하기 위한 이벤트 함수\n  const handleMinusBtn = useCallback(() => {\n    setCount((prevState) => {\n      if (prevState <= 1) {\n        handleAlert('error', '수량은 마이너스가 될 수 없습니다.');\n        return prevState;\n      }\n      return prevState - 1;\n    });\n  }, [handleAlert]);\n\n  return (\n    <SearchContainer key={data.medicineId}>\n      <h2>{data.medicineName}</h2>\n      <p>\n        약품 코드: {data.medicineCode} | 약품 타입 : {data.medicineType} | 캡슐\n        타입 : {data.medicineUnit}\n      </p>\n      <div className=\"button-area\">\n        <div className=\"count-container\">\n          <IconButton type=\"button\" onClick={handlePlusBtn}>\n            <AiOutlinePlusCircle size={24} />\n          </IconButton>\n          <span className=\"text-area\">{count}</span>\n          <IconButton type=\"button\" onClick={handleMinusBtn}>\n            <AiOutlineMinusCircle size={24} />\n          </IconButton>\n        </div>\n        <ClrButton\n          className=\"margin-button\"\n          setcolor=\"aliceblue\"\n          onClick={() => addItem(data, count)}\n        >\n          추가\n        </ClrButton>\n      </div>\n    </SearchContainer>\n  );\n};\n\nexport default React.memo(SearchItem);\n","import { useState, useEffect } from 'react';\n/**\n * useWindowSize Hook\n * 해당 기기의 해상도가 바뀌는 경우에 감지하기 위한 커스텀 훅\n * @returns {object} windowSize\n * @author SUNG WOOK HWANG\n */\nconst useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n    breakpoint: undefined,\n  });\n\n  useEffect(() => {\n    function handleResize() {\n      const { innerWidth, innerHeight } = window;\n      let breakpoint = '';\n\n      if (innerWidth > 1920) {\n        breakpoint = 'xl';\n      } else if (innerWidth > 1280) {\n        breakpoint = 'lg';\n      } else if (innerWidth > 960) {\n        breakpoint = 'md';\n      } else if (innerWidth > 600) {\n        breakpoint = 'sm';\n      } else {\n        breakpoint = 'xs';\n      }\n\n      setWindowSize({\n        width: innerWidth,\n        height: innerHeight,\n        breakpoint,\n      });\n    }\n    window.addEventListener('resize', handleResize);\n\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowSize;\n};\n\nexport default useWindowSize;\n","import styled from 'styled-components';\nimport Container from '@material-ui/core/Container';\n\n/**\n * 해상도 조건에 맞게 (breakpoint) 컴포넌트의 폭을 조정하는 컴포넌트\n * <ResponsiveContainer breakpoint=\"md\"/>\n * @author SUNG WOOK HWANG\n */\nconst ResponsiveContainer = styled(Container)`\n  width: ${({ breakpoint }) => {\n    const breakpointsWithWidth = {\n      xs: '100vw',\n      sm: '80vw',\n      md: '600px',\n      lg: '600px',\n      xl: '960px',\n    };\n\n    return breakpointsWithWidth[breakpoint];\n  }};\n`;\n\nResponsiveContainer.defaultProps = {\n  breakpoint: 'xs',\n};\n\nexport default ResponsiveContainer;\n","import styled from 'styled-components';\n\n/**\n * Drawer의 헤더를 설정하기 위한 컴포넌트\n * @author SUNG WOOK HWANG\n */\nconst DrawerHeader = styled.div`\n  display: flex;\n  position: sticky;\n  top: 0;\n  align-items: center;\n  margin: 20px 0 20px 0;\n  /* min-width: 320px; */\n  /* width: ${({ breakpoint }) => {\n    const breakpointsWithWidth = {\n      xs: '100%',\n      sm: '100%',\n      md: '600',\n      lg: '912px',\n      xl: '912px',\n    };\n    return breakpointsWithWidth[breakpoint];\n  }}; */\n\n  h1 {\n    flex: 4;\n    font-weight: 900;\n  }\n  div {\n    flex: 1;\n    text-align: right;\n  }\n`;\n\nDrawerHeader.defaultProps = {\n  breakpoint: 'xs',\n};\n\nexport default DrawerHeader;\n","import React, { Fragment, useState } from 'react';\nimport styled from 'styled-components';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\n\nconst SearchContainer = styled.div`\n  padding: 0.5rem;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  background-color: aliceblue;\n`;\n\nconst SearchBase = styled(InputBase)`\n  margin-left: 8px;\n  flex: 1;\n  font-family: 'Spoqa Han Sans Neo', 'Noto Sans KR', sans-serif;\n  font-weight: 700;\n`;\n\n/**\n * * 검색어를 입력하기 위한 컴포넌트\n * @param {function} setSearchVal\n * @param {string} placeholder\n * @param {boolean} noRemove \n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst SearchBox = ({ setSearchVal, placeholder, noRemove }) => {\n  const [inputVal, setInputVal] = useState('');\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n  const handleChange = (event) => {\n    setInputVal(event.target.value);\n  };\n\n  // 사용자가 Enter키를 눌렀을 시에 실행할 이벤트 함수\n  const handleKeyPress = (event) => {\n    const { key } = event;\n    if (key === 'Enter' && inputVal) {\n      setSearchVal(inputVal);\n      if (noRemove === undefined) {\n        setTimeout(() => {\n          setInputVal('');\n        }, 10);\n      }\n    } else if (key === 'Enter' && !inputVal) {\n      handleAlert('error', '값이 존재하지 않습니다.');\n    }\n  };\n\n  const handleClick = () => {\n    if (inputVal === '') {\n      handleAlert('error', '값이 입력되지 않았습니다.');\n\n      return;\n    }\n    setSearchVal(inputVal);\n    if (noRemove === undefined) {\n      setTimeout(() => {\n        setInputVal('');\n      }, 10);\n    }\n  };\n\n  return (\n    <Fragment>\n      <SearchContainer>\n        <SearchBase\n          value={inputVal}\n          placeholder={placeholder}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n        />\n        <IconButton type=\"submit\" onClick={handleClick}>\n          <AiOutlineSearch />\n        </IconButton>\n      </SearchContainer>\n    </Fragment>\n  );\n};\n\n// const SearchBox = styled(InputBase)`\n//   width: 100%;\n//   border-radius: 2px;\n//   padding-left: 4px;\n//   padding-right: 4px;\n//   font-family: 'Lato', 'Noto Sans KR', sans-serif;\n//   border: 0.5px solid #868e96;\n// `;\n\nexport default SearchBox;\n","import React, { useCallback } from 'react';\nimport SearchContainer from './SearchContainer';\nimport ClrButton from './ClrButton';\n\n/**\n * * 약품의 상세 정보를 담은 Template 컴포넌트\n * @param {object} data\n * @param {function} removeMedicine\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst MedicineItem = ({ data, removeMedicine }) => {\n  // 약품을 제거하기 위한 이벤트 함수\n  const handleRemoveBtn = useCallback(\n    (data) => {\n      console.log(data);\n      removeMedicine(data);\n    },\n    [removeMedicine],\n  );\n  return (\n    <SearchContainer>\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        <h2 style={{ flex: 3, margin: 0 }}>\n          {data.medicineName} | {data.count}개\n        </h2>\n        <div>\n          <ClrButton setcolor=\"#495057\" onClick={() => handleRemoveBtn(data)}>\n            <span style={{ color: 'white' }}>삭제</span>\n          </ClrButton>\n        </div>\n      </div>\n    </SearchContainer>\n  );\n};\n\nexport default MedicineItem;\n","import axios from 'axios';\n\n/**\n * * 목표 : 약품의 이름을 검색하면 약품의 대한 리스트를 출력하는 API\n * @param {string} medicineName \n * @returns {List<MedicinesDTO>} medicineResults\n * * [Medicines Entity]\n * * !int medicineId (약품의 ID)\n * * !String medicineCode (약품 코드)\n * * !String medicineName (약품 영문 명)\n * * !String medicineType (약품 구분)\n * * !String medicineUnit (약 혹은 주사의 단위)\n * * !String medicineExplain (약 혹은 주사의 상세 설명)\n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status : \"no_medicine_name\"\n * * * message : \"약품 이름이 입력되지 않았거나, 공백입니다.\"\n * * HTTP Status 204 - No Content\n * * * status : \"no_medicines_content\"\n * * * message : \"약품이 존재하지 않습니다.\"\n * @author SUNG WOOK HWANG\n */\nexport const searchMedicineList = async (medicineName) => {\n    const result = await axios.get(\"/search/medicine\", {\n        params: {\n            medicineName\n        }\n    });\n    return result.data.data;\n};\n\n/**\n * * 목표 : 주사의 이름을 검색하면 주사의 대한 리스트를 출력하는 API\n * @param {string} medicineName \n * @returns {List<MedicinesDTO>} medicineResults\n * * [Medicines Entity]\n * * !int medicineId (약품의 ID)\n * * !String medicineCode (약품 코드)\n * * !String medicineName (약품 영문 명)\n * * !String medicineType (약품 구분)\n * * !String medicineUnit (약 혹은 주사의 단위)\n * * !String medicineExplain (약 혹은 주사의 상세 설명)\n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status : \"no_medicine_name\"\n * * * message : \"약품 이름이 입력되지 않았거나, 공백입니다.\"\n * * HTTP Status 204 - No Content\n * * * status : \"no_medicines_content\"\n * * * message : \"약품이 존재하지 않습니다.\"\n * @author SUNG WOOK HWANG\n */\nexport const searchInjectorList = async (medicineName) => {\n    const result = await axios.get(\"/search/injector\", {\n        params: {\n            medicineName\n        }\n    });\n    return result.data.data;\n\n};\n\n\n/**\n * * 목표 : 진단 검사의 그룹 명 (bundleName)을 검색하면 진단 검사에 대한 리스트를 출력하기 위한 API\n * @param {string} bundleName \n * @returns {List<DiagnosticInspectionsDTO>} inspectionResults\n * * [DiagnosticInspections Entity]\n * * * !int diagInspectionId (진단 검사 리스트의 ID)\n * * * !String bundleCode (그룹 코드 || 묶음 코드)\n * * * !String bundleName (그룹 명 || 묶음 명)\n * * * !String presCode (처방 코드)\n * * * !String presName (처방 명)\n * * * !String presUnit (단위)\n * * * !double presLowerLimit (하한치)\n * * * !double presUpperLimit (상한치)\n * * * String presVessel (용기)\n * * * String presSpecimenName (검체명)\n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status : \"no_bundle_name\"\n * * * message : \"그룹 명이 입력되지 않았거나, 공백입니다.\"\n * * HTTP Status 204 - No Content\n * * * status : \"no_diagnostic_inspection_content\"\n * * * message : \"진단 검사가 존재하지 않습니다.\"\n * @author SUNG WOOK HWANG\n */\nexport const searchDiagnosticList = async (bundleName) => {\n    const result = await axios.get(\"/search/diagnostic\", {\n        params: {\n            bundleName\n        }\n    });\n    return result.data.data;\n\n};\n\n/**\n * * 목표 : 진단 검사의 그룹 코드 (bundleCode)를 검색하면 진단 검사에 대한 리스트를 출력하기 위한 API\n * @param {string} bundleCode \n * @returns {List<DiagnosticInspectionsDTO>} inspectionResults\n * * [DiagnosticInspections Entity]\n * * * !int diagInspectionId (진단 검사 리스트의 ID)\n * * * !String bundleCode (그룹 코드 || 묶음 코드)\n * * * !String bundleName (그룹 명 || 묶음 명)\n * * * !String presCode (처방 코드)\n * * * !String presName (처방 명)\n * * * !String presUnit (단위)\n * * * !double presLowerLimit (하한치)\n * * * !double presUpperLimit (상한치)\n * * * String presVessel (용기)\n * * * String presSpecimenName (검체명)\n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status : \"no_bundle_name\"\n * * * message : \"그룹 명이 입력되지 않았거나, 공백입니다.\"\n * * HTTP Status 204 - No Content\n * * * status : \"no_diagnostic_inspection_content\"\n * * * message : \"진단 검사가 존재하지 않습니다.\"\n * @author SUNG WOOK HWANG\n */\nexport const searchDiagnosticListByCode = async (bundleCode) => {\n    const result = await axios.get(\"/search/diagnostic-code\", {\n        params: {\n            bundleCode\n        }\n    });\n    return result.data.data;\n};\n\n/**\n * * 목표 : 병원 정보와 환자의 이름을 통해 환자의 리스트를 출력하기 위한 API\n * @param {PatientSearchVO} patientInfo \n * * !String hospitalCode (병원 코드)\n * * !String patientName (환자 이름)\n * @returns {List<PatientVO>} patientInfos\n * * !int patientId (환자의 ID)\n * * !String patientName (환자 이름)\n * * !String patientGender (환자의 성별)\n * * !String patientBirth (환자의 생일, LocalDateTime > String으로 변환함)\n * * !String hospitalCode (병원 코드)\n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status : \"no_patient_search_info\"\n * * * message : \"병원 코드 혹은 환자의 이름이 없습니다\"\n * * HTTP Status 204 - No Content\n * * * status : \"no_result\"\n * * * message : \"검색 결과 존재하지 않습니다.\"\n * @author SUNG WOOK HWANG\n */\nexport const searchPatientInfoByName = async (patientInfo) => {\n    const result = await axios.post(\"/search/patient\", patientInfo);\n    return result.data.data;\n}\n\n\n/**\n * * 목표 : 진료의 식별자로 환자의 ID를 알아내고 진료 정보를 만들어 내어 리턴하는 API\n * @param {number} diagId \n * @returns {DiagnosisInfoVO} result\n * * !int diagId (진료 ID)\n * * !String visitPurpose (내방 목적)\n * * !String patientName (환자 이름)\n * * !String patientGender (환자 성별)\n * * !String patientBirth (환자 생년월일)\n */\nexport const getDiagnosisInfo = async (diagId) => {\n    return await axios.get(\"/search/diagnosisInfo\", {\n        params: {\n            diagId\n        }\n    })\n};\n\nexport const showDiagnosticTestListByPatientId = async (patientId) => {\n    const result = await axios.get('/search/diagnosticInfo', {\n        params: {\n            patientId\n        }\n    });\n\n    return result.data.data;\n}","import React, { Fragment, useEffect, useState, useCallback } from 'react';\nimport { SwipeableDrawer, Grid, Divider } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport {\n  addMedicineInfo,\n  removeMedicineInfo,\n  setMedicineDrawer,\n} from 'redux/features/diagnosis/diagnosisSlice';\nimport SearchItem from '../container/SearchItem';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport SearchBox from 'components/common/search/SearchBox';\nimport MedicineItem from '../container/MedicineItem';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport { searchMedicineList } from 'apis/searchAPI';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\n\nconst MedicineDrawer = () => {\n  const { breakpoint } = useWindowSize();\n  const [searchVal, setSearchVal] = useState('');\n  const [searchData, setSearchData] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const medicineInfo = useSelector((state) => state.diagnosis.medicineInfo);\n  const isOpened = useSelector(\n    (state) => state.diagnosis.drawerStatus.medicine,\n  );\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    dispatch(setMedicineDrawer(open));\n  };\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  useEffect(() => {\n    if (searchVal === '') {\n      return;\n    }\n    setLoading(false);\n    async function getMedicineList(searchVal) {\n      try {\n        const result = await searchMedicineList(searchVal);\n        setSearchData(result);\n\n        setLoading(true);\n      } catch (error) {\n        const { message } = error.response.data;\n\n        handleAlert('error', message);\n        setLoading(true);\n      }\n    }\n    getMedicineList(searchVal);\n\n    // 임시로 딜레이 부여\n\n    console.log('검색 창에서 searchVal이 변경되었습니다', searchVal);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchVal]);\n\n  const addMedicine = useCallback(\n    (data) => {\n      dispatch(addMedicineInfo(data));\n    },\n    [dispatch],\n  );\n\n  const removeMedicine = useCallback(\n    (data) => {\n      dispatch(removeMedicineInfo(data));\n    },\n    [dispatch],\n  );\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer>\n          <DrawerHeader breakpoint={breakpoint} style={{ padding: '0.5rem' }}>\n            <h1>약 처방 하기</h1>\n            <div>\n              <AiOutlineClose\n                size={32}\n                onClick={() => dispatch(setMedicineDrawer(false))}\n              />\n            </div>\n          </DrawerHeader>\n\n          <Grid container spacing={1}>\n            <Grid item xs={12} sm={6} style={{ padding: '1rem' }}>\n              <div\n                style={{\n                  border: '1px solid rgba(0,0,0,0.12)',\n                  padding: '1rem',\n                }}\n              >\n                <SearchBox\n                  setSearchVal={setSearchVal}\n                  placeholder=\"약 이름을 입력해주세요\"\n                  noRemove\n                />\n                {searchVal === '' && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      flexDirection: 'column',\n                    }}\n                  >\n                    <img\n                      src=\"/assets/image/searchinfo.png\"\n                      width=\"100%\"\n                      alt=\"search\"\n                    />\n                    <StyledTypography variant=\"h4\" component=\"h5\" weight={9}>\n                      먼저 검색을 해주세요!\n                    </StyledTypography>\n                  </div>\n                )}\n                {searchVal !== '' && !isLoading && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'center',\n                      alignItems: 'center',\n                      width: '100%',\n                      height: '100vh',\n                    }}\n                  >\n                    <HashSpinner />\n                  </div>\n                )}\n                {searchVal !== '' && isLoading && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'column',\n                      marginTop: '1rem',\n                      width: '100%',\n                      height: '70vh',\n                      overflowY: 'scroll',\n                    }}\n                  >\n                    <Divider />\n                    {searchData.map((data) => (\n                      <Fragment key={data.medicineName}>\n                        <Divider />\n                        <SearchItem data={data} addMedicine={addMedicine} />\n                      </Fragment>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </Grid>\n            <Grid item xs={12} sm={6} style={{ padding: '1rem' }}>\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  height: '80vh',\n                  overflowY: 'scroll',\n                  border: '1px solid rgba(0,0,0,0.12)',\n                  padding: '1rem',\n                }}\n              >\n                {medicineInfo.length === 0 && (\n                  <Fragment>\n                    <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                      여기에는 추가된 약 목록들이 나타납니다.\n                    </StyledTypography>\n                  </Fragment>\n                )}\n                {medicineInfo.length !== 0 &&\n                  medicineInfo.map((data, index) => (\n                    <Fragment key={index + 'medicine'}>\n                      <Divider />\n                      <MedicineItem\n                        data={data}\n                        removeMedicine={removeMedicine}\n                      />\n                    </Fragment>\n                  ))}\n              </div>\n            </Grid>\n          </Grid>\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default MedicineDrawer;\n","import React, { Fragment, useEffect, useState, useCallback } from 'react';\nimport { SwipeableDrawer, Grid, Divider, IconButton } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport {\n  addInjectorInfo,\n  removeInjectorInfo,\n  setInjectorDrawer,\n} from 'redux/features/diagnosis/diagnosisSlice';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport SearchBox from 'components/common/search/SearchBox';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport SearchItem from '../container/SearchItem';\nimport MedicineItem from '../container/MedicineItem';\nimport { searchInjectorList } from 'apis/searchAPI';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\n\n/**\n * * 기능 : 진료 등록에서 의사가 진료를 진행시에 주사약을 추가할 때 보여줄 템플릿 컴포넌트\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst InjectorDrawer = () => {\n  // 해상도의 breakpoint를 알기 위한 Custom Hook\n  const { breakpoint } = useWindowSize();\n\n  // 검색어의 상태 저장\n  const [searchVal, setSearchVal] = useState('');\n\n  // 검색 결과를 저장하기 위한 상태\n  const [searchData, setSearchData] = useState([]);\n\n  // Ajax시 Spinner를 보여주기 위한 상태\n  const [isLoading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  // Redux store에 저장되어 있는 주사약 정보 (추가 시에 저장하여 진료를 서버에 보낼 시에 사용할 정보)\n  const injectorInfo = useSelector((state) => state.diagnosis.injectorInfo);\n  const isOpened = useSelector(\n    (state) => state.diagnosis.drawerStatus.injector,\n  );\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    dispatch(setInjectorDrawer(open));\n  };\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 검색어가 바뀌는 effect 발동 시에 약품의 정보를 가져오기 위한 side-effect\n  useEffect(() => {\n    if (searchVal === '') {\n      return;\n    }\n    setLoading(false);\n    async function getMedicineList(searchVal) {\n      try {\n        const result = await searchInjectorList(searchVal);\n        setSearchData(result);\n        setLoading(true);\n      } catch (error) {\n        const { message } = error.response.data;\n        handleAlert('error', message);\n        setLoading(true);\n      }\n    }\n    getMedicineList(searchVal);\n\n    setTimeout(() => {\n      setLoading(true);\n    }, 1000);\n    console.log('검색 창에서 searchVal이 변경되었습니다', searchVal);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchVal]);\n\n  const addInjector = useCallback(\n    (data) => {\n      dispatch(addInjectorInfo(data));\n    },\n    [dispatch],\n  );\n\n  const removeInjector = useCallback(\n    (data) => {\n      dispatch(removeInjectorInfo(data));\n    },\n    [dispatch],\n  );\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer>\n          <DrawerHeader breakpoint={breakpoint} style={{ padding: '0.5rem' }}>\n            <h1>주사 처방 하기</h1>\n            <div>\n              <IconButton>\n                <AiOutlineClose\n                  size={32}\n                  onClick={() => dispatch(setInjectorDrawer(false))}\n                />\n              </IconButton>\n            </div>\n          </DrawerHeader>\n\n          <Grid container spacing={1}>\n            <Grid item xs={12} sm={6} style={{ padding: '1rem' }}>\n              <div\n                style={{\n                  border: '1px solid rgba(0,0,0,0.12)',\n                  padding: '1rem',\n                }}\n              >\n                <SearchBox\n                  setSearchVal={setSearchVal}\n                  placeholder=\"주사 이름을 입력해주세요\"\n                  noRemove\n                />\n                {searchVal === '' && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      flexDirection: 'column',\n                    }}\n                  >\n                    <img\n                      src=\"/assets/image/searchinfo.png\"\n                      width=\"100%\"\n                      alt=\"search\"\n                    />\n                    <StyledTypography variant=\"h4\" component=\"h5\" weight={9}>\n                      먼저 검색을 해주세요!\n                    </StyledTypography>\n                  </div>\n                )}\n\n                {searchVal !== '' && !isLoading && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'center',\n                      alignItems: 'center',\n                      width: '100%',\n                      height: '100vh',\n                    }}\n                  >\n                    <HashSpinner />\n                  </div>\n                )}\n\n                {searchVal !== '' && isLoading && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'column',\n                      marginTop: '1rem',\n                      width: '100%',\n                      height: '70vh',\n                      overflowY: 'scroll',\n                    }}\n                  >\n                    <Divider />\n                    {searchData.map((data) => (\n                      <Fragment key={data.medicineName}>\n                        <Divider />\n                        <SearchItem data={data} addMedicine={addInjector} />\n                      </Fragment>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </Grid>\n            <Grid item xs={12} sm={6} style={{ padding: '1rem' }}>\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  height: '80vh',\n                  overflowY: 'scroll',\n                  border: '1px solid rgba(0,0,0,0.12)',\n                  padding: '1rem',\n                }}\n              >\n                {injectorInfo.length === 0 && (\n                  <Fragment>\n                    <StyledTypography variant=\"h5\" component=\"h5\" weight={9}>\n                      여기에는 추가된 주사 목록들이 나타납니다.\n                    </StyledTypography>\n                  </Fragment>\n                )}\n\n                {injectorInfo.length !== 0 &&\n                  injectorInfo.map((data, index) => (\n                    <Fragment key={index + 'injector'}>\n                      <Divider />\n                      <MedicineItem\n                        data={data}\n                        removeMedicine={removeInjector}\n                      />\n                    </Fragment>\n                  ))}\n              </div>\n            </Grid>\n          </Grid>\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default InjectorDrawer;\n","import React, { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { Container, Divider } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport {\n  addDiagnosticGroupItem,\n  addDiagnosticInfo,\n  removeDiagnosticInfo,\n} from 'redux/features/diagnosis/diagnosisSlice';\nimport { searchDiagnosticListByCode } from 'apis/searchAPI';\n\nconst DiagnosticContainer = styled(Container)`\n  width: 100%;\n  padding: 0.5rem;\n  display: flex;\n  flex-direction: row;\n\n  .group-container {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    min-width: 100px;\n    min-height: 100px;\n    padding: 0.5rem;\n    border: 1px solid rgba(0, 0, 0, 0.12);\n\n    .title {\n      text-align: center;\n      font-weight: 700;\n      font-size: 1.2rem;\n      margin-top: 0.4rem;\n      margin-bottom: 0.6rem;\n    }\n    .group-code-container {\n      display: flex;\n      flex-grow: 1;\n      align-items: center;\n      justify-content: center;\n\n      .group-code {\n        font-family: 'Lato';\n        font-size: 1.5rem;\n      }\n    }\n  }\n\n  .prescription-container {\n    display: flex;\n    flex-direction: column;\n    flex: 3;\n    padding: 0.5rem;\n    border: 1px solid rgba(0, 0, 0, 0.12);\n    border-left: none;\n\n    .row {\n      display: flex;\n      align-items: center;\n      font-size: 0.85rem;\n      border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n      height: 25%;\n      span {\n        margin-right: 0.5rem;\n      }\n      .title {\n        font-weight: 700;\n      }\n      .content {\n        font-weight: 300;\n      }\n      .button-area {\n        width: 100%;\n        background: white;\n        text-align: right;\n        .add-button {\n          background: #3b5bdb;\n          color: white;\n        }\n        .remove-button {\n          background: #e03131;\n          color: white;\n        }\n        button {\n          font-weight: 700;\n          border: 1px solid rgba(0, 0, 0, 0.1);\n          padding: 0.2rem;\n          padding-left: 5px;\n          padding-right: 5px;\n          border-radius: 6px;\n          font-size: 0.7rem;\n          letter-spacing: -0.5px;\n          margin-left: 0.5rem;\n        }\n      }\n    }\n  }\n\n  .MuiDivider-root {\n    margin-top: 0.3rem;\n    margin-bottom: 0.5rem;\n  }\n`;\n\n/**\n * * 목표 : 진단 검사의 항목을 나타내기 위한 컴포넌트\n * @param {object} data\n * @param {function} isRemove\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DiagnosticItem = ({ data, isRemove }) => {\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 추가 버튼을 이벤트 함수\n  const handleAddButton = (data) => {\n    dispatch(addDiagnosticInfo(data));\n  };\n\n  // 제거 버튼을 이벤트 함수\n  const handleRemoveButton = (data) => {\n    dispatch(removeDiagnosticInfo(data));\n  };\n\n  // 그룹 추가의 이벤트 함수\n  const handleGroupButton = async (data) => {\n    const { bundleCode } = data;\n    try {\n      const result = await searchDiagnosticListByCode(bundleCode);\n      dispatch(addDiagnosticGroupItem(result));\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n    }\n  };\n  return (\n    <DiagnosticContainer>\n      <div className=\"group-container\">\n        <p className=\"title\">그룹 코드 </p>\n        <Divider />\n        <div className=\"group-code-container\">\n          <p className=\"group-code\">{data.bundleCode}</p>\n        </div>\n      </div>\n\n      <div className=\"prescription-container\">\n        <div className=\"row\">\n          <span className=\"title\">그룹 명</span>\n          <span>|</span>\n          <span className=\"content\">{data.bundleName}</span>\n        </div>\n        <div className=\"row\">\n          <span className=\"title\">처방 코드</span>\n          <span>|</span>\n          <span className=\"content\">{data.presCode}</span>\n        </div>\n        <div className=\"row\">\n          <span className=\"title\">처방 명</span>\n          <span>|</span>\n          <span className=\"content\">{data.presName}</span>\n        </div>\n        <div className=\"row\">\n          <div className=\"button-area\">\n            {!isRemove && (\n              <Fragment>\n                <button\n                  className=\"add-button\"\n                  style={{}}\n                  onClick={() => handleAddButton(data)}\n                >\n                  추가\n                </button>\n                <button\n                  className=\"add-button\"\n                  style={{}}\n                  onClick={() => handleGroupButton(data)}\n                >\n                  그룹 추가\n                </button>\n              </Fragment>\n            )}\n            {isRemove && (\n              <button\n                className=\"remove-button\"\n                style={{}}\n                onClick={() => handleRemoveButton(data)}\n              >\n                삭제하기\n              </button>\n            )}\n          </div>\n        </div>\n        <div></div>\n      </div>\n    </DiagnosticContainer>\n  );\n};\n\nexport default React.memo(DiagnosticItem);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { SwipeableDrawer, Grid, Divider, IconButton } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport { setDiagnosticDrawer } from 'redux/features/diagnosis/diagnosisSlice';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport SearchBox from 'components/common/search/SearchBox';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\nimport DiagnosticItem from '../container/DiagnosticItem';\nimport { searchDiagnosticList } from 'apis/searchAPI';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\n\n/**\n * * 목표 : 진단 검사 Drawer 컴포넌트\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DiagnosticDrawer = () => {\n  // 해상도 Breakpoint를 가져오기 위한 Custom Hook\n  const { breakpoint } = useWindowSize();\n\n  // 검색어를 저장하기 위한 상태\n  const [searchVal, setSearchVal] = useState('');\n\n  // Spinner를 띄울지 결정하는 상태\n  const [isLoading, setLoading] = useState(false);\n\n  // 검색 결과 저장하기 위한 상태\n  const [searchData, setSearchData] = useState([]);\n  const dispatch = useDispatch();\n\n  // 진단 검사 Drawer의 상태\n  const isOpened = useSelector(\n    (state) => state.diagnosis.drawerStatus.diagnostic,\n  );\n\n  // 진단 검사의 상태\n  const diagnosticInfo = useSelector((state) => state.diagnosis.diagnosticInfo);\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    dispatch(setDiagnosticDrawer(open));\n  };\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  useEffect(() => {\n    if (searchVal === '') {\n      return;\n    }\n    setLoading(false);\n\n    // 진단 검사를 가져오기 위한 함수\n    async function getDiagnosticList(searchVal) {\n      try {\n        const result = await searchDiagnosticList(searchVal);\n        setSearchData(result);\n        setLoading(true);\n      } catch (error) {\n        const { message } = error.response.data;\n        handleAlert('error', message);\n        setLoading(true);\n      }\n    }\n    getDiagnosticList(searchVal);\n\n    console.log('검색 창에서 searchVal의 값이 변경되었습니다.', searchVal);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchVal, dispatch]);\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer>\n          <DrawerHeader breakpoint={breakpoint} style={{ padding: '0.5rem' }}>\n            <h1>진단 검사 추가하기</h1>\n            <div>\n              <IconButton>\n                <AiOutlineClose\n                  size={32}\n                  onClick={() => dispatch(setDiagnosticDrawer(false))}\n                />\n              </IconButton>\n            </div>\n          </DrawerHeader>\n\n          <Grid container spacing={1}>\n            <Grid item xs={12} sm={6} style={{ padding: '1rem' }}>\n              <div\n                style={{\n                  border: '1px solid rgba(0,0,0,0.12)',\n                  padding: '1rem',\n                }}\n              >\n                <SearchBox\n                  setSearchVal={setSearchVal}\n                  placeholder=\"진단 검사 그룹 명을 입력해주세요.\"\n                  noRemove\n                />\n                {searchVal === '' && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      flexDirection: 'column',\n                    }}\n                  >\n                    <img\n                      src=\"/assets/image/searchinfo.png\"\n                      width=\"100%\"\n                      alt=\"search\"\n                    />\n                    <StyledTypography variant=\"h4\" component=\"h5\" weight={9}>\n                      먼저 검색을 해주세요!\n                    </StyledTypography>\n                  </div>\n                )}\n\n                {searchVal !== '' && !isLoading && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'center',\n                      alignItems: 'center',\n                      width: '100%',\n                      height: '100vh',\n                    }}\n                  >\n                    <HashSpinner />\n                  </div>\n                )}\n\n                {searchVal !== '' && isLoading && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'column',\n                      marginTop: '1rem',\n                      width: '100%',\n                      height: '70vh',\n                      overflowY: 'scroll',\n                    }}\n                  >\n                    <Divider />\n                    {searchData.map((data) => (\n                      <Fragment key={data.diagInspectionId}>\n                        <Divider />\n                        <DiagnosticItem data={data} />\n                        {/* <SearchItem data={data} addMedicine={addMedicine} /> */}\n                      </Fragment>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </Grid>\n\n            <Grid item xs={12} sm={6} style={{ padding: '1rem' }}>\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  height: '80vh',\n                  overflowY: 'scroll',\n                  border: '1px solid rgba(0,0,0,0.12)',\n                  padding: '1rem',\n                }}\n              >\n                {diagnosticInfo.length === 0 && (\n                  <Fragment>\n                    <StyledTypography variant=\"h5\" component=\"h5\" weight={9}>\n                      여기에는 추가된 진단 검사 목록이 나타납니다.\n                    </StyledTypography>\n                  </Fragment>\n                )}\n                {diagnosticInfo.length !== 0 &&\n                  diagnosticInfo.map((data, index) => (\n                    <Fragment key={index + 'diagnostic'}>\n                      <Divider />\n                      <DiagnosticItem data={data} isRemove />\n                    </Fragment>\n                  ))}\n              </div>\n            </Grid>\n          </Grid>\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default DiagnosticDrawer;\n","import React, { Fragment } from 'react';\nimport {\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\n/**\n * * 목표 : 약품 처방 기록에 대한 테이블 행을 나타내기 위한 컴포넌트\n * @param {object} data\n * @returns {JSX.Element} View\n * @author SUNG WOOK HWANG\n */\nconst CollapsibleMedicineRows = ({ data }) => {\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              약품 코드\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              약품 명\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              약품 타입\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              약품 규격\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              처방 량\n            </StyledTypography>\n          </TableCell>\n        </TableHead>\n\n        <TableBody>\n          {data.map((rows, index) => (\n            <Fragment key={index}>\n              <TableRow>\n                <TableCell size=\"small\">{rows.medicineCode}</TableCell>\n                <TableCell size=\"small\">{rows.medicineName}</TableCell>\n\n                <TableCell size=\"small\">{rows.medicineType}</TableCell>\n                <TableCell size=\"small\">{rows.medicineUnit}</TableCell>\n                <TableCell size=\"small\">{rows.medicineDose}</TableCell>\n              </TableRow>\n            </Fragment>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default React.memo(CollapsibleMedicineRows);\n","import React, { Fragment } from 'react';\nimport {\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\n/**\n * * 목표 : 진단 검사의 대한 테이블 행을 나타내기 위한 컴포넌트\n * @param {object} data\n * @returns {JSX.Element} View\n * @author SUNG WOOK HWANG\n */\nconst CollapsibleDiagnosticsRows = ({ data }) => {\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              그룹 코드\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              그룹 명\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              처방 코드\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              처방 명\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              상한 값\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              하한 값\n            </StyledTypography>\n          </TableCell>\n          <TableCell>\n            <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n              규격\n            </StyledTypography>\n          </TableCell>\n        </TableHead>\n\n        <TableBody>\n          {data.map((rows) => (\n            <Fragment key={rows.diagInspectionId}>\n              <TableRow>\n                <TableCell size=\"small\">{rows.bundleCode}</TableCell>\n                <TableCell size=\"small\">{rows.bundleName}</TableCell>\n                <TableCell size=\"small\">{rows.presCode}</TableCell>\n                <TableCell size=\"small\">{rows.presName}</TableCell>\n                <TableCell size=\"small\">{rows.presUpperLimit}</TableCell>\n                <TableCell size=\"small\">{rows.presLowerLimit}</TableCell>\n                <TableCell size=\"small\">{rows.presUnit}</TableCell>\n              </TableRow>\n            </Fragment>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default React.memo(CollapsibleDiagnosticsRows);\n","import React, { useState, Fragment } from 'react';\nimport {\n  TableRow,\n  TableCell,\n  IconButton,\n  Collapse,\n  Box,\n  Grid,\n} from '@material-ui/core';\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@material-ui/icons';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport CollapsibleMedicineRows from './CollapsibleMedicineRows';\nimport CollapsibleDiagnosticsRows from './CollapsibleDiagnosticsRows';\n\n/**\n * * 목표 : \b\b진단 검사 테이블 행을 나타내기 위한 컴포넌트\n * @param {object} data\n * @returns {JSX.Element} View\n * @author SUNG WOOK HWANG\n */\nconst CollapsibleRows = ({ data }) => {\n  // 약품 정보, 주사 정보, 진단 검사 정보\n  const { medicines, injectors, diagnostics } = data;\n\n  // 진단 검사가 열였는지 확인하기 위한 상태\n  const [isOpened, setOpened] = useState(false);\n\n  return (\n    <Fragment>\n      <TableRow onClick={() => setOpened(!isOpened)}>\n        <TableCell>\n          <IconButton size=\"small\" onClick={() => setOpened(!isOpened)}>\n            {isOpened ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {data.startDate}\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {data.visitPurpose}\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {data.drOpinion}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={4}>\n          <Collapse in={isOpened} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Grid container style={{ display: 'flex', alignItems: 'center' }}>\n                <Grid item xs={12} sm={2}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"div\"\n                    weight={7}\n                  >\n                    의사소견\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={12} sm={10}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"div\"\n                    weight={4}\n                  >\n                    {data.drOpinion}\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={12} sm={2}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"div\"\n                    weight={7}\n                  >\n                    약 처방 기록\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={12} sm={10}>\n                  {medicines.length === 0 && (\n                    <StyledTypography\n                      variant=\"subtitle1\"\n                      component=\"div\"\n                      weight={7}\n                      style={{\n                        padding: '1rem',\n                      }}\n                    >\n                      약 처방 내역이 존재하지 않습니다.\n                    </StyledTypography>\n                  )}\n                  {medicines.length > 0 && (\n                    <CollapsibleMedicineRows data={medicines} />\n                  )}\n                </Grid>\n\n                <Grid item xs={12} sm={2}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"div\"\n                    weight={7}\n                  >\n                    주사 처방 기록\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={12} sm={10}>\n                  {injectors.length === 0 && (\n                    <StyledTypography\n                      variant=\"subtitle1\"\n                      component=\"div\"\n                      weight={7}\n                      style={{\n                        padding: '1rem',\n                      }}\n                    >\n                      주사 처방 내역이 존재하지 않습니다.\n                    </StyledTypography>\n                  )}\n                  {injectors.length > 0 && (\n                    <CollapsibleMedicineRows data={injectors} />\n                  )}\n                </Grid>\n\n                <Grid item xs={12} sm={2}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"div\"\n                    weight={7}\n                  >\n                    진단 검사 기록\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={12} sm={10}>\n                  {diagnostics.length === 0 && (\n                    <StyledTypography\n                      variant=\"subtitle1\"\n                      component=\"div\"\n                      weight={7}\n                      style={{\n                        padding: '1rem',\n                      }}\n                    >\n                      진단 검사 내역이 존재하지 않습니다.\n                    </StyledTypography>\n                  )}\n                  {diagnostics.length > 0 && (\n                    <CollapsibleDiagnosticsRows data={diagnostics} />\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </Fragment>\n  );\n};\n\nexport default React.memo(CollapsibleRows);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  SwipeableDrawer,\n  IconButton,\n  TableContainer,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport { setDiagnosisHistoryDrawer } from 'redux/features/diagnosis/diagnosisSlice';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport CollapsibleRows from '../container/CollapsibleRows';\nimport { showDiagnosisHistoryByPatientId } from 'apis/diagnosisAPI';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\n\n/**\n * * 목표 : \b진료 기록을 보여주기 위한 Drawer 컴포넌트\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DiagnosisHistoryDrawer = () => {\n  // 해상도 breakpoint를 설정하기 위한 Custom Hook\n  const { breakpoint } = useWindowSize();\n\n  // Spinner를 띄우기 위한 상태\n  const [isLoading, setLoading] = useState(false);\n\n  // 진료 기록을 저장하기 위한 상태\n  const [historyData, setHistoryData] = useState([]);\n  const dispatch = useDispatch();\n\n  // \b진료 Drawer의 상태\n  const isOpened = useSelector(\n    (state) => state.diagnosis.drawerStatus.diagnosisHistory,\n  );\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // Redux store에 저장되어있는 환자 정보\n  const patientInfo = useSelector((state) => state.diagnosis.patient);\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    dispatch(setDiagnosisHistoryDrawer(open));\n  };\n\n  /**\n   * * 목표 : isOpened가 바꼈을 시에 작동하는 side-effect\n   */\n  useEffect(() => {\n    if (isOpened) {\n      const { patientId } = patientInfo;\n      async function getDiagnosisHistory(patientId) {\n        try {\n          const result = await showDiagnosisHistoryByPatientId(patientId);\n          setHistoryData(result);\n          setLoading(true);\n        } catch (error) {\n          const { message } = error.response.data;\n          handleAlert('error', message);\n          setLoading(true);\n        }\n      }\n\n      getDiagnosisHistory(patientId);\n    }\n    return () => {\n      setHistoryData([]);\n      setLoading(false);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpened]);\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer>\n          <DrawerHeader\n            breakpoint={breakpoint}\n            style={{ padding: '0.5rem', backgroundColor: 'white', zIndex: 2 }}\n          >\n            <h1>진료 기록 보기</h1>\n            <div>\n              <IconButton>\n                <AiOutlineClose\n                  size={32}\n                  onClick={() => dispatch(setDiagnosisHistoryDrawer(false))}\n                />\n              </IconButton>\n            </div>\n          </DrawerHeader>\n          {isLoading && historyData.length > 0 && (\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell size=\"small\" />\n                    <TableCell>\n                      <StyledTypography\n                        variant=\"subtitle1\"\n                        component=\"h5\"\n                        weight={7}\n                      >\n                        진료일자\n                      </StyledTypography>\n                    </TableCell>\n                    <TableCell>\n                      <StyledTypography\n                        variant=\"subtitle1\"\n                        component=\"h5\"\n                        weight={7}\n                      >\n                        방문이유\n                      </StyledTypography>\n                    </TableCell>\n                    <TableCell>\n                      {' '}\n                      <StyledTypography\n                        variant=\"subtitle1\"\n                        component=\"h5\"\n                        weight={7}\n                      >\n                        의사의견\n                      </StyledTypography>\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n\n                <TableBody>\n                  {historyData.map((rows) => (\n                    <CollapsibleRows data={rows} />\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n          {isLoading && historyData.length === 0 && (\n            <div\n              style={{\n                display: 'flex',\n                width: '100%',\n                height: '80vh',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <div style={{ maxWidth: '500px', width: '100%' }}>\n                <img\n                  src=\"/assets/image/404/5.png\"\n                  alt=\"not found\"\n                  width=\"100%\"\n                />\n              </div>\n              <StyledTypography variant=\"h4\" component=\"h4\" weight={6}>\n                진료 기록을 찾을 수 없습니다.\n              </StyledTypography>\n            </div>\n          )}\n          {!isLoading && (\n            <div\n              style={{\n                display: 'flex',\n                width: '100%',\n                height: '90vh',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <HashSpinner />\n            </div>\n          )}\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default DiagnosisHistoryDrawer;\n","import React, { forwardRef } from 'react';\nimport { useSpring, animated } from 'react-spring/dist/react-spring.cjs';\n\n/**\n * React-spring을 이용하여 페이지 컴포넌트가 렌더링 되었을 때에\n * duration (0.3s)동안의 opacity를 주기 위한 컴포넌트\n * @author SUNG WOOK HWANG\n */\nconst SpringFade = forwardRef((props, ref) => {\n  const { in: open, children, onEnter, onExited, ...other } = props;\n  const style = useSpring({\n    from: { opacity: 0 },\n    to: { opacity: open ? 1 : 0 },\n    onStart: () => {\n      if (open && onEnter) {\n        onEnter();\n      }\n    },\n    onRest: () => {\n      if (!open && onExited) {\n        onExited();\n      }\n    },\n  });\n  return (\n    <animated.div ref={ref} style={style} {...other}>\n      {children}\n    </animated.div>\n  );\n});\n\nexport default SpringFade;\n","import axios from 'axios';\n\n/**\n * * 목적 : MQTT 프로토콜에 메시지를 보내기 위한 API\n * @param {PushMessageVO} pushMessage \n * * !String topic\n * * !String priority\n * * !String message\n * * !LocalDateTime createdAt (new Date().toJSON() 으로 보내면 됨)\n * @returns {Boolean} result\n * @throws\n * * HTTP Status 500 Internal Server Error\n * @author SUNG WOOK HWANG\n */\nexport const sendMqttMessage = async (pushMessage) => {\n    const result = await axios.post('/mqtt', pushMessage);\n    return result.data.data;\n}\n\n/**\n * * 목적 : 보내진 Push 메시지를 보여주기 위한 API\n * @param {string} topic (/hospitalCode/memberAuthority 형식으로 구독)\n * @returns {List<PushMessageVO>} result\n * * !String topic\n * * !String priority\n * * !String message\n * * !LocalDateTime createdAt (const [year, date, day, time] 순으로 가져오면 됨)\n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status - \"no_topics\"\n * * * message - \"토픽이 존재하지 않거나 공백입니다.\"\n * * HTTP Status 404 - Not Found\n * * * status - \"no_message\"\n * * * message - \"수신 받은 메시지가 존재하지 않습니다.\"\n */\nexport const getNotificationByTopic = async (topic) => {\n    const result = await axios.get('/mqtt/notification', {\n        params: {\n            topic\n        }\n    });\n\n    const data = result.data.data;\n    return data;\n}\n","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setDiagnosisModal,\n  setActiveStep,\n} from 'redux/features/diagnosis/diagnosisSlice';\nimport {\n  makeStyles,\n  Modal,\n  Backdrop,\n  IconButton,\n  Grid,\n} from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport { registDiagnosisInfo } from 'apis/diagnosisAPI';\nimport { useSnackbar } from 'notistack';\nimport { sendMqttMessage } from 'apis/pushAPI';\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n/**\n * * 진료를 실시하고 결과를 추가하기 전에 띄우는 모달이며, 여기에서 진행 버튼을 클릭한다면 서버에 결과를 넘어가게 하는 것이 목표\n * @returns {JSX.Element} View\n * @author SUNG WOOK HWANG\n */\nconst DiagnosisModal = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const { breakpoint } = useWindowSize();\n\n  // Redux 정보 가져오기\n  const isOpened = useSelector((state) => state.diagnosis.modalStatus);\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n  const activeStep = useSelector((state) => state.diagnosis.activeStep);\n  const diagnosisInfo = useSelector((state) => state.diagnosis.diagnosisInfo);\n  const medicineInfo = useSelector((state) => state.diagnosis.medicineInfo);\n  const injectorInfo = useSelector((state) => state.diagnosis.injectorInfo);\n  const diagnosticInfo = useSelector((state) => state.diagnosis.diagnosticInfo);\n  const vitalInfo = useSelector(\n    (state) => state.diagnosis.diagnosisInfo.vitalInfo,\n  );\n  const { patientName } = useSelector((state) => state.diagnosis.patient);\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const handleNextStep = async () => {\n    try {\n      const { hospitalCode } = loginInfo;\n      const diagnostics = diagnosticInfo.map(\n        ({ diagInspectionId }) => diagInspectionId,\n      );\n\n      const medicines = medicineInfo.map(\n        ({ medicineId, count, medicineType }) => ({\n          medicineId,\n          medicineDose: count,\n          medicineType,\n        }),\n      );\n\n      const injectors = injectorInfo.map(\n        ({ medicineId, count, medicineType }) => ({\n          medicineId,\n          medicineDose: count,\n          medicineType,\n        }),\n      );\n\n      const { diagId, memberId, patientId, drOpinion } = diagnosisInfo;\n      const vital = !vitalInfo ? {} : vitalInfo;\n      const sendInfo = {\n        diagId,\n        memberId,\n        patientId,\n        drOpinion,\n        hospitalCode,\n        medicines,\n        injectors,\n        diagnostics,\n        vital,\n      };\n      await registDiagnosisInfo(sendInfo);\n\n      if (diagnostics.length > 0) {\n        // push 메시지를 날려준다.\n        const sendMessageInfo = {\n          topic: `/${hospitalCode}/inspector`,\n          priority: 'success',\n          message: `${patientName}님이 진단 검사를 요청하셨습니다.`,\n        };\n        await sendMqttMessage(sendMessageInfo);\n      }\n      handleAlert('success', '등록에 성공하였습니다.');\n      dispatch(setActiveStep(activeStep + 1));\n      dispatch(setDiagnosisModal(false));\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n    }\n  };\n  const handleClose = () => dispatch(setDiagnosisModal(false));\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpened}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <SpringFade in={isOpened}>\n          <div\n            className={classes.paper}\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  진료의 내용이 아래와 같습니까?\n                </StyledTypography>\n                <div>\n                  <IconButton\n                    onClick={() => dispatch(setDiagnosisModal(false))}\n                  >\n                    <AiOutlineClose size={24} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              <Grid container spacing={1}>\n                <Grid item xs={3}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={7}\n                  >\n                    의사소견\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={9}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={3}\n                  >\n                    {diagnosisInfo.drOpinion}\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={3}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={7}\n                  >\n                    약 처방 여부\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={9}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={3}\n                  >\n                    {medicineInfo.length > 0 ? 'O' : 'X'}\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={3}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={7}\n                  >\n                    주사 처방 여부\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={9}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={3}\n                  >\n                    {injectorInfo.length > 0 ? 'O' : 'X'}\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={3}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={7}\n                  >\n                    진단 검사 여부\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={9}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={3}\n                  >\n                    {diagnosticInfo.length > 0 ? 'O' : 'X'}\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={3}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={7}\n                  >\n                    바이탈 체크 여부\n                  </StyledTypography>\n                </Grid>\n                <Grid item xs={9}>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={3}\n                  >\n                    {vitalInfo ? 'O' : 'X'}\n                  </StyledTypography>\n                </Grid>\n              </Grid>\n            </ResponsiveContainer>\n            <div>\n              <StyledButton onClick={handleNextStep} bgColor=\"#FEFEFE\">\n                진료 등록 하기\n              </StyledButton>\n            </div>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DiagnosisModal;\n","import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useLocation } from 'react-router-dom';\n\nconst PageTransition = ({ children }) => {\n  const duration = 0.5;\n  const variants = {\n    initial: {\n      opacity: 0,\n    },\n    enter: {\n      opacity: 1,\n      transition: {\n        duration,\n        delay: duration,\n        when: 'beforeChildren',\n      },\n    },\n    exit: {\n      opacity: 0,\n      transition: { duration },\n    },\n  };\n  const location = useLocation();\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        key={location.pathname}\n        variants={variants}\n        initial=\"initial\"\n        animate=\"enter\"\n        exit=\"exit\"\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default PageTransition;\n","import React, { Fragment, useState } from 'react';\nimport styled from 'styled-components';\nimport { Drawer, IconButton, Container, Collapse } from '@material-ui/core';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { setHeaderInfo } from 'redux/features/common/commonSlice';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport clsx from 'clsx';\n\nconst MobileContainer = styled(Container)`\n  width: 100%;\n  height: 100vh;\n  background-color: #000;\n  padding-top: 1.2rem;\n  display: flex;\n  flex-direction: column;\n  color: white;\n  font-family: --apple-system, BlinkMacSystemFont, 'Spoqa Han Sans Neo', 'Lato';\n  .header-area {\n    display: flex;\n    justify-content: flex-start;\n    margin-bottom: 1rem;\n  }\n  .content-area {\n    display: flex;\n    width: 100vw;\n    margin-top: 0.5rem;\n    margin-bottom: 0.5rem;\n    padding: 1rem;\n    font-weight: 700;\n    font-size: 1.75rem;\n    text-decoration: underline;\n    text-underline-offset: 12px;\n    opacity: 0.7;\n    &:hover {\n      opacity: 1;\n      transition: opacity 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);\n    }\n  }\n\n  .collapsed-container {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin-left: 1.5rem;\n    .collapsed-item {\n      display: flex;\n      margin-top: 1rem;\n      margin-bottom: 1rem;\n      align-items: center;\n      opacity: 0.7;\n      span {\n        margin-left: 1rem;\n        font-size: 1.3rem;\n        font-weight: 500;\n      }\n\n      .text-bold {\n        opacity: 1;\n        font-weight: 700;\n      }\n\n      &:hover {\n        opacity: 1;\n        transition: opacity 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);\n      }\n    }\n\n    * {\n      cursor: pointer;\n    }\n  }\n\n  .selected-item {\n    opacity: 1;\n  }\n\n  .text-underline {\n    text-decoration: underline;\n    text-underline-offset: 12px;\n  }\n`;\n\n/**\n * * 모바일로 접속하였을 떄에 보여줄 Drawer\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst MobileDrawer = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const history = useHistory();\n  const { memberAuthority } = useSelector((state) => state.common.loginInfo);\n  const isOpened = useSelector((state) => state.common.headerInfo.drawer);\n\n  const [collapseInfo, setCollapseInfo] = useState({\n    diagnosis: false,\n    member: false,\n    patient: false,\n  });\n\n  const { diagnosis, member, patient } = collapseInfo;\n\n  const pathnames = location.pathname.split('/');\n  const specificPath = pathnames[pathnames.length - 1];\n  const isDiagnosis =\n    specificPath === 'reservation' ||\n    specificPath === 'diagnosis' ||\n    specificPath === 'diagnostic' ||\n    specificPath === 'diagnosis-history';\n\n  const isPatient = specificPath === 'patient';\n  const isMember = specificPath === 'member';\n\n  const handleClose = () => {\n    dispatch(\n      setHeaderInfo({\n        name: 'drawer',\n        status: false,\n      }),\n    );\n  };\n\n  const goPage = (page) => {\n    dispatch(\n      setHeaderInfo({\n        name: 'drawer',\n        status: false,\n      }),\n    );\n    history.push(page);\n  };\n\n  const handleHeaderCollapse = (data) => {\n    const { name, value } = data;\n    setCollapseInfo({\n      ...collapseInfo,\n      [name]: value,\n    });\n  };\n  return (\n    <Fragment>\n      <Drawer anchor=\"top\" open={isOpened}>\n        <MobileContainer>\n          <div onClick={handleClose} className=\"header-area\">\n            <IconButton type=\"button\">\n              <AiOutlineClose size={24} color=\"white\" />\n            </IconButton>\n          </div>\n          <PageTransition>\n            {memberAuthority !== 'ROLE_DIRECTOR' && (\n              <Fragment>\n                <div\n                  className={clsx('content-area', {\n                    'selected-item': isDiagnosis,\n                  })}\n                  onClick={() =>\n                    handleHeaderCollapse({\n                      name: 'diagnosis',\n                      value: !diagnosis,\n                    })\n                  }\n                >\n                  진료\n                </div>\n                <Collapse in={diagnosis}>\n                  <div className=\"collapsed-container\">\n                    {memberAuthority !== 'ROLE_INSPECTOR' && (\n                      <div\n                        className={clsx('collapsed-item', {\n                          'text-underline': specificPath === 'reservation',\n                        })}\n                        onClick={() => goPage('/dashboard/reservation')}\n                      >\n                        <span>진료 접수</span>\n                      </div>\n                    )}\n\n                    {!(\n                      memberAuthority === 'ROLE_NURSE' ||\n                      memberAuthority === 'ROLE_INSPECTOR'\n                    ) && (\n                      <div\n                        className={clsx('collapsed-item', {\n                          'text-underline': specificPath === 'diagnosis',\n                        })}\n                        onClick={() => goPage('/dashboard/diagnosis')}\n                      >\n                        <span>진료 등록</span>\n                      </div>\n                    )}\n\n                    <div\n                      className={clsx('collapsed-item', {\n                        'text-underline': specificPath === 'diagnostic',\n                      })}\n                      onClick={() => goPage('/dashboard/diagnostic')}\n                    >\n                      <span>진단 검사 보기</span>\n                    </div>\n                    <div\n                      className={clsx('collapsed-item', {\n                        'text-underline': specificPath === 'diagnosis-history',\n                      })}\n                      onClick={() => goPage('/dashboard/diagnosis-history')}\n                    >\n                      <span>진료 기록 보기</span>\n                    </div>\n                  </div>\n                </Collapse>\n              </Fragment>\n            )}\n\n            <div\n              className={clsx('content-area', {\n                'selected-item': isPatient,\n              })}\n              onClick={() =>\n                handleHeaderCollapse({\n                  name: 'patient',\n                  value: !patient,\n                })\n              }\n            >\n              환자\n            </div>\n            <Collapse in={patient}>\n              <div className=\"collapsed-container\">\n                <div\n                  className={clsx('collapsed-item', {\n                    'text-underline': specificPath === 'patient',\n                  })}\n                  onClick={() => goPage('/dashboard/patient')}\n                >\n                  <span>환자 관리</span>\n                </div>\n              </div>\n            </Collapse>\n            <div\n              className={clsx('content-area', {\n                'selected-item': isMember,\n              })}\n              onClick={() =>\n                handleHeaderCollapse({\n                  name: 'member',\n                  value: !member,\n                })\n              }\n            >\n              임직원\n            </div>\n            <Collapse in={member}>\n              <div className=\"collapsed-container\">\n                <div\n                  className={clsx('collapsed-item', {\n                    'text-underline': specificPath === 'member',\n                  })}\n                  onClick={() => goPage('/dashboard/member')}\n                >\n                  <span>임직원 관리</span>\n                </div>\n              </div>\n            </Collapse>\n\n            <div\n              className=\"content-area\"\n              onClick={() =>\n                dispatch(\n                  setHeaderInfo({\n                    name: 'notification',\n                    status: true,\n                  }),\n                )\n              }\n            >\n              알림 리스트\n            </div>\n\n            <div\n              className=\"content-area\"\n              onClick={() => goPage('/dashboard/tutorial')}\n            >\n              튜토리얼\n            </div>\n          </PageTransition>\n        </MobileContainer>\n      </Drawer>\n    </Fragment>\n  );\n};\n\nexport default MobileDrawer;\n","import React from 'react';\nimport { css } from 'styled-components';\nimport PuffLoader from 'react-spinners/PuffLoader';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nconst Spinner = ({ isLoading }) => (\n  <div style={{ width: '100%' }}>\n    <PuffLoader color=\"red\" loading={isLoading} css={override} size={150} />\n  </div>\n);\n\nexport default Spinner;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Drawer, IconButton } from '@material-ui/core';\nimport { AiFillCheckCircle } from 'react-icons/ai';\nimport { IoIosInformationCircle, IoIosWarning } from 'react-icons/io';\nimport useWindowSize from 'hooks/useWindowSize';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setHeaderInfo } from 'redux/features/common/commonSlice';\n\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { getNotificationByTopic } from 'apis/pushAPI';\nimport Spinner from 'components/common/spinner/Spinner';\n\nconst NotificationContainer = styled.div`\n  width: 100%;\n  height: 90vh;\n  display: flex;\n\n  flex-direction: column;\n\n  .rounded-box {\n    display: flex;\n\n    border-radius: 8px;\n    padding: 0.5rem;\n    /* height: 40px; */\n    margin-top: 0.25rem;\n    margin-bottom: 0.25rem;\n  }\n  .success-area {\n    background-color: rgb(238, 247, 238);\n  }\n\n  .success-icon-area {\n    background-color: rgb(118, 188, 103);\n  }\n\n  .information-area {\n    background-color: rgb(231, 239, 249);\n  }\n\n  .information-icon-area {\n    background-color: rgb(58, 102, 212);\n  }\n\n  .warning-area {\n    background-color: rgb(252, 246, 234);\n  }\n\n  .warning-icon-area {\n    background-color: rgb(217, 146, 34);\n  }\n\n  .danger-area {\n    background-color: rgb(247, 236, 233);\n  }\n\n  .danger-icon-area {\n    background-color: rgb(203, 79, 51);\n  }\n\n  .icon-area {\n    display: flex;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    padding: 0.2rem;\n    /* padding: rem; */\n    margin-right: 0.6rem;\n  }\n\n  .content-area {\n    display: flex;\n    padding-left: 0.75rem;\n    align-items: center;\n    font-weight: 700;\n  }\n`;\n\n/**\n * * 각 병원의 각 포지션에 맞는 알림 리스\b트를 보여주기 위한 컴포넌트\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst NotificationDrawer = () => {\n  const { breakpoint } = useWindowSize();\n  const dispatch = useDispatch();\n  const [isLoading, setLoading] = useState(false);\n  const [pushList, setPushList] = useState([]);\n  const isOpened = useSelector((state) => state.common.headerInfo.notification);\n  const { hospitalCode, memberAuthority } = useSelector(\n    (state) => state.common.loginInfo,\n  );\n\n  useEffect(() => {\n    if (isOpened) {\n      async function getPushTopicList() {\n        try {\n          if (memberAuthority === 'ROLE_DEVELOP') {\n            const result = await getNotificationByTopic(`/${hospitalCode}`);\n            setPushList(result);\n            // setLoading(true);\n          } else if (memberAuthority === 'ROLE_DIRECTOR') {\n            const result = await getNotificationByTopic(\n              `/${hospitalCode}/director`,\n            );\n            setPushList(result);\n          } else if (memberAuthority === 'ROLE_DOCTOR') {\n            const result = await getNotificationByTopic(\n              `/${hospitalCode}/doctor`,\n            );\n            setPushList(result);\n          } else if (memberAuthority === 'ROLE_NURSE') {\n            const result = await getNotificationByTopic(\n              `/${hospitalCode}/nurse`,\n            );\n            setPushList(result);\n          } else if (memberAuthority === 'ROLE_INSPECTOR') {\n            const result = await getNotificationByTopic(\n              `/${hospitalCode}/inspector`,\n            );\n            setPushList(result);\n          }\n        } catch (e) {\n          console.log(e.response.data);\n        }\n      }\n\n      setTimeout(() => {\n        getPushTopicList();\n        setLoading(true);\n      }, 1000);\n    }\n\n    return () => {\n      setPushList([]);\n      setLoading(false);\n    };\n  }, [isOpened, hospitalCode, memberAuthority]);\n\n  return (\n    <Fragment>\n      <Drawer anchor=\"right\" open={isOpened}>\n        <ResponsiveContainer breakpoint={breakpoint}>\n          <DrawerHeader\n            breakpoint={breakpoint}\n            style={{ padding: '0.5rem', zIndex: 1, backgroundColor: 'white' }}\n          >\n            <h1>알림</h1>\n            <div>\n              <IconButton>\n                <AiOutlineClose\n                  size={32}\n                  onClick={() =>\n                    dispatch(\n                      setHeaderInfo({\n                        name: 'notification',\n                        status: false,\n                      }),\n                    )\n                  }\n                />\n              </IconButton>\n            </div>\n          </DrawerHeader>\n\n          <NotificationContainer>\n            {isLoading &&\n              pushList.length > 0 &&\n              pushList.map((data) => {\n                const { priority } = data;\n                console.log(data, 'hello');\n                if (priority === 'success') {\n                  return <SuccessItem data={data} />;\n                } else if (priority === 'information' || priority === 'info') {\n                  return <InformationItem data={data} />;\n                } else if (priority === 'warning') {\n                  return <WarningItem data={data} />;\n                } else if (priority === 'danger' || priority === 'error') {\n                  return <DangerItem data={data} />;\n                }\n                return <></>;\n              })}\n            {!isLoading && (\n              <div\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100vh',\n                  // backgroundColor: 'red',\n                }}\n              >\n                <Spinner />\n              </div>\n            )}\n          </NotificationContainer>\n        </ResponsiveContainer>\n      </Drawer>\n    </Fragment>\n  );\n};\n\nconst SuccessItem = ({ data }) => (\n  <div className=\"rounded-box success-area\">\n    <div className=\"icon-area success-icon-area\">\n      <AiFillCheckCircle size={26} color=\"white\" />\n    </div>\n    <div className=\"content-area\">{data.message}</div>\n  </div>\n);\n\nconst InformationItem = ({ data }) => (\n  <div className=\"rounded-box information-area\">\n    <div className=\"icon-area information-icon-area\">\n      <IoIosInformationCircle size={26} color=\"white\" />\n    </div>\n    <div className=\"content-area\">{data.message}</div>\n  </div>\n);\n\nconst WarningItem = ({ data }) => (\n  <div className=\"rounded-box warning-area\">\n    <div className=\"icon-area warning-icon-area\">\n      <IoIosWarning size={26} color=\"white\" />\n    </div>\n    <div className=\"content-area\">{data.message}</div>\n  </div>\n);\n\nconst DangerItem = ({ data }) => (\n  <div className=\"rounded-box danger-area\">\n    <div className=\"icon-area danger-icon-area\">\n      <IoIosWarning size={26} color=\"white\" />\n    </div>\n    <div className=\"content-area\">{data.message}</div>\n  </div>\n);\n\nexport default NotificationDrawer;\n","import { useState } from 'react';\n\n/**\n * * 입력 값을 편안하게 받기 위해 제작한 Custom Hook\n * * 사용 법 : Element에  {...지정한 Hook의 변수 이름} 을 기입하면 사용가능.\n * @param {object} defaultValue (어떤 값이 들어와도 상관 없음.)\n * @returns {object, function} value, onChange\n * @author SUNG WOOK HWANG\n */\nconst useInput = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n\n  const onChange = (e) => {\n    const { value } = e.target;\n    setValue(value);\n  };\n\n  return { value, onChange };\n};\n\nexport default useInput;\n","import axios from 'axios';\n\n\n/**\n * * 목적 : 로그인을 수행하기 위한 API\n * * 경로 : /api/v1/auth\n * @param {LoginVO} loginInfo \n * * !String hospitalCode\n * * !String memberEmail\n * * !String memberPw\n * \n * @returns {UserInfoVO} userInfo\n * * !String authToken // JWT Token\n * * !int memberId // Member identify\n * * !String memberEmail\n * * !String memberAuthority \n * * !String hospitalCode\n * \n * @throws\n * * HTTP Status 401 - Unauthorized\n * * * status - \"no_hospital\"\n * * * message - \"병원 정보가 존재하지 않습니다.\"\n * \n * * HTTP Status 401 - Unauthorized\n * * * status - \"no_account\"\n * * * message - \"존재하지 않습니다.\"\n * @author SUNG WOOK HWANG\n */\nexport const getAuthentication = async (loginInfo) => {\n    const result = await axios.post('/auth', loginInfo);\n    const data = result.data.data;\n    const status = result.status;\n\n    return { data, status };\n}","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setAuthToken,\n  setHeaderInfo,\n  setLoginInfo,\n} from 'redux/features/common/commonSlice';\nimport {\n  makeStyles,\n  Modal,\n  Backdrop,\n  IconButton,\n  Grid,\n  InputBase,\n  Button,\n  Hidden,\n} from '@material-ui/core';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { RiHospitalLine, RiLockPasswordLine } from 'react-icons/ri';\nimport { HiOutlineMail } from 'react-icons/hi';\nimport { useSnackbar } from 'notistack';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport useInput from 'hooks/useInput';\nimport { getAuthentication } from 'apis/authAPI';\nimport { addAuthHeader } from 'apis/axiosConfig';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst InputBox = styled.div`\n  display: flex;\n  align-items: center;\n  border: 1.75px solid #74c0fc;\n  border-radius: 6px;\n  /* background-color: #e9ecef; */\n  margin-top: 0.75rem;\n  margin-bottom: 0.75rem;\n\n  .icon-area {\n    height: 30px;\n    display: flex;\n    align-items: center;\n    padding-right: 0.5rem;\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n    margin-top: 0.3rem;\n    margin-bottom: 0.3rem;\n\n    border-right: 1.35px solid #74c0fc;\n  }\n\n  .input-area {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    font-size: 0.8rem;\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n    font-family: --apple-system, BlinkMacSystemFont, 'Spoqa Han Sans Neo',\n      'Lato';\n    font-weight: 400;\n  }\n`;\n\nconst AuthModal = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const { breakpoint } = useWindowSize();\n\n  const history = useHistory();\n\n  const hospitalCode = useInput('');\n  const memberEmail = useInput('');\n  const memberPw = useInput('');\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n      autoHideDuration: 2000,\n    });\n  };\n\n  const isOpened = useSelector((state) => state.common.headerInfo.auth);\n  const handleClose = () =>\n    dispatch(\n      setHeaderInfo({\n        name: 'auth',\n        status: false,\n      }),\n    );\n\n  const handleLogin = async (e) => {\n    const hospital = hospitalCode.value;\n    const email = memberEmail.value;\n    const password = memberPw.value;\n    try {\n      const { data } = await getAuthentication({\n        hospitalCode: hospital,\n        memberEmail: email,\n        memberPw: password,\n      });\n\n      const { authToken, ...rest } = data;\n\n      addAuthHeader(authToken);\n\n      dispatch(setAuthToken(authToken));\n      dispatch(setLoginInfo(rest));\n\n      sessionStorage.setItem('authToken', authToken);\n      sessionStorage.setItem('userInfo', JSON.stringify(rest));\n\n      handleAlert('success', '로그인에 성공하였습니다.');\n\n      handleClose();\n      history.push('/dashboard');\n    } catch (error) {\n      // alert(error.response);\n      const { message } = error.response.data;\n      handleAlert('error', message);\n    }\n  };\n  const handleKeyPress = async (event) => {\n    const { key } = event;\n\n    const hospital = hospitalCode.value;\n    const email = memberEmail.value;\n    const password = memberPw.value;\n    if (key === 'Enter' && hospital && email && password) {\n      try {\n        const { data } = await getAuthentication({\n          hospitalCode: hospital,\n          memberEmail: email,\n          memberPw: password,\n        });\n\n        const { authToken, ...rest } = data;\n\n        addAuthHeader(authToken);\n\n        dispatch(setAuthToken(authToken));\n        dispatch(setLoginInfo(rest));\n\n        sessionStorage.setItem('authToken', authToken);\n        sessionStorage.setItem('userInfo', JSON.stringify(rest));\n\n        handleAlert('success', '로그인에 성공하였습니다.');\n\n        handleClose();\n        history.push('/dashboard');\n      } catch (error) {\n        // alert(error.response);\n        const { message } = error.response.data;\n        handleAlert('error', message);\n      }\n    } else if (key === 'Enter' && !hospital && !email && !password) {\n      handleAlert('error', '값을 올바르게 채워주세요.');\n    }\n  };\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpened}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <SpringFade in={isOpened}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer\n              breakpoint={breakpoint}\n              style={{ flex: 1 }}\n              onKeyPress={handleKeyPress}\n            >\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  로그인\n                </StyledTypography>\n                <div>\n                  <IconButton onClick={() => handleClose()}>\n                    <AiOutlineClose size={24} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n\n              <Grid container spacing={3}>\n                <Grid\n                  item\n                  xs={12}\n                  sm={6}\n                  style={{\n                    padding: '0.5rem',\n                  }}\n                >\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={5}\n                    style={{\n                      marginTop: '1rem',\n                    }}\n                  >\n                    병원 코드\n                  </StyledTypography>\n                  <InputBox>\n                    <div className=\"icon-area\">\n                      <RiHospitalLine size={24} color=\"black\" />\n                    </div>\n                    <InputBase\n                      // type=\"text\"\n                      className=\"input-area\"\n                      {...hospitalCode}\n                      autoCapitalize=\"true\"\n                    />\n                  </InputBox>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={5}\n                  >\n                    이메일\n                  </StyledTypography>\n                  <InputBox>\n                    <div className=\"icon-area\">\n                      <HiOutlineMail size={24} color=\"black\" />\n                    </div>\n                    <InputBase\n                      type=\"email\"\n                      className=\"input-area\"\n                      {...memberEmail}\n                    />\n                  </InputBox>\n                  <StyledTypography\n                    variant=\"subtitle1\"\n                    component=\"h5\"\n                    weight={5}\n                  >\n                    비밀번호\n                  </StyledTypography>\n                  <InputBox>\n                    <div className=\"icon-area\">\n                      <RiLockPasswordLine size={24} color=\"black\" />\n                    </div>\n                    <InputBase\n                      type=\"password\"\n                      className=\"input-area\"\n                      {...memberPw}\n                    />\n                  </InputBox>\n\n                  <Button\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    style={{\n                      marginTop: '2rem',\n                    }}\n                    onClick={() => handleLogin()}\n                  >\n                    로그인\n                  </Button>\n                </Grid>\n                <Grid\n                  item\n                  sm={6}\n                  style={{\n                    padding: '0.5rem',\n                  }}\n                >\n                  <Hidden xsDown>\n                    <img\n                      src=\"/assets/image/dashboard_1.png\"\n                      alt=\"random\"\n                      width=\"100%\"\n                    />\n                  </Hidden>\n                </Grid>\n              </Grid>\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default AuthModal;\n","import React, { Fragment, useState, useEffect, useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Container, Grid, Hidden } from '@material-ui/core';\nimport { MdLocalHospital } from 'react-icons/md';\nimport { AiOutlineQuestion } from 'react-icons/ai';\nimport { IoLogIn, IoLogOut, IoNotificationsOutline } from 'react-icons/io5';\nimport { HiOutlineViewList } from 'react-icons/hi';\nimport { motion } from 'framer-motion';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\n\nimport useWindowSize from 'hooks/useWindowSize';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setAuthToken,\n  setHeaderInfo,\n  setLoginInfo,\n} from 'redux/features/common/commonSlice';\nimport MobileDrawer from './drawer/MobileDrawer';\n\nimport NotificationDrawer from './drawer/NotificationDrawer';\nimport AuthModal from 'components/auth/modal/AuthModal';\nimport { removeAuthHeader } from 'apis/axiosConfig';\n\n/**\n * * 목표 : 페이지 컨테이너\n */\nconst PageContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  max-height: 50px;\n  background-color: #000;\n  display: flex;\n  font-family: --apple-system, BlinkMacSystemFont, 'Spoqa Han Sans Neo', 'Lato';\n  .common-grid {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 50px;\n    color: white;\n    font-weight: 400;\n    letter-spacing: -0.5px;\n    opacity: 0.7;\n\n    &:hover {\n      opacity: 1;\n      transition: opacity 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);\n    }\n  }\n\n  * {\n    cursor: pointer;\n  }\n`;\n\n/**\n * * 목표 : 사이드 바의 컨테이너\n */\nconst SidebarContainer = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  max-height: 50px;\n  background-color: rgb(28, 28, 28);\n  font-family: --apple-system, BlinkMacSystemFont, 'Spoqa Han Sans Neo', 'Lato';\n  .common-grid {\n    display: flex;\n    align-items: center;\n    height: 50px;\n    color: #f5f5f7;\n\n    .big-text {\n      font-size: 1.35rem;\n\n      &:hover {\n        opacity: 1;\n        transition: opacity 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);\n      }\n    }\n\n    .small-text {\n      font-size: 1rem;\n      font-weight: 400;\n      opacity: 0.7;\n      &:hover {\n        opacity: 1;\n        transition: opacity 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);\n      }\n    }\n\n    .selected-item {\n      text-decoration: underline;\n      text-underline-offset: 5px;\n      opacity: 1;\n      font-weight: 700;\n    }\n\n    .bold {\n      font-weight: 700;\n    }\n  }\n\n  .right-align {\n    justify-content: flex-end;\n    span {\n      margin-left: 0.5rem;\n    }\n  }\n\n  * {\n    cursor: pointer;\n  }\n`;\n\n/**\n * * 목표 : 반응형 웹 헤더를 제공\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst ResponsivePageHeader = () => {\n  const { breakpoint } = useWindowSize();\n  const location = useLocation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const authInfo = useSelector((state) => state.common.loginInfo);\n  const { memberAuthority } = authInfo;\n  const [isLogined, setLogined] = useState(false);\n\n  // authInfo의 이메일이 공백이 아니라면 로그인 처리\n  useEffect(() => {\n    if (authInfo.memberEmail !== '') {\n      setLogined(true);\n    }\n  }, [authInfo]);\n\n  const pathnames = location.pathname\n    .split('/')\n    .filter((data) => (data !== '' ? true : false));\n  const specificPath = pathnames[pathnames.length - 1];\n\n  // 접근한 경로가 진료, 환자, 임직원, 대시보드, 튜토리얼, 메인인지 확인하기 위한 변수\n  const isDiagnosis =\n    specificPath === 'reservation' ||\n    specificPath === 'diagnosis' ||\n    specificPath === 'diagnostic' ||\n    specificPath === 'diagnosis-history';\n\n  const isPatient = specificPath === 'patient';\n  const isMember = specificPath === 'member';\n  const isDashboard = specificPath === 'dashboard';\n  const isTutorial = specificPath === 'tutorial';\n  const isMainPage = pathnames.length === 0;\n\n  const goPage = useCallback(\n    (page) => {\n      history.replace(page);\n    },\n    [history],\n  );\n\n  const handleLogin = () => {\n    dispatch(\n      setHeaderInfo({\n        name: 'auth',\n        status: true,\n      }),\n    );\n  };\n\n  /**\n   * * 목표 : 로그아웃을 하기 위함.\n   */\n  const handleLogout = () => {\n    removeAuthHeader();\n\n    dispatch(setLoginInfo(''));\n    dispatch(setAuthToken(''));\n\n    sessionStorage.removeItem('userInfo');\n    sessionStorage.removeItem('authToken');\n\n    setLogined(false);\n    window.location.href = '/';\n  };\n\n  /**\n   * * 목표: 모바일 Drawer를 열기 위함.\n   */\n  const handleOpen = () => {\n    dispatch(\n      setHeaderInfo({\n        name: 'drawer',\n        status: true,\n      }),\n    );\n  };\n\n  const handleDiagnosisClick = () => {\n    if (memberAuthority === 'ROLE_DOCTOR' || memberAuthority === 'ROLE_NURSE') {\n      history.push('/dashboard/reservation');\n      return;\n    } else if (memberAuthority === 'ROLE_INSPECTOR') {\n      history.push('/dashboard/diagnostic');\n      return;\n    }\n    history.push('/dashboard/diagnosis-history');\n  };\n\n  /**\n   * * 목표 : 모바일일 경우 ( < 600px ) 로그인 하지 않았을 떄에 나오는 헤더\n   * @returns {JSX.Element} view\n   */\n  const getMobileNotLoginedHeader = () => {\n    return (\n      <Container>\n        <Grid container spacing={1}>\n          <Grid\n            item\n            xs={2}\n            className=\"common-grid\"\n            style={{ justifyContent: 'flex-start' }}\n            onClick={() => {\n              if (authInfo.memberEmail !== '') {\n                handleOpen();\n              }\n              handleAlert('error', '로그인을 먼저 해야합니다.');\n              handleLogin();\n            }}\n          >\n            <motion.div whileHover={{ scale: 1.1 }}>\n              <HiOutlineViewList size={24} color=\"white\" />\n            </motion.div>\n\n            {/* Full Screen Drawer를 보여줄 수 있는 Button을 넣는다. */}\n          </Grid>\n          <Grid item xs={8} className=\"common-grid\">\n            <MdLocalHospital size={24} color=\"white\" />\n          </Grid>\n          <Grid\n            item\n            xs={2}\n            className=\"common-grid\"\n            style={{ justifyContent: 'flex-end' }}\n            onClick={handleLogin}\n          >\n            <motion.div whileHover={{ scale: 1.1 }}>\n              <IoLogIn color=\"white\" size={24} />\n            </motion.div>\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  };\n\n  /**\n   * * 목표 :모바일일 경우 ( < 600px ) 로그인 했을 때에 나오는 헤더\n   * @returns {JSX.Element} view\n   */\n  const getMobileTopHeader = () => {\n    return (\n      <Container>\n        <Grid container spacing={1}>\n          <Grid\n            item\n            xs={2}\n            className=\"common-grid\"\n            style={{ justifyContent: 'flex-start' }}\n            onClick={handleOpen}\n          >\n            <motion.div whileHover={{ scale: 1.1 }}>\n              <HiOutlineViewList size={24} color=\"white\" />\n            </motion.div>\n\n            {/* Full Screen Drawer를 보여줄 수 있는 Button을 넣는다. */}\n          </Grid>\n          <Grid\n            item\n            xs={8}\n            className=\"common-grid\"\n            onClick={() => {\n              history.push('/dashboard');\n            }}\n          >\n            <MdLocalHospital size={24} color=\"white\" />\n          </Grid>\n          <Grid\n            item\n            xs={2}\n            className=\"common-grid\"\n            style={{ justifyContent: 'flex-end' }}\n            onClick={handleLogout}\n          >\n            <motion.div whileHover={{ scale: 1.1 }}>\n              <IoLogOut color=\"white\" size={24} />\n            </motion.div>\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  };\n\n  // Desktop Header\n  const getNotLoginedHeader = () => {\n    return (\n      <Container maxWidth=\"lg\">\n        <Grid container spacing={1}>\n          <Grid\n            item\n            sm={2}\n            md={1}\n            className=\"common-grid\"\n            style={{ justifyContent: 'flex-start' }}\n            onClick={() => goPage('/')}\n          >\n            <MdLocalHospital size={24} color=\"white\" />\n          </Grid>\n          <Grid item sm={8} md={10} className=\"common-grid\"></Grid>\n          <Grid\n            item\n            sm={2}\n            md={1}\n            className=\"common-grid\"\n            style={{ justifyContent: 'flex-end' }}\n            onClick={handleLogin}\n          >\n            <IoLogIn color=\"white\" size={24} />\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  };\n\n  const getTopHeader = () => {\n    if (\n      isDiagnosis ||\n      isPatient ||\n      isMember ||\n      isDashboard ||\n      isTutorial ||\n      isMainPage\n    ) {\n      return (\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={1}>\n            <Grid\n              item\n              sm={2}\n              md={1}\n              className=\"common-grid\"\n              style={{ justifyContent: 'flex-start' }}\n              onClick={() => history.push('/dashboard')}\n            >\n              <MdLocalHospital size={24} color=\"white\" />\n            </Grid>\n            {memberAuthority !== 'ROLE_DIRECTOR' && (\n              <Grid\n                item\n                sm={2}\n                md={1}\n                className=\"common-grid\"\n                onClick={() => handleDiagnosisClick()}\n              >\n                <span>진료</span>\n              </Grid>\n            )}\n\n            <Grid\n              item\n              sm={2}\n              md={1}\n              className=\"common-grid\"\n              onClick={() => goPage('/dashboard/patient')}\n            >\n              <span>환자</span>\n            </Grid>\n\n            <Grid\n              item\n              sm={2}\n              md={1}\n              className=\"common-grid\"\n              onClick={() => goPage('/dashboard/member')}\n            >\n              <span>임직원</span>\n            </Grid>\n            <Grid\n              \n              sm={2}\n              md={6}\n              className=\"common-grid\"\n              onClick={() => goPage('/dashboard/tutorial')}\n              style={{\n                justifyContent: 'flex-end',\n              }}\n            >\n              <AiOutlineQuestion size={24} color=\"white\" />\n            </Grid>\n            <Grid\n              item\n              sm={1}\n              md={1}\n              className=\"common-grid\"\n              style={{\n                justifyContent: 'flex-end',\n              }}\n              onClick={() =>\n                dispatch(\n                  setHeaderInfo({\n                    name: 'notification',\n                    status: true,\n                  }),\n                )\n              }\n            >\n              <IoNotificationsOutline size={24} color=\"white\" />\n            </Grid>\n\n            <Grid\n              item\n              sm={1}\n              md={1}\n              className=\"common-grid\"\n              style={{\n                justifyContent: 'flex-end',\n              }}\n              onClick={handleLogout}\n            >\n              <IoLogOut color=\"white\" size={24} />\n            </Grid>\n          </Grid>\n        </Container>\n      );\n    }\n    return <Container></Container>;\n  };\n\n  const getBottomContent = () => {\n    if (isDiagnosis) {\n      return (\n        <Container maxWidth=\"lg\">\n          <Grid container>\n            <Grid item xs={2} className=\"common-grid\">\n              <span className={clsx('big-text', 'bold')}>진료</span>\n            </Grid>\n            <Grid item xs={10} className={clsx('common-grid', 'right-align')}>\n              {memberAuthority !== 'ROLE_INSPECTOR' && (\n                <span\n                  className={clsx('small-text', {\n                    'selected-item': specificPath === 'reservation',\n                  })}\n                  onClick={() => goPage('/dashboard/reservation')}\n                >\n                  진료 접수\n                </span>\n              )}\n\n              {!(\n                memberAuthority === 'ROLE_NURSE' ||\n                memberAuthority === 'ROLE_INSPECTOR'\n              ) && (\n                <span\n                  className={clsx('small-text', {\n                    'selected-item': specificPath === 'diagnosis',\n                  })}\n                  onClick={() => goPage('/dashboard/diagnosis')}\n                >\n                  진료 등록\n                </span>\n              )}\n\n              <span\n                className={clsx('small-text', {\n                  'selected-item': specificPath === 'diagnostic',\n                })}\n                onClick={() => goPage('/dashboard/diagnostic')}\n              >\n                진단 검사 보기\n              </span>\n              <span\n                className={clsx('small-text', {\n                  'selected-item': specificPath === 'diagnosis-history',\n                })}\n                onClick={() => goPage('/dashboard/diagnosis-history')}\n              >\n                진료 기록 보기\n              </span>\n            </Grid>\n          </Grid>\n        </Container>\n      );\n    }\n\n    if (isPatient) {\n      return (\n        <Container maxWidth=\"lg\">\n          <Grid container>\n            <Grid item xs={2} className=\"common-grid\">\n              <span className={clsx('big-text', 'bold')}>환자</span>\n            </Grid>\n            <Grid item xs={10} className={clsx('common-grid', 'right-align')}>\n              <span\n                className={clsx('small-text', {\n                  'selected-item': specificPath === 'patient',\n                })}\n                onClick={() => goPage('/dashboard/patient')}\n              >\n                환자 관리\n              </span>\n            </Grid>\n          </Grid>\n        </Container>\n      );\n    }\n\n    if (isMember) {\n      return (\n        <Container maxWidth=\"lg\">\n          <Grid container>\n            <Grid item xs={2} className=\"common-grid\">\n              <span className={clsx('big-text', 'bold')}>병원</span>\n            </Grid>\n            <Grid item xs={10} className={clsx('common-grid', 'right-align')}>\n              <span\n                className={clsx('small-text', {\n                  'selected-item': specificPath === 'member',\n                })}\n                onClick={() => goPage('/dashboard/member')}\n              >\n                임직원 관리\n              </span>\n            </Grid>\n          </Grid>\n        </Container>\n      );\n    }\n\n    if (isDashboard) {\n      return <Container maxWidth=\"lg\"></Container>;\n    }\n\n    return <Container></Container>;\n  };\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n  return (\n    <Fragment>\n      {/* 상위 헤더  */}\n\n      <PageContainer\n        style={{\n          zIndex: 3,\n        }}\n      >\n        {breakpoint === 'xs' && (\n          <Hidden smUp>\n            {!isLogined ? getMobileNotLoginedHeader() : getMobileTopHeader()}\n          </Hidden>\n        )}\n        {breakpoint !== 'xs' && (\n          <Hidden xsDown>\n            {!isLogined ? getNotLoginedHeader() : getTopHeader()}\n          </Hidden>\n        )}\n      </PageContainer>\n\n      {/* 하위 헤더 */}\n      <SidebarContainer>\n        {breakpoint !== 'xs' && <Hidden xsDown>{getBottomContent()}</Hidden>}\n      </SidebarContainer>\n\n      {breakpoint === 'xs' && <MobileDrawer />}\n\n      <NotificationDrawer />\n      <AuthModal />\n    </Fragment>\n  );\n};\n\nexport default ResponsivePageHeader;\n","import React, { useEffect, Fragment } from 'react';\nimport {\n  Divider,\n  Grid,\n  Stepper,\n  Step,\n  StepLabel,\n  IconButton,\n} from '@material-ui/core';\nimport { GiMedicines, GiLoveInjection } from 'react-icons/gi';\nimport { IoIosArrowBack, IoIosArrowForward } from 'react-icons/io';\nimport { FaDiagnoses } from 'react-icons/fa';\nimport { RiChatHistoryFill } from 'react-icons/ri';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport {\n  setMedicineDrawer,\n  setInjectorDrawer,\n  setDiagnosticDrawer,\n  setDiagnosisHistoryDrawer,\n  setDiagnosisModal,\n  setActiveStep,\n  resetDiagnosisInfos,\n} from 'redux/features/diagnosis/diagnosisSlice';\nimport StyledButton from 'components/common/button/StyledButton';\n\nimport ContentContainer from 'components/common/container/ContentContainer';\nimport TitleHeader from 'components/common/header/TitleHeader';\nimport DataTable from 'components/diagnosis/table/DataTable';\nimport DiagnosisDataPage from 'components/diagnosis/container/DiagnosisDataInput';\nimport MedicineDrawer from 'components/diagnosis/drawer/MedicineDrawer';\nimport InjectorDrawer from 'components/diagnosis/drawer/InjectorDrawer';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DiagnosticDrawer from 'components/diagnosis/drawer/DiagnosticDrawer';\nimport DiagnosisHistoryDrawer from 'components/diagnosis/drawer/DiagnosisHistoryDrawer';\nimport DiagnosisModal from 'components/diagnosis/modal/DiagnosisModal';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport ResponsivePageHeader from 'components/common/header/ResponsivePageHeader';\n\nconst getSteps = () => [\n  '진료할 환자를 선택해주세요.',\n  '진료를 진행합니다.',\n  '진료 완료',\n];\n\n/**\n * * 목표 : 진료 페이지를 보여주기 위한 페이지 컴포넌트ㅌㅌ\n * @returns {JSX.Element} View\n * @author SUNG WOOK HWANG\n */\nconst DiagnosisPage = () => {\n  // 페이지 상태를 가져오기 위한 함수\n  const steps = getSteps();\n\n  const dispatch = useDispatch();\n\n  // Redux store에 저장된 환자 정보\n  const patientInfo = useSelector((state) => state.diagnosis.patient);\n\n  // Redux store에 저장된 진료 정보\n  const diagnosisInfo = useSelector((state) => state.diagnosis.diagnosisInfo);\n\n  // 현재 활성화 스텝을 나타내기 위한 변수\n  const activeStep = useSelector((state) => state.diagnosis.activeStep);\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Alert를 띄우기 위한 함수\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 다음 버튼을 눌렀을 시에 반응하는 이벤트 함수\n  const handleNext = () => {\n    if (patientInfo.patientId === 0) {\n      handleAlert('error', '환자를 선택해주세요.');\n      return;\n    } else if (activeStep === 1 && diagnosisInfo.drOpinion === '') {\n      handleAlert('error', '의사 의견을 입력해주세요.');\n      return;\n    } else if (activeStep === 1 && diagnosisInfo.drOpinion !== '') {\n      dispatch(setDiagnosisModal(true));\n      return;\n    }\n\n    if (activeStep === 2) {\n      dispatch(setActiveStep(0));\n      return;\n    }\n\n    dispatch(setActiveStep(activeStep + 1));\n  };\n\n  // 이전 버튼을 눌렀을 시에 반응하는 이벤트 함수\n  const handleBack = () => {\n    if (activeStep < 1) {\n      return;\n    }\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  /**\n   * 처음 렌더링 시에 side-effect를 정의 (렌더링 취소시)\n   * * step을 0으로 만든다.\n   * * medicineInfo, injectorInfo, diagnosticInfo, vitalInfo의 내용을 초기화 해준다.\n   */\n  useEffect(() => {\n    return () => {\n      dispatch(setActiveStep(0));\n      dispatch(resetDiagnosisInfos());\n    };\n  }, [dispatch]);\n\n  /**\n   * * 목표 : Step에 따른 View 컨텐트를 Return\n   * @param {string} step\n   * @returns {JSX.Element} View\n   */\n  const getStepContent = (step) => {\n    switch (step) {\n      case 0:\n        return <DataTable />;\n      case 1:\n        return (\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <DiagnosisDataPage />\n            <Grid container spacing={2}>\n              <Grid item xs={5} sm={3} md={2}>\n                <StyledButton\n                  size=\"medium\"\n                  bgColor=\"#003049\"\n                  onClick={() => dispatch(setMedicineDrawer(true))}\n                >\n                  <GiMedicines size={28} color=\"white\" />\n                  <span style={{ marginLeft: '0.5rem', color: 'white' }}>\n                    약 처방하기\n                  </span>\n                </StyledButton>\n              </Grid>\n              <Grid item xs={5} sm={3} md={2}>\n                <StyledButton\n                  size=\"medium\"\n                  bgColor=\"#FCBF49\"\n                  onClick={() => dispatch(setInjectorDrawer(true))}\n                >\n                  <GiLoveInjection size={28} />\n                  <span style={{ marginLeft: '0.5rem' }}>주사 처방하기</span>\n                </StyledButton>\n              </Grid>\n              <Grid item xs={5} sm={3} md={2}>\n                <StyledButton\n                  size=\"medium\"\n                  bgColor=\"#003049\"\n                  onClick={() => dispatch(setDiagnosticDrawer(true))}\n                >\n                  <FaDiagnoses size={28} color=\"white\" />\n                  <span style={{ marginLeft: '0.5rem', color: 'white' }}>\n                    진단 검사 추가하기\n                  </span>\n                </StyledButton>\n              </Grid>\n              <Grid item xs={5} sm={3} md={2}>\n                <StyledButton\n                  size=\"medium\"\n                  bgColor=\"#003049\"\n                  onClick={() => dispatch(setDiagnosisHistoryDrawer(true))}\n                >\n                  <RiChatHistoryFill size={28} color=\"white\" />\n                  <span style={{ marginLeft: '0.5rem', color: 'white' }}>\n                    진료 기록 보기\n                  </span>\n                </StyledButton>\n              </Grid>\n            </Grid>\n          </div>\n        );\n      case 2:\n        return (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              flexDirection: 'column',\n              height: '90%',\n            }}\n          >\n            <img\n              src=\"/assets/image/success-icon-10.png\"\n              width=\"10%\"\n              alt=\"success\"\n              style={{\n                marginBottom: '2rem',\n              }}\n            />\n            <StyledTypography variant=\"h4\" component=\"h4\" weight={9}>\n              진료가 완료되었습니다.\n            </StyledTypography>\n          </div>\n        );\n      default:\n        return 'hello';\n    }\n  };\n  return (\n    <div>\n      <header\n        style={{\n          position: 'sticky',\n          top: 0,\n          backgroundColor: 'white',\n          zIndex: 1,\n        }}\n      >\n        <ResponsivePageHeader />\n        <Divider />\n      </header>\n      <main>\n        <Grid container>\n          <Grid item xs={12}>\n            <PageTransition>\n              <ContentContainer>\n                <TitleHeader>\n                  <span>진료 | </span>\n                  <span>진료 등록</span>\n                </TitleHeader>\n\n                <Stepper activeStep={activeStep}>\n                  {steps.map((label, index) => {\n                    const stepProps = {};\n                    const labelProps = {};\n                    return (\n                      <Step key={label} {...stepProps}>\n                        <StepLabel {...labelProps}>{label}</StepLabel>\n                      </Step>\n                    );\n                  })}\n                </Stepper>\n                <Divider light />\n                {getStepContent(activeStep)}\n\n                {/* Medicine Drawer */}\n                {activeStep === 1 && (\n                  <Fragment>\n                    <MedicineDrawer />\n                    <InjectorDrawer />\n                    <DiagnosticDrawer />\n                    <DiagnosisHistoryDrawer />\n                    <DiagnosisModal />\n                  </Fragment>\n                )}\n\n                <div\n                  style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    position: 'fixed',\n                    padding: '0.5rem',\n                    width: 'calc(100% - 100px)',\n                    bottom: 10,\n                    zIndex: 1,\n                  }}\n                >\n                  <IconButton\n                    type=\"button\"\n                    size=\"small\"\n                    style={{\n                      border: '1px solid rgba(0,0,0,0.12)',\n                      marginRight: '0.5rem',\n                      padding: '0.5rem',\n                    }}\n                    onClick={handleBack}\n                  >\n                    <IoIosArrowBack />\n                  </IconButton>\n                  <IconButton\n                    type=\"button\"\n                    size=\"small\"\n                    style={{\n                      border: '1px solid rgba(0,0,0,0.12)',\n                      marginRight: '0.5rem',\n                      padding: '0.5rem',\n                    }}\n                    onClick={handleNext}\n                  >\n                    <IoIosArrowForward />\n                  </IconButton>\n                </div>\n              </ContentContainer>\n            </PageTransition>\n          </Grid>\n        </Grid>\n      </main>\n    </div>\n  );\n};\n\nexport default DiagnosisPage;\n","import axios from 'axios';\n\n/**\n * * 목적 : hospitalCode에 맞는 병원의 환자 목록을 가져오기 위한 API\n * @param {String} hospitalCode\n * @returns {List<PatientsDTO>} patientList\n * * [Patients Entity]\n * * !int patientId\n * * !String patientName\n * * !String patientSsn;\n * * !String patientGender\n * * !String patientTel\n * * !String patientPostal\n * * !String patientAddr1\n * * String patientAddr2\n * * !int patientHeight\n * * !int patientWeight\n * * !LocalDateTime recentDate\n * * !LocalDate patientBirth\n * * !String hospitalCode\n * @author SI HYUN PARK\n */\nexport const getPatientsList = async (hospitalCode) => {\n  return await axios.get(`/patient/search/${hospitalCode}`);\n\n};\n\n/**\n * * 목적 : 환자 정보를 검색 할때 보여지는 환자의 리스트를 가져오기 위한 API\n * @param {PatientSearchVO} searchInfo\n * * !String hospitalCode\n * * !String patientName\n * @returns {List<PatientsDTO>} patientSearchList\n * * [Patients Entity]\n * * !int patientId\n * * !String patientName\n * * !String patientSsn;\n * * !String patientGender\n * * !String patientTel\n * * !String patientPostal\n * * !String patientAddr1\n * * String patientAddr2\n * * !int patientHeight\n * * !int patientWeight\n * * !LocalDateTime recentDate\n * * !LocalDate patientBirth\n * * !String hospitalCode\n * @author SI HYUN PARK\n */\nexport const getSearchPatientList = async (searchInfo) => {\n  return await axios.post('/patient/search', searchInfo);\n};\n\n/**\n * * 목적 : 환자에 대한 정보를 해당 병원에 추가시키기 위한 API\n * @param {PatientsDTO} patientInfo\n * * [Patients Entity]\n * * !String patientName\n * * !String patientSsn;\n * * !String patientGender\n * * !String patientTel\n * * !String patientPostal\n * * !String patientAddr1\n * * String patientAddr2\n * * !int patientHeight\n * * !int patientWeight\n * * !LocalDateTime recentDate\n * * !LocalDate patientBirth\n * * !String hospitalCode\n * @returns {boolean} result (등록 성공 여부)\n * @author SI HYUN PARK\n */\nexport const registerPatientInfo = async (patientInfo) => {\n  return await axios.post('/patient', patientInfo);\n};\n\n/**\n * * 목적 : 환자에 대한 정보 수정을 위한 API\n * @param {PatientsDTO} updatePatientInfo\n * * [Patients Entity]\n * * !int patientId\n * * !String patientName\n * * !String patientSsn;\n * * !String patientGender\n * * !String patientTel\n * * !String patientPostal\n * * !String patientAddr1\n * * String patientAddr2\n * * !int patientHeight\n * * !int patientWeight\n * * !LocalDateTime recentDate\n * * !LocalDate patientBirth\n * * !String hospitalCode\n * @returns {boolean} result (수정 성공 여부)\n * @author SI HYUN PARK\n */\nexport const modifyPatient = async (updatePatientInfo) => {\n  console.log(\"update\", updatePatientInfo)\n  return await axios.put('/patient', updatePatientInfo);\n};\n\n/**\n * * 목적 : 환자에 대한 정보 삭제를 위한 API\n * @param {int} patientId\n * @returns {boolean} result (삭제 성공 여부)\n * @author SI HYUN PARK\n */\nexport const deletePatient = async (patientId) => {\n  return await axios.delete(`/patient/${patientId}`);\n};\n","import { TableHead, TableCell } from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\nconst DiagnosisHistoryTableHead = () => {\n  return (\n    <TableHead>\n      <TableCell size=\"small\" style={{ minWidth: '50px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          순번\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          이름\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '100px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          생년월일\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '50px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          성별\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '120px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          연락처\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '300px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          주소\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '100px' }} />\n    </TableHead>\n  );\n};\n\nexport default DiagnosisHistoryTableHead;\n","import React from 'react';\nimport { TableRow, TableCell } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport StyledButton from 'components/common/button/StyledButton';\nimport {\n  setDrawerStatus,\n  setPatientId,\n} from 'redux/features/history/diagnosisHistorySlice';\n\n/**\n * * 진료 기록의 정보를 보여주기 위한 테이블 행 컴포넌트 (Template)\n * @param {object} data\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DiagnosisHistoryTableRow = ({ data }) => {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    const { patientId } = data;\n    dispatch(setPatientId(patientId));\n\n    // 환자의 정보를 세팅 후 DiagnosisHistory Drawer를 연다.\n    dispatch(\n      setDrawerStatus({\n        name: 'diagnosisHistory',\n        status: true,\n      }),\n    );\n  };\n\n  return (\n    <TableRow hover>\n      <TableCell size=\"small\">{data.patientId}</TableCell>\n      <TableCell size=\"small\">{data.patientName}</TableCell>\n      <TableCell size=\"small\">{data.patientBirth}</TableCell>\n      <TableCell size=\"small\">\n        {data.patientGender === 'male' ? '남자' : '여자'}\n      </TableCell>\n      <TableCell size=\"small\">{data.patientTel}</TableCell>\n      <TableCell size=\"small\">\n        {data.patientAddr1} {data.patientAddr2} {data.patientPostal}\n      </TableCell>\n      <TableCell size=\"small\" onClick={handleClick}>\n        <StyledButton bgColor=\"#004D80\" color=\"white\">\n          상세 보기\n        </StyledButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default React.memo(DiagnosisHistoryTableRow);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  SwipeableDrawer,\n  IconButton,\n  TableContainer,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { setDrawerStatus } from 'redux/features/history/diagnosisHistorySlice';\nimport { showDiagnosisHistoryByPatientId } from 'apis/diagnosisAPI';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport CollapsibleRows from 'components/diagnosis/container/CollapsibleRows';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\n\n/**\n * * 환자가 받은 진료 기록을 보여주기 위한 Drawer\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst PatientDiagnosisHistoryDrawer = () => {\n  const { breakpoint } = useWindowSize();\n  const [isLoading, setLoading] = useState(false);\n  const [historyData, setHistoryData] = useState([]);\n  const dispatch = useDispatch();\n  const isOpened = useSelector(\n    (state) => state.diagnosisHistory.drawerStatus.diagnosisHistory,\n  );\n\n  const patientId = useSelector(\n    (state) => state.diagnosisHistory.currentPatientId,\n  );\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    dispatch(\n      setDrawerStatus({\n        name: 'diagnosisHistory',\n        status: open,\n      }),\n    );\n  };\n\n  /**\n   * * 환자의 식별자 (ID)로 진료 기록을 가져오기 위한 Async function\n   * @param {number} patientId \n   * @returns {object} result\n   */\n  async function getDiagnosisHistory(patientId) {\n    try {\n      const result = await showDiagnosisHistoryByPatientId(patientId);\n      setHistoryData(result);\n      setLoading(true);\n    } catch (error) {\n      const { message } = error.response.data;\n      if (message === undefined) {\n        handleAlert('error', error);\n        setLoading(true);\n        return;\n      }\n      handleAlert('error', message);\n      setLoading(true);\n    }\n  }\n\n  /**\n   * * Drawer가 열렸을 시에 (Effect 발생) 진료 기록을 가져오기 위한 side-effect\n   */\n  useEffect(() => {\n    if (isOpened) {\n      setTimeout(() => {\n        getDiagnosisHistory(patientId);\n      }, 1000);\n    }\n\n    return () => {\n      setHistoryData([]);\n      setLoading(false);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpened]);\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer>\n          <DrawerHeader\n            breakpoint={breakpoint}\n            style={{ padding: '0.5rem', backgroundColor: 'white', zIndex: 2 }}\n          >\n            <h1>진료 기록 보기</h1>\n            <div>\n              <IconButton>\n                <AiOutlineClose\n                  size={32}\n                  onClick={() =>\n                    dispatch(\n                      setDrawerStatus({\n                        name: 'diagnosisHistory',\n                        status: false,\n                      }),\n                    )\n                  }\n                />\n              </IconButton>\n            </div>\n          </DrawerHeader>\n          {isLoading && historyData.length > 0 && (\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell size=\"small\" />\n                    <TableCell>\n                      <StyledTypography\n                        variant=\"subtitle1\"\n                        component=\"h5\"\n                        weight={7}\n                      >\n                        진료일자\n                      </StyledTypography>\n                    </TableCell>\n                    <TableCell>\n                      <StyledTypography\n                        variant=\"subtitle1\"\n                        component=\"h5\"\n                        weight={7}\n                      >\n                        방문이유\n                      </StyledTypography>\n                    </TableCell>\n                    <TableCell>\n                      {' '}\n                      <StyledTypography\n                        variant=\"subtitle1\"\n                        component=\"h5\"\n                        weight={7}\n                      >\n                        의사의견\n                      </StyledTypography>\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n\n                <TableBody>\n                  {historyData.map((rows) => (\n                    <CollapsibleRows data={rows} />\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n          {isLoading && historyData.length === 0 && (\n            <div\n              style={{\n                display: 'flex',\n                width: '100%',\n                height: '80vh',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <div style={{ maxWidth: '500px', width: '100%' }}>\n                <img\n                  src=\"/assets/image/404/5.png\"\n                  alt=\"not found\"\n                  width=\"100%\"\n                />\n              </div>\n              <StyledTypography variant=\"h4\" component=\"h4\" weight={6}>\n                진료 기록을 찾을 수 없습니다.\n              </StyledTypography>\n            </div>\n          )}\n          {!isLoading && (\n            <div\n              style={{\n                display: 'flex',\n                width: '100%',\n                height: '90vh',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <HashSpinner />\n            </div>\n          )}\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default PatientDiagnosisHistoryDrawer;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  makeStyles,\n  Modal,\n  Backdrop,\n  IconButton,\n  Grid,\n  Button,\n} from '@material-ui/core';\n\nimport { DataGrid } from '@material-ui/data-grid';\nimport { useSnackbar } from 'notistack';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { GrPowerReset } from 'react-icons/gr';\nimport { motion } from 'framer-motion';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport SearchBox from 'components/common/search/SearchBox';\nimport { getPatientsList } from 'apis/patientAPI';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\nimport { searchPatientInfoByName } from 'apis/searchAPI';\n\nimport {\n  setDrawerStatus,\n  setModalStatus,\n  setPatientId,\n} from 'redux/features/history/diagnosisHistorySlice';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n/**\n * * 진료 기록을 검색하기 위한 Modal\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DiagnosisHistorySearchModal = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const { breakpoint } = useWindowSize();\n  const [isLoading, setLoading] = useState(true);\n  // 가져온 환자의 리스트를 저장하기 위한 상태\n  const [patientList, setPatientList] = useState([]);\n\n  // 선택된 환자의 정보를 저장하기 위한 상태\n  const [selectedPatientInfo, setSelectedPatientInfo] = useState({});\n  const [searchVal, setSearchVal] = useState('');\n  const { hospitalCode } = useSelector((state) => state.common.loginInfo);\n  const isOpened = useSelector(\n    (state) => state.diagnosisHistory.modalStatus.search,\n  );\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const handleClose = () => {\n    dispatch(\n      setModalStatus({\n        name: 'search',\n        status: false,\n      }),\n    );\n    setLoading(true);\n    setPatientList([]);\n    setSelectedPatientInfo({});\n    setSearchVal('');\n  };\n\n  /**\n   * * 환자의 정보를 가져오기 위한 Async function\n   * @param {string} hospitalCode\n   */\n  async function getPatientsInfo(hospitalCode) {\n    try {\n      const result = await getPatientsList(hospitalCode);\n      const newResult = result.data.data.map((data, index) => {\n        const { patientGender } = data;\n        return {\n          id: index + 1,\n          ...data,\n          patientGender: patientGender === 'male' ? '남자' : '여자',\n        };\n      });\n      setPatientList(newResult);\n      setSelectedPatientInfo({});\n      setLoading(false);\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n      setLoading(false);\n    }\n  }\n\n  /**\n   * * 환자의 이름으로 환자의 정보를 가져오기 위한 Async function\n   * @param {string} patientInfo\n   * @returns {object} result\n   */\n  async function getPatientsInfoByName(patientInfo) {\n    try {\n      const result = await searchPatientInfoByName(patientInfo);\n      const newResult = result.map((data, index) => {\n        const { patientGender } = data;\n        return {\n          id: index + 1,\n          ...data,\n          patientGender: patientGender === 'male' ? '남자' : '여자',\n        };\n      });\n\n      setPatientList(newResult);\n      setSelectedPatientInfo({});\n      setLoading(false);\n    } catch (error) {\n      const { message } = error.response.data;\n      if (message === undefined) {\n        handleAlert('error', '알 수 없는 이유로 검색에 실패하였습니다.');\n        setLoading(false);\n        return;\n      }\n      handleAlert('error', message);\n      setLoading(false);\n    }\n  }\n\n  const buttonSetting = {\n    rest: { scale: 1 },\n    hover: { scale: 1.2 },\n    pressed: { scale: 0.95 },\n  };\n\n  const columns = [\n    { field: 'patientName', headerName: '이름', width: 150 },\n    { field: 'patientBirth', headerName: '생년월일', width: 150 },\n    { field: 'patientGender', headerName: '성별', width: 120 },\n    { field: 'patientTel', headerName: '연락처', width: 150 },\n    { field: 'recentDate', headerName: '최근 진료 일자', width: 200 },\n    { field: 'patientAddr1', headerName: '주소 1', width: 300 },\n    { field: 'patientAddr2', headerName: '주소 2', width: 150 },\n    { field: 'patientPostal', headerName: '우편번호', width: 140 },\n  ];\n\n  /**\n   * * 검색어(searchVal)가 바뀌는 effect가 발생 시에 병원코드와 환자의 이름을 가져오기 위한 side-effect\n   */\n  useEffect(() => {\n    if (searchVal === '') {\n      return;\n    }\n\n    const patientInfo = {\n      hospitalCode,\n      patientName: searchVal,\n    };\n\n    setLoading(true);\n    setTimeout(() => {\n      getPatientsInfoByName(patientInfo);\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchVal]);\n\n  /**\n   * * Drawer가 열리는 effect가 발생할 때에 환자의 정보를 가져오기 위한 side-effect\n   */\n  useEffect(() => {\n    if (isOpened) {\n      setLoading(true);\n\n      setTimeout(() => {\n        getPatientsInfo(hospitalCode);\n      }, 1000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpened]);\n\n  const handleReset = () => {\n    setLoading(true);\n    setTimeout(() => {\n      getPatientsInfo(hospitalCode);\n    }, 1000);\n  };\n\n  const handlePatientClick = (e) => {\n    const { row } = e;\n    setSelectedPatientInfo(row);\n  };\n\n  const handlePatientToDiagnosisInfo = () => {\n    const { patientId } = selectedPatientInfo;\n\n    dispatch(setPatientId(patientId));\n    // PatientDiagnosisHistory를 열어준다.\n\n    dispatch(\n      setDrawerStatus({\n        name: 'diagnosisHistory',\n        status: true,\n      }),\n    );\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpened}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{ timeout: 500 }}\n      >\n        <SpringFade in={isOpened}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  환자 검색\n                </StyledTypography>\n                <div>\n                  <IconButton onClick={handleClose}>\n                    <AiOutlineClose size={24} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              {isLoading && (\n                <div\n                  style={{\n                    width: '100%',\n                    height: '30vh',\n                    minHeight: '300px',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                  }}\n                >\n                  <HashSpinner />\n                </div>\n              )}\n              {!isLoading && (\n                <Grid container justify=\"center\">\n                  <Grid item xs={12}>\n                    <div\n                      style={{\n                        display: 'flex',\n                      }}\n                    >\n                      <div\n                        style={{\n                          flex: 1,\n                        }}\n                      >\n                        <SearchBox\n                          setSearchVal={setSearchVal}\n                          placeholder=\"환자 이름을 검색해주세요.\"\n                          noRemove\n                        />\n                      </div>\n\n                      <motion.div\n                        variants={buttonSetting}\n                        initial=\"rest\"\n                        whileHover=\"hover\"\n                        whileTap=\"pressed\"\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          alignItems: 'center',\n                        }}\n                      >\n                        <IconButton\n                          type=\"button\"\n                          size=\"small\"\n                          style={{\n                            border: '1px solid rgba(0,0,0,0.12)',\n                            marginLeft: '0.5rem',\n                            marginRight: '0.5rem',\n                            padding: '0.5rem',\n                          }}\n                          onClick={() => handleReset()}\n                        >\n                          <GrPowerReset />\n                        </IconButton>\n                      </motion.div>\n                    </div>\n                  </Grid>\n                  <Grid item xs={12} style={{ marginTop: '2em' }}>\n                    <div style={{ height: 300, width: '100%' }}>\n                      <DataGrid\n                        rows={patientList}\n                        columns={columns}\n                        onCellClick={handlePatientClick}\n                        pageSize={10}\n                      />\n                    </div>\n                    {Object.keys(selectedPatientInfo).length > 1 && (\n                      <div style={{ marginTop: '1rem' }}>\n                        <Button\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => handlePatientToDiagnosisInfo()}\n                        >\n                          더 보기\n                        </Button>\n                      </div>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DiagnosisHistorySearchModal;\n","import React, { useState, useEffect, Fragment } from 'react';\nimport {\n  Grid,\n  IconButton,\n  Paper,\n  TableContainer,\n  Table,\n  TableBody,\n  TablePagination,\n} from '@material-ui/core';\nimport { motion } from 'framer-motion';\nimport { useSnackbar } from 'notistack';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ContentContainer from 'components/common/container/ContentContainer';\nimport TitleHeader from 'components/common/header/TitleHeader';\nimport ResponsivePageHeader from 'components/common/header/ResponsivePageHeader';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport { GrPowerReset } from 'react-icons/gr';\nimport { getPatientsList } from 'apis/patientAPI';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\nimport DiagnosisHistoryTableHead from 'components/diagnosis-history/table/DiagnosisHistoryTableHead';\nimport DiagnosisHistoryTableRow from 'components/diagnosis-history/table/DiagnosisHistoryTableRow';\nimport PatientDiagnosisHistoryDrawer from 'components/diagnosis-history/drawer/PatientDiagnosisHistoryDrawer';\nimport DiagnosisHistorySearchModal from 'components/diagnosis-history/modal/DiagnosisHistorySearchModal';\nimport { setModalStatus } from 'redux/features/history/diagnosisHistorySlice';\n\n/**\n * * 목표 : 진료 기록을 보여주기 위한 페이지 컴포넌트\n *\n * @returns {JSX.Element} View\n * @author SUNG WOOK HWANG\n */\nconst DiagnosisHistoryPage = () => {\n  const dispatch = useDispatch();\n\n  // Loading의 상태를 저장\n  const [isLoading, setLoading] = useState(true);\n\n  // 환자의 정보를 저장 하기 위한 상태\n  const [patientList, setPatientList] = useState([]);\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Redux store에 저장된 병원코드\n  const { hospitalCode } = useSelector((state) => state.common.loginInfo);\n\n  // Redux store에 저장된 현재 환자의 ID\n  const currentPatientId = useSelector(\n    (state) => state.diagnosisHistory.currentPatientId,\n  );\n\n  const [pager, setPager] = useState({\n    page: 0,\n    rowsPerPage: 10,\n  });\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const handleSearchModal = () => {\n    dispatch(\n      setModalStatus({\n        name: 'search',\n        status: true,\n      }),\n    );\n  };\n  const buttonSetting = {\n    rest: { scale: 1 },\n    hover: { scale: 1.2 },\n    pressed: { scale: 0.95 },\n  };\n\n  /**\n   * * 목표 : 병원코드를 통해 환자 정보를 가지고 오기 위한 함수\n   * @param {string} hospitalCode\n   * @returns {object} result\n   */\n  async function getPatientInfo(hospitalCode) {\n    try {\n      const result = await getPatientsList(hospitalCode);\n      setPatientList(result.data.data);\n      setLoading(false);\n    } catch (error) {\n      const { message } = error.response.data;\n      if (message !== undefined) {\n        handleAlert('error', message);\n        setLoading(false);\n        return;\n      }\n      handleAlert('error', error);\n      setLoading(false);\n      return;\n    }\n  }\n\n  /**\n   * 렌더링 시에 발생되는 side-effect\n   */\n  useEffect(() => {\n    setLoading(true);\n    setTimeout(() => {\n      getPatientInfo(hospitalCode);\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // const handleChangePage = (e, newPage) => {\n  //   setPager({\n  //     page: newPage,\n  //     ...pager,\n  //   });\n  // };\n\n  // const handleChangeRowsPerPage = (e) => {\n  //   console.log('hello', e.target.value);\n  //   setPager({\n  //     ...pager,\n  //     rowsPerPage: parseInt(e.target.value, 10),\n  //   });\n  // };\n\n  /**\n   * 초기화 버튼을 클릭시에 \b\b초기화가 되면서 값도 다시 불러온다.\n   */\n  const handleReset = () => {\n    setLoading(true);\n    setPatientList([]);\n    setPager({ page: 0, rowsPerPage: 10 });\n    setTimeout(() => {\n      getPatientInfo(hospitalCode);\n    }, 1000);\n  };\n\n  return (\n    <div>\n      <header\n        style={{\n          position: 'sticky',\n          top: 0,\n          backgroundColor: 'white',\n          zIndex: 1,\n        }}\n      >\n        <ResponsivePageHeader />\n      </header>\n      <main>\n        <Grid container>\n          <Grid item xs={12}>\n            <PageTransition>\n              <ContentContainer>\n                <TitleHeader>\n                  <span>진료 | </span>\n                  <span>진료 기록 보기</span>\n                </TitleHeader>\n                <div\n                  className=\"icon-area\"\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    borderTop: '1px solid rgba(0,0,0,0.08)',\n                    borderBottom: '1px solid rgba(0,0,0,0.08)',\n                    paddingTop: '0.5rem',\n                    paddingBottom: '0.5rem',\n                  }}\n                >\n                  <motion.div\n                    variants={buttonSetting}\n                    initial=\"rest\"\n                    whileHover=\"hover\"\n                    whileTap=\"pressed\"\n                  >\n                    <IconButton\n                      type=\"button\"\n                      size=\"small\"\n                      style={{\n                        border: '1px solid rgba(0,0,0,0.12)',\n                        marginLeft: '0.5rem',\n                        marginRight: '0.5rem',\n                        padding: '0.5rem',\n                      }}\n                      onClick={() => handleSearchModal()}\n                    >\n                      <AiOutlineSearch />\n                    </IconButton>\n                  </motion.div>\n\n                  <motion.div\n                    variants={buttonSetting}\n                    initial=\"rest\"\n                    whileHover=\"hover\"\n                    whileTap=\"pressed\"\n                  >\n                    <IconButton\n                      type=\"button\"\n                      size=\"small\"\n                      style={{\n                        border: '1px solid rgba(0,0,0,0.12)',\n                        marginLeft: '0.5rem',\n                        marginRight: '0.5rem',\n                        padding: '0.5rem',\n                      }}\n                      onClick={() => handleReset()}\n                    >\n                      <GrPowerReset />\n                    </IconButton>\n                  </motion.div>\n                </div>\n\n                {isLoading && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'center',\n                      alignItems: 'center',\n                      width: '100vw',\n                      height: '80vh',\n                    }}\n                  >\n                    <HashSpinner />\n                  </div>\n                )}\n\n                {!isLoading && patientList.length > 0 && (\n                  <Fragment>\n                    <TableContainer\n                      component={Paper}\n                      style={{\n                        marginTop: '1.5rem',\n                      }}\n                    >\n                      <Table style={{ minWidth: '930px', overflowX: 'scroll' }}>\n                        {/* TableHead */}\n                        <DiagnosisHistoryTableHead />\n                        <TableBody>\n                          {patientList\n                            .slice(\n                              pager.page * pager.rowsPerPage,\n                              pager.page * pager.rowsPerPage +\n                                pager.rowsPerPage,\n                            )\n                            .map((data, index) => (\n                              <Fragment key={data.patientId + 'Patients'}>\n                                <DiagnosisHistoryTableRow data={data} />\n                              </Fragment>\n                            ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                    <TablePagination\n                      // rowsPerPage={[10, 30, 50]}\n                      component=\"div\"\n                      count={patientList.length}\n                      rowsPerPage={pager.rowsPerPage}\n                      page={pager.page}\n                    />\n                  </Fragment>\n                )}\n                {currentPatientId !== 0 && <PatientDiagnosisHistoryDrawer />}\n                <DiagnosisHistorySearchModal />\n              </ContentContainer>\n            </PageTransition>\n          </Grid>\n        </Grid>\n      </main>\n    </div>\n  );\n};\n\nexport default DiagnosisHistoryPage;\n","import { TableHead, TableCell } from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\nconst DiagnosticTableHead = () => {\n  return (\n    <TableHead>\n      <TableCell size=\"small\" style={{ minWidth: '50px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          순번\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '50px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          이름\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '120px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          생년월일\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '50px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          성별\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '180px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          진료 날짜\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '100px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          진료실\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '50px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          상태\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ width: '100px' }} />\n    </TableHead>\n  );\n};\n\nexport default DiagnosticTableHead;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\n/**\n * 색상이 포함된 정사각형 컴포넌트 (Atom)\n * 사용법\n * <ColorCircleContainer size={120} color=\"DIAGNOSTIC_PENDING\"/>\n * <ColorCircleContainer size={120} color=\"#FFFFFF\"/>\n * @author SUNG WOOK HWANG\n */\nconst ColorCircleContainer = styled.div`\n  width: ${({ size }) => size + 'px'};\n  height: ${({ size }) => size + 'px'};\n  background-color: ${({ color }) => {\n    if (color === 'DIAGNOSTIC_PENDING') {\n      return '#F1BF4D';\n    } else if (color === 'DIAGNOSTIC_REGISTER') {\n      return '#E35E5C';\n    } else if (color === 'DIAGNOSTIC_COMPLETED') {\n      return '#488EF3';\n    } else if (color === 'DIAGNOSTIC_PROCESSING' || color === 'EDTA') {\n      return '#9761F6';\n    }\n    return color;\n  }};\n  border-radius: 50%;\n\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nColorCircleContainer.propTypes = {\n  size: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n};\n\nColorCircleContainer.defaultProps = {\n  size: 100,\n  color: 'red',\n};\nexport default ColorCircleContainer;\n","import React from 'react';\nimport { TableRow, TableCell } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport {\n  setCurrentDiagTestId,\n  setDiagnosticDrawer,\n  setDiagnosticDrawerPage,\n} from 'redux/features/diagnostic/diagnosticSlice';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport ColorCircleContainer from 'components/common/container/ColorCircleContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nconst DiagnosticTableRow = ({ data }) => {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    dispatch(setCurrentDiagTestId(data.diagTestId));\n\n    dispatch(setDiagnosticDrawer(true));\n    dispatch(setDiagnosticDrawerPage('LIST'));\n  };\n  return (\n    <TableRow hover>\n      <TableCell size=\"small\">{data.diagTestId}</TableCell>\n      <TableCell size=\"small\">{data.patientName}</TableCell>\n      <TableCell size=\"small\">{data.patientBirth}</TableCell>\n      <TableCell size=\"small\">\n        {data.patientGender === 'male' ? '남자' : '여자'}\n      </TableCell>\n      <TableCell size=\"small\">{data.createdDate}</TableCell>\n      <TableCell size=\"small\">{data.doctorRoom}</TableCell>\n      <TableCell size=\"small\">\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <ColorCircleContainer size={10} color={data.inspectionStatus} />\n          {data.inspectionStatus === 'DIAGNOSTIC_PENDING' && (\n            <StyledTypography\n              variant=\"subtitle2\"\n              component=\"h5\"\n              weight={9}\n              style={{ marginLeft: '0.75rem' }}\n            >\n              대기\n            </StyledTypography>\n          )}\n          {data.inspectionStatus === 'DIAGNOSTIC_REGISTER' && (\n            <StyledTypography\n              variant=\"subtitle2\"\n              component=\"h5\"\n              weight={7}\n              style={{ marginLeft: '0.75rem' }}\n            >\n              접수\n            </StyledTypography>\n          )}\n          {data.inspectionStatus === 'DIAGNOSTIC_COMPLETED' && (\n            <StyledTypography\n              variant=\"subtitle2\"\n              component=\"h5\"\n              weight={7}\n              style={{ marginLeft: '0.75rem' }}\n            >\n              완료\n            </StyledTypography>\n          )}\n        </div>\n      </TableCell>\n      <TableCell\n        size=\"small\"\n        style={{\n          minWidth: '100px',\n        }}\n      >\n        <StyledButton bgColor=\"#004D80\" color=\"white\" onClick={handleClick}>\n          검사 보기\n        </StyledButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default DiagnosticTableRow;\n","import styled from 'styled-components';\nimport { ButtonGroup } from '@material-ui/core';\n\nconst StyledButtonGroup = styled(ButtonGroup)`\n  & {\n    margin: '1rem';\n  }\n`;\n\nexport default StyledButtonGroup;\n","import { TableHead, TableCell } from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\nconst DiagnosticDetailTableHead = () => {\n  return (\n    <TableHead>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          묶음코드\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          처방코드\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '150px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          묶음명\n        </StyledTypography>\n      </TableCell>\n\n      <TableCell size=\"small\" style={{ minWidth: '200px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          검사명\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          결과값\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '130px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          평균값\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '100px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          검체명\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '100px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          용기\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          진료의\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          검사담당자\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '50px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          상태\n        </StyledTypography>\n      </TableCell>\n    </TableHead>\n  );\n};\n\nexport default DiagnosticDetailTableHead;\n","import React from 'react';\nimport { TableRow, TableCell } from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport ColorCircleContainer from 'components/common/container/ColorCircleContainer';\n\nconst DiagnosticDetailTableRows = ({ data }) => {\n  return (\n    <TableRow hover>\n      <TableCell size=\"small\">{data.bundleCode}</TableCell>\n      <TableCell size=\"small\">{data.presCode}</TableCell>\n      <TableCell size=\"small\">{data.bundleName}</TableCell>\n      <TableCell size=\"small\">{data.presName}</TableCell>\n      <TableCell size=\"small\">\n        {data.diagTestValue === 0.0 && 'X'}{' '}\n        {data.diagTestValue !== 0.0 && data.diagTestValue}\n      </TableCell>\n      <TableCell size=\"small\">{data.diagTestAvgValue}</TableCell>\n      <TableCell size=\"small\">\n        {data.presSpecimenName === '' && (\n          <StyledTypography variant=\"subtitle2\" component=\"h5\" weight={9}>\n            X\n          </StyledTypography>\n        )}\n\n        {data.presSpecimenName !== '' && (\n          <StyledTypography variant=\"subtitle2\" component=\"h5\" weight={9}>\n            {data.presSpecimenName}\n          </StyledTypography>\n        )}\n      </TableCell>\n\n      <TableCell size=\"small\">\n        {data.presVessel === '' && (\n          <StyledTypography variant=\"subtitle2\" component=\"h5\" weight={9}>\n            X\n          </StyledTypography>\n        )}\n        {data.presVessel !== '' && (\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <ColorCircleContainer size={10} color={data.presVessel} />\n            <StyledTypography\n              variant=\"subtitle2\"\n              component=\"h5\"\n              weight={9}\n              style={{ marginLeft: '0.75rem' }}\n            >\n              {data.presVessel}\n            </StyledTypography>\n          </div>\n        )}\n      </TableCell>\n      <TableCell size=\"small\">{data.doctorName}</TableCell>\n      <TableCell size=\"small\">\n        {data.inspectorName ? data.inspectorName : '지정되지 않음'}\n      </TableCell>\n      <TableCell size=\"small\">\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <ColorCircleContainer size={10} color={data.diagTestStatus} />\n          {data.diagTestStatus === 'DIAGNOSTIC_PENDING' && (\n            <StyledTypography\n              variant=\"subtitle2\"\n              component=\"h5\"\n              weight={9}\n              style={{ marginLeft: '0.75rem' }}\n            >\n              대기\n            </StyledTypography>\n          )}\n          {data.diagTestStatus === 'DIAGNOSTIC_REGISTER' && (\n            <StyledTypography\n              variant=\"subtitle2\"\n              component=\"h5\"\n              weight={7}\n              style={{ marginLeft: '0.75rem' }}\n            >\n              접수\n            </StyledTypography>\n          )}\n          {data.diagTestStatus === 'DIAGNOSTIC_COMPLETED' && (\n            <StyledTypography\n              variant=\"subtitle2\"\n              component=\"h5\"\n              weight={7}\n              style={{ marginLeft: '0.75rem' }}\n            >\n              완료\n            </StyledTypography>\n          )}\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default DiagnosticDetailTableRows;\n","import { TableHead, TableCell } from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\nconst DiagnosticDetailInputTableHead = () => {\n  return (\n    <TableHead>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          묶음코드\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          처방코드\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '150px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          묶음명\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '150px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          검사명\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '150px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          결과값\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '100px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          평균값\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          진료의\n        </StyledTypography>\n      </TableCell>\n      <TableCell size=\"small\" style={{ minWidth: '80px' }}>\n        <StyledTypography variant=\"subtitle1\" component=\"h5\" weight={7}>\n          검사담당자\n        </StyledTypography>\n      </TableCell>\n    </TableHead>\n  );\n};\n\nexport default DiagnosticDetailInputTableHead;\n","import styled from 'styled-components';\nimport InputBase from '@material-ui/core/InputBase';\n\nconst StyledInputBase = styled(InputBase)`\n  flex: 1;\n  font-family: 'Lato', 'Noto Sans KR', sans-serif;\n  font-weight: 700;\n  width: 100%;\n  padding: 0.5rem;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.12);\n`;\n\nexport default StyledInputBase;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TableRow, TableCell } from '@material-ui/core';\n\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport useInput from 'hooks/useInput';\nimport { setDiagnosticDataInput } from 'redux/features/diagnostic/diagnosticSlice';\n\nconst DiagnosticDetailInputTableRows = ({ data }) => {\n  const input = useInput(0);\n  const dispatch = useDispatch();\n\n  // 처음에 값 설정\n  useEffect(() => {\n    const { diagTestRecordId } = data;\n    dispatch(setDiagnosticDataInput({ diagTestRecordId, value: 0 }));\n  }, [data, dispatch]);\n\n  const handleOnBlur = () => {\n    const value = Number.parseFloat(input.value);\n    const { diagTestRecordId } = data;\n    dispatch(setDiagnosticDataInput({ diagTestRecordId, value }));\n  };\n  return (\n    <TableRow>\n      <TableCell size=\"small\">{data.bundleCode}</TableCell>\n      <TableCell size=\"small\">{data.presCode}</TableCell>\n      <TableCell size=\"small\">{data.bundleName}</TableCell>\n      <TableCell size=\"small\">{data.presName}</TableCell>\n      <TableCell size=\"small\">\n        <StyledInputBase\n          style={{ maxHeight: '28px' }}\n          type=\"number\"\n          onBlur={handleOnBlur}\n          {...input}\n        />\n      </TableCell>\n      <TableCell size=\"small\">{data.diagTestAvgValue}</TableCell>\n      <TableCell size=\"small\">{data.doctorName}</TableCell>\n      <TableCell size=\"small\">{data.inspectorName}</TableCell>\n    </TableRow>\n  );\n};\n\nexport default React.memo(DiagnosticDetailInputTableRows);\n","import axios from 'axios';\n\n/**\n * * 목적 : 진단 검사의 ID(diagTestId)로 진단 검사 상세 리스트를 출력\n * \n * @param {number} diagTestId \n * @returns {List<DiagnosticTestRecordsVO>} diagnosticTestRecordList\n * * [DiagnosticInspections Entity]\n * * * !String bundleCode (그룹 코드)\n * * * !String bundleName (그룹 명)\n * * * !String presCode (처방 코드)\n * * * !String presName (처방 명)\n * * * !String presVessel (처방 용기)\n * * * !String presSpecimenName (처방 검체 명)\n * * [DiagnosticTestRecords VO]\n * * * !String diagTestAvgValue (진단 검사 평균 값)\n * * [DiagnosticTestRecords Entity]\n * * * !int diagTestRecordId (진단 검사 상세의 ID)\n * * * double diagTestValue (진단 검사의 결과 값)\n * * * !String diagTestStatus (진단 검사의 상태)\n * * [Members Entity - Doctor]\n * * * !String doctorName (의사의 이름)\n * * [Members Entity - Inspector]\n * * * String inspectorName (검사자의 이름)\n * @throws\n * * HTTP Status 400 - Bad Request\n * * * status : \"no_diag_test_id\"\n * * * message : \"올바른 진단 검사 ID를 입력해주세요\"\n * * HTTP Status 204 - No Content\n * > 진단 검사의 결과 값이 없는 경우 Throw\n */\nexport const showDiagnosticTestListByDiagTestId = async (diagTestId) => {\n    const result = await axios.get(`/diagnosis/inspection/${diagTestId}`)\n    return result.data.data;\n}\n\n/**\n * * 목적 : 병원 코드로 startDate ~ endDate 기간 동안의 진단 검사 기록 리스트를 가져오기 위한 API\n * \n * @param {DateWithHospitalCode} hospitalInfo \n * * !String startDate (yyyy-MM-dd 형식)\n * * !String endDate (yyyy-MM-dd 형식)\n * * !String hospitalCode (병원 코드)\n * @returns {List<DiagnosticVO>} weeklyTestList\n * * [DiagnosticTests Entity]\n * * * !int diagTestId (진단 검사 ID)\n * * * !String createdDate (진단 검사의 생성 일자)\n * * * !String inspectionStatus (진단 검사의 상태)\n * * [Patients Entity]\n * * * !String patientName (환자의 이름)\n * * * !String patientBirth (환자의 생일)\n * * * !String patientGender (환자의 성별)\n * * [Members Entity]\n * * * !String doctorRoom (의사의 진료실)\n * \n * @throws \n * * HTTP Status 400 - Bad Request\n * * * status : \"no_date_with_hospital_info\"\n * * * message : \"올바른 정보를 입력해주세요.\"\n * * HTTP Status 204 - No Content\n * * * status : \"no_contents\" || \"no_member_and_patient\"\n * * * message : \"이번 주에는 진단 검사가 존재하지 않습니다.\" || \"임직원과 환자 정보가 존재하지 않습니다\"\n */\nexport const showWeeklyDiagnosticTestListByHospitalCode = async (hospitalInfo) => {\n    const result = await axios.post(\"/diagnosis/inspection\", hospitalInfo);\n    return result.data.data;\n}\n\n/**\n * * 목표 : 진단 검사의 상태를 COMPLETED, PROCESSING, PENDING으로 변경하는 API\n * @param {object} statusInfo \n * * !String status (completed || processing || pending)\n * * !int diagTestId (진단 검사의 ID)\n * @returns {boolean} result\n * @throws \n * * HTTP Status 400 - Bad Request\n * * * status : \"not_diag_test_id\"\n * * * message : \"올바르지 않은 진단 검사의 식별자입니다.\"\n * * HTTP Status 409 - Conflict Request\n * * * status : \"not_updated_diag_test_status\"\n * * * message : \"진단 검사의 상태가 변경되지 않았습니다.\"\n */\nexport const diagnosticChangeStatus = async (statusInfo) => {\n    const result = await axios.put(\"/diagnosis/inspection/status\", statusInfo);\n    return result.data.data;\n}\n\n/**\n * * 목표 : 진단 검사 상세의 상태를 COMPLETED, PROCESSING, PENDING으로 변경하는 API\n * @param {object} statusInfo \n * * !String status (completed || processing || pending)\n * * !int diagTestId (진단 검사의 ID)\n * @returns {boolean} result\n * @throws \n * * HTTP Status 400 - Bad Request\n * * * status : \"not_diag_test_id\"\n * * * message : \"올바르지 않은 진단 검사의 식별자입니다.\"\n * * HTTP Status 409 - Conflict Request\n * * * status : \"not_updated_diag_test_status\"\n * * * message : \"진단 검사의 상태가 변경되지 않았습니다.\"\n */\nexport const diagnosticTestRecordChangeStatus = async (statusInfo) => {\n    const result = await axios.put(\"/diagnosis/inspection/diagTestStatus\", statusInfo);\n    return result.data.data;\n}\n\n\n/**\n * * 목표 : [미구현 사항] 해당 환자의 진단 검사 상세에서 결과를 입력시에 값을 추가\n * @param {object} testInfos \n * * !int inspector_member_id (검사자 임직원의 ID)\n * * !List<DiagnosticTestResultVO>\n * * * !int diag_test_record_id (진단 검사 상세의 ID)\n * * * !double diag_test_value (진단 검사 상세의 결과 값)\n * @return {Boolean} result\n */\nexport const changeDiagnosticTestValue = async (testInfos) => {\n    const result = await axios.put(\"/diagnosis/inspection/\", testInfos);\n    return result.data.data;\n}\n\n/**\n * * 목표 : 진단 검사의 상세 ID와 검사자의 ID를 넘거 바코드를 출력시의 상태를 바꿔준다.\n * @param {List<DiagnosticTestResultVO} barcodeInfo \n *  * * !List<DiagnosticTestResultVO>\n * * * !int diagTestRecordId (진단 검사 상세의 ID)\n * * * !int inspectorMemberId (검사자의 ID)\n * @returns {boolean} true | false\n */\nexport const changeStatusToRegisterWithMemberId = async (barcodeInfo) => {\n    const result = await axios.put('/diagnosis/inspection/barcodePrint', barcodeInfo);\n    return result.data.data;\n}\n\n/**\n * * 목표 : 진단 검사의 상세 ID와 검사자의 ID를 넘거 상태를 취소로 바꿔준다.\n * @param {List<DiagnosticTestResultVO} barcodeInfo \n *  * * !List<DiagnosticTestResultVO>\n * * * !int diagTestRecordId (진단 검사 상세의 ID)\n * * * !int inspectorMemberId (검사자의 ID)\n * @returns {boolean} true | false\n */\nexport const changeStatusToPendingWithMemberId = async (diagnosticInfo) => {\n    const result = await axios.put('/diagnosis/inspection/pending', diagnosticInfo);\n    return result.data.data;\n}\n\n/**\n * * 목표 : 진단 검사의 상세 ID와 검사자의 ID를 넘거 상태를 완료로 바꿔준다.\n * @param {List<DiagnosticTestResultVO} barcodeInfo \n *  * * !List<DiagnosticTestResultVO>\n * * * !int diagTestRecordId (진단 검사 상세의 ID)\n * * * !int inspectorMemberId (검사자의 ID)\n * @returns {boolean} true | false\n */\nexport const changeStatusToCompletedWithMemberId = async (diagnosticInfo) => {\n    const result = await axios.put('/diagnosis/inspection/completed', diagnosticInfo);\n    return result.data.data;\n}","import React, { Fragment, useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  makeStyles,\n  Modal,\n  Backdrop,\n  IconButton,\n  Button,\n} from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport bwipjs from 'bwip-js';\nimport moment from 'moment';\nimport { useReactToPrint } from 'react-to-print';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\n\nimport { setDiagnosticModal } from 'redux/features/diagnostic/diagnosticSlice';\nimport {\n  changeStatusToRegisterWithMemberId,\n  diagnosticChangeStatus,\n} from 'apis/diagnosisInsepctionAPI';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n/**\n * * 진단 검사에서 바코드를 보고 출력하기 위한 Modal 컴포넌트 (Template)\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DiagnosticBarcodeModal = () => {\n  const classes = useStyles();\n\n  // React-print의 instance를 저장하기 위한 Reference\n  const componentRef = useRef();\n\n  const dispatch = useDispatch();\n  const { breakpoint } = useWindowSize();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n  const isOpened = useSelector((state) => state.diagnostic.modalStatus.barcode);\n  const diagTestId = useSelector((state) => state.diagnostic.currentDiagTestId);\n  const diagnosticList = useSelector(\n    (state) => state.diagnostic.currentDiagTestList,\n  );\n\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n\n  // 진단 검사의 정보를 토대로 바코드 이미지의 상태를 저장하기 위함.\n  const [barcodeList, setBarcodeList] = useState([]);\n\n  // 바코드 생성이 완료 되었는지의 상태를 저장하기 위함.\n  const [isCompleted, setCompleted] = useState(false);\n\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current,\n  });\n\n  const handlePrintAndStatus = async () => {\n    try {\n      handlePrint();\n\n      const { diagTestStatus } = diagnosticList[0];\n      if (\n        diagTestStatus === 'DIAGNOSTIC_REGISTER' ||\n        diagTestStatus === 'DIAGNOSTIC_COMPLETED'\n      ) {\n        console.log('그냥 출력만 할거입니다.');\n        return;\n      }\n      // 1. 진단 검사의 상태를 진행중으로 바꿔준다.\n      await diagnosticChangeStatus({\n        status: 'register',\n        diagTestId,\n      });\n\n      // 2. 진단 검사 상세의 상태를 진행중으로 바꿔준다.\n\n      const sendInfo = diagnosticList.map(({ diagTestRecordId }) => {\n        const inspectorMemberId = loginInfo.memberId;\n        return {\n          diagTestRecordId,\n          inspectorMemberId,\n        };\n      });\n\n      await changeStatusToRegisterWithMemberId(sendInfo);\n      handleAlert('success', '진단 검사의 상태가 접수로 변경되었습니다.');\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n    }\n  };\n\n  const handleClose = () =>\n    dispatch(\n      setDiagnosticModal({\n        name: 'barcode',\n        status: false,\n      }),\n    );\n\n  /**\n   * Modal이 열렸을 시에 (effect) 바코드를 생성하고 보여주기 위한 side-effect\n   */\n  useEffect(() => {\n    if (isOpened) {\n      setCompleted(false);\n\n      // eslint-disable-next-line array-callback-return\n      diagnosticList.map(({ presCode }, index) => {\n        const canvas = document.createElement('canvas');\n        const today = moment(new Date()).format('YYMMDD');\n        const barcodeText = `TEAM1-${diagTestId}-${presCode}-${today}`;\n        bwipjs.toCanvas(canvas, {\n          bcid: 'hibccode128',\n          text: barcodeText,\n          scale: 4,\n          height: 10,\n          includetext: true,\n          textxalign: 'center',\n        });\n\n        if (index === 0) {\n          setBarcodeList([canvas.toDataURL('image/png')]);\n        } else {\n          setBarcodeList((prevState) => {\n            const newState = prevState;\n            newState.push(canvas.toDataURL('image/png'));\n            return newState;\n          });\n        }\n      });\n      setCompleted(true);\n      // setBarcodeUrl(canvas.toDataURL('image/png'));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpened]);\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpened}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{ timeout: 500 }}\n      >\n        <SpringFade in={isOpened}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer\n              breakpoint={breakpoint}\n              style={{ flex: 1 }}\n              className=\"printArea\"\n            >\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  바코드 출력\n                </StyledTypography>\n                <div>\n                  <IconButton onClick={handleClose}>\n                    <AiOutlineClose size={24} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              <div\n                style={{\n                  marginTop: '1rem',\n                  marginBottom: '1rem',\n                }}\n              >\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => handlePrintAndStatus()}\n                >\n                  프린트 하기\n                </Button>\n              </div>\n\n              <div\n                style={{\n                  display: 'block',\n                  // justifyContent: 'center',\n                  // flexDirection: 'column',\n                  height: '30vh',\n                  minHeight: '300px',\n                  overflowY: 'scroll',\n                }}\n              >\n                <div ref={componentRef}>\n                  {isCompleted &&\n                    barcodeList &&\n                    barcodeList.map((url, index) => (\n                      <div\n                        key={'barcode' + index}\n                        style={{\n                          padding: '0.5rem',\n                        }}\n                      >\n                        <img src={url} alt=\"barcode\" width=\"100%\" />\n                      </div>\n                    ))}\n                </div>\n\n                {/* {barcodeUrl && (\n   \n                )} */}\n              </div>\n\n              {/* <canvas id=\"barcodeCanvas\"></canvas> */}\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DiagnosticBarcodeModal;\n","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  makeStyles,\n  Modal,\n  Backdrop,\n  IconButton,\n  Grid,\n  Button,\n} from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\n\nimport { setDiagnosticModal } from 'redux/features/diagnostic/diagnosticSlice';\nimport {\n  changeStatusToCompletedWithMemberId,\n  diagnosticChangeStatus,\n} from 'apis/diagnosisInsepctionAPI';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n/**\n * * 진단 검사에서 채혈 완료 버튼을 클릭시에 나오는 컴포넌트 (Template)\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DiagnosticBloodDrawModal = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const { breakpoint } = useWindowSize();\n\n  const isOpened = useSelector(\n    (state) => state.diagnostic.modalStatus.bloodDraw,\n  );\n\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n  const diagTestId = useSelector((state) => state.diagnostic.currentDiagTestId);\n  const diagnosticList = useSelector(\n    (state) => state.diagnostic.currentDiagTestList,\n  );\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const handleClose = () =>\n    dispatch(\n      setDiagnosticModal({\n        name: 'bloodDraw',\n        status: false,\n      }),\n    );\n\n  const handleBloodDraw = async () => {\n    try {\n      await diagnosticChangeStatus({\n        status: 'completed',\n        diagTestId,\n      });\n\n      const sendInfo = diagnosticList.map(({ diagTestRecordId }) => {\n        const inspectorMemberId = loginInfo.memberId;\n        return {\n          diagTestRecordId,\n          inspectorMemberId,\n        };\n      });\n\n      await changeStatusToCompletedWithMemberId(sendInfo);\n      handleAlert('success', '진단 검사의 상태가 접수로 완료되었습니다.');\n      handleClose();\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n    }\n  };\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpened}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{ timeout: 500 }}\n      >\n        <SpringFade in={isOpened}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  채혈 완료\n                </StyledTypography>\n                <div>\n                  <IconButton onClick={handleClose}>\n                    <AiOutlineClose size={24} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              <Grid container alignItems=\"center\">\n                <Grid item xs={6}>\n                  <img\n                    src=\"/assets/image/question.jpeg\"\n                    width=\"100%\"\n                    alt=\"question\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  xs={6}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                  }}\n                >\n                  <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                    정말로 채혈 완료를\n                  </StyledTypography>\n                  <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                    진행하시겠습니까?\n                  </StyledTypography>\n                  <div\n                    style={{\n                      marginTop: '1rem',\n                      display: 'flex',\n                    }}\n                  >\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      style={{\n                        minWidth: '6rem',\n                        marginRight: '0.5rem',\n                      }}\n                      onClick={() => handleBloodDraw()}\n                    >\n                      네\n                    </Button>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      style={{\n                        minWidth: '6rem',\n                        marginRight: '0.5rem',\n                      }}\n                      onClick={() => handleClose()}\n                    >\n                      아니요\n                    </Button>\n                  </div>\n                </Grid>\n              </Grid>\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DiagnosticBloodDrawModal;\n","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  makeStyles,\n  Modal,\n  Backdrop,\n  IconButton,\n  Grid,\n  Button,\n} from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\n\nimport { setDiagnosticModal } from 'redux/features/diagnostic/diagnosticSlice';\nimport {\n  changeStatusToPendingWithMemberId,\n  diagnosticChangeStatus,\n} from 'apis/diagnosisInsepctionAPI';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n/**\n * * 진단 검사에서 접수 취소를 클릭시에 나오는 Modal 컴포넌트 (Template)\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DiagnosticReceptionModal = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const { breakpoint } = useWindowSize();\n\n  const isOpened = useSelector(\n    (state) => state.diagnostic.modalStatus.reception,\n  );\n  const diagTestId = useSelector((state) => state.diagnostic.currentDiagTestId);\n  const diagnosticList = useSelector(\n    (state) => state.diagnostic.currentDiagTestList,\n  );\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const handleClose = () =>\n    dispatch(\n      setDiagnosticModal({\n        name: 'reception',\n        status: false,\n      }),\n    );\n\n  const handleReceptionCancel = async () => {\n    try {\n      // 1. 진단 검사 상세의 상태를 대기로 바꾼다.\n      await diagnosticChangeStatus({\n        status: 'pending',\n        diagTestId,\n      });\n      // 2. 진단 검사의 상태를 대기로 바꾼다.\n      const sendInfo = diagnosticList.map(({ diagTestRecordId }) => ({\n        diagTestRecordId,\n        diagTestValue: 0,\n        inspectorMemberId: null,\n      }));\n\n      console.log(sendInfo);\n\n      await changeStatusToPendingWithMemberId(sendInfo);\n      handleAlert('success', '접수의 상태가 대기로 변경되었습니다.');\n      handleClose();\n      // 3. 끝났다고 알려준다.\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpened}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{ timeout: 500 }}\n      >\n        <SpringFade in={isOpened}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  접수 취소\n                </StyledTypography>\n                <div>\n                  <IconButton onClick={handleClose}>\n                    <AiOutlineClose size={24} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              <Grid container alignItems=\"center\">\n                <Grid item xs={6}>\n                  <img\n                    src=\"/assets/image/question.jpeg\"\n                    width=\"100%\"\n                    alt=\"question\"\n                  />\n                </Grid>\n                <Grid\n                  item\n                  xs={6}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                  }}\n                >\n                  <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                    정말로 진단 검사를{' '}\n                  </StyledTypography>\n                  <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                    취소하시나요?\n                  </StyledTypography>\n                  <div\n                    style={{\n                      marginTop: '1rem',\n                      display: 'flex',\n                    }}\n                  >\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      style={{\n                        minWidth: '6rem',\n                        marginRight: '0.5rem',\n                      }}\n                      onClick={() => handleReceptionCancel()}\n                    >\n                      네\n                    </Button>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      style={{\n                        minWidth: '6rem',\n                        marginRight: '0.5rem',\n                      }}\n                      onClick={handleClose}\n                    >\n                      아니요\n                    </Button>\n                  </div>\n                </Grid>\n              </Grid>\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DiagnosticReceptionModal;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  SwipeableDrawer,\n  IconButton,\n  Button,\n  TableContainer,\n  Table,\n  TableBody,\n  Paper,\n} from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setDiagnosticDrawer,\n  setDiagnosticDrawerPage,\n  setDiagnosticModal,\n  setCurrentDiagTestList,\n  resetDiagnosticData,\n} from 'redux/features/diagnostic/diagnosticSlice';\nimport { FcApproval } from 'react-icons/fc';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { motion } from 'framer-motion';\nimport { GrPowerReset } from 'react-icons/gr';\nimport styled from 'styled-components';\nimport { useSnackbar } from 'notistack';\nimport { CSVLink } from 'react-csv';\nimport { IoIosArrowBack, IoIosArrowForward } from 'react-icons/io';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\n\nimport StyledButtonGroup from 'components/common/button/StyledButtonGroup';\nimport DiagnosticDetailTableHead from '../table/DiagnosticDetailTableHead';\nimport DiagnosticDetailTableRows from '../table/DiagnosticDetailTableRows';\nimport DiagnosticDetailInputTableHead from '../table/DiagnosticDetailInputTableHead';\nimport DiagnosticDetailInputTableRows from '../table/DiagnosticDetailInputTableRows';\nimport DiagnosticBarcodeModal from '../modal/DiagnosticBarcodeModal';\nimport DiagnosticBloodDrawModal from '../modal/DIagnosticBloodDrawModal';\nimport DiagnosticReceptionModal from '../modal/DiagnosticReceptionModal';\nimport StyledButton from 'components/common/button/StyledButton';\n\nimport HashSpinner from 'components/common/spinner/HashSpinner';\nimport {\n  changeDiagnosticTestValue,\n  diagnosticChangeStatus,\n  showDiagnosticTestListByDiagTestId,\n} from 'apis/diagnosisInsepctionAPI';\nimport { sendMqttMessage } from 'apis/pushAPI';\n\nconst SuccessPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 70%;\n  align-items: center;\n  justify-content: center;\n  p {\n    margin-top: 1.5rem;\n    font-size: 2rem;\n    font-weight: 700;\n    text-align: center;\n  }\n`;\n\n/**\n * * 진단 검사의 기록 및 바코드 출력, 취소, 채혈 완료와 같은 기능을 수행하기 위한 컴포넌트 (Template)\n * @returns {JSX.Element} view\n * @author SUNG WOOK HWANG\n */\nconst DiagnosticDrawer = () => {\n  const { breakpoint } = useWindowSize();\n  const [isLoading, setLoading] = useState(true);\n\n  // 진단 검사의 정보를 저장하기 위한 상태\n  const [diagnosticInfo, setDiagnosticInfo] = useState([]);\n  const dispatch = useDispatch();\n\n  // 페이지 컴포넌트에서 저장한 diagTestId를 Redux store에 가져온다.\n  const diagTestId = useSelector((state) => state.diagnostic.currentDiagTestId);\n  const diagDataInput = useSelector(\n    (state) => state.diagnostic.diagnosticDataInput,\n  );\n  const isOpened = useSelector((state) => state.diagnostic.drawerStatus.status);\n  // const modalStatus = useSelector((state) => state.diagnostic.modalStatus);\n  const { memberAuthority, memberId, hospitalCode } = useSelector(\n    (state) => state.common.loginInfo,\n  );\n\n  // Static Data\n  const headers = [\n    { label: '묶음 코드', key: 'bundleCode' },\n    { label: '묶음 명', key: 'bundleName' },\n    { label: '처방 코드', key: 'presCode' },\n    { label: '처방 명', key: 'presName' },\n    { label: '용기', key: 'presVessel' },\n    { label: '검체 명', key: 'presSpecimenName' },\n    { label: '평균 값', key: 'diagTestAvgValue' },\n    { label: '진단 검사 기록 ID', key: 'diagTestRecordId' },\n    { label: '결과 값', key: 'diagTestValue' },\n    { label: '상태', key: 'diagTestStatus' },\n    { label: '진료의', key: 'doctorName' },\n    { label: '검사담당자', key: 'inspectorName' },\n  ];\n  const pageStatus = useSelector(\n    (state) => state.diagnostic.drawerStatus.pageStatus,\n  );\n\n  const buttonSetting = {\n    rest: { scale: 1 },\n    hover: { scale: 1.2 },\n    pressed: { scale: 0.95 },\n  };\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    dispatch(setDiagnosticDrawer(open));\n  };\n\n  const toggleModal = (name, status) => {\n    dispatch(\n      setDiagnosticModal({\n        name,\n        status,\n      }),\n    );\n  };\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const showDiagnosticTestList = async (diagTestId) => {\n    try {\n      const result = await showDiagnosticTestListByDiagTestId(diagTestId);\n      setDiagnosticInfo(result);\n      dispatch(setCurrentDiagTestList(result));\n      setLoading(false);\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n      setDiagnosticInfo([]);\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Drawer가 열렸거나, 페이지의 상태가 'INPUT_COMPLETED'로 바뀌는 effect 발생시\n   * 진단 검사의 결과를 다시 가지고 오라는 side-effect를 일으키고\n   * Drawer가 닫힌 경우 진단 검사의 정보를 초기화 하라는 Redux action을 dispatch하는 side-effect를 일으킨다.\n   *\n   */\n  useEffect(() => {\n    if (isOpened || pageStatus === 'INPUT_COMPLETED') {\n      setLoading(true);\n      setTimeout(() => {\n        showDiagnosticTestList(diagTestId);\n      }, 1000);\n    }\n    if (!isOpened) {\n      dispatch(resetDiagnosticData());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpened, pageStatus]);\n\n  const togglePage = (page) => {\n    dispatch(setDiagnosticDrawerPage(page));\n  };\n\n  const handleUpdateResult = async () => {\n    try {\n      // 1. 보낼 값을 리스트로 만든다.\n      const diagTestRecordIdList = Object.keys(diagDataInput);\n\n      const sendListInfo = diagTestRecordIdList.map((diagTestRecordId) => ({\n        diagTestRecordId: Number.parseInt(diagTestRecordId),\n        diagTestValue: Number.parseFloat(diagDataInput[diagTestRecordId]),\n        inspectorMemberId: Number.parseInt(memberId),\n      }));\n      // 2. 진단 검사 상세 결과 값을 보낸다.\n      await changeDiagnosticTestValue(sendListInfo);\n\n      const statusInfo = {\n        status: 'completed',\n        diagTestId,\n      };\n\n      // 3. 진단 검사의 값을 완료로 바꾼다.\n      await diagnosticChangeStatus(statusInfo);\n\n      // 4. 진단 검사의 결과를 의사와 간호사에게 푸시를 날린다.\n      const sendDoctorMessageInfo = {\n        topic: `/${hospitalCode}/doctor`,\n        priority: 'success',\n        message: `${diagTestId}번의 진단 검사가 완료되었습니다.`,\n      };\n\n      const sendNurseMessageInfo = {\n        topic: `/${hospitalCode}/nurse`,\n        priority: 'success',\n        message: `${diagTestId}번의 진단 검사가 완료되었습니다.`,\n      };\n\n      await sendMqttMessage(sendDoctorMessageInfo);\n\n      await sendMqttMessage(sendNurseMessageInfo);\n\n      togglePage('INPUT_COMPLETED');\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n    }\n  };\n\n  const handleReceptionCancel = () => {\n    if (diagnosticInfo[0].diagTestStatus === 'DIAGNOSTIC_COMPLETED') {\n      handleAlert('error', '진단 검사가 완료된 상태에서는 취소할 수 없습니다.');\n      return;\n    }\n\n    if (diagnosticInfo[0].diagTestStatus === 'DIAGNOSTIC_REGISTER') {\n      toggleModal('reception', true);\n      return;\n    }\n\n    handleAlert('error', '진단 검사가 진행중이 아니라면 취소할 수 없습니다.');\n    return;\n  };\n\n  const handleBloodDraw = () => {\n    if (diagnosticInfo[0].diagTestStatus === 'DIAGNOSTIC_COMPLETED') {\n      handleAlert(\n        'error',\n        '진단 검사가 완료된 상태에서는 채혈 완료를 할 수 없습니다.',\n      );\n      return;\n    }\n    if (diagnosticInfo[0].diagTestStatus === 'DIAGNOSTIC_REGISTER') {\n      toggleModal('bloodDraw', true);\n      return;\n    }\n\n    if (diagnosticInfo[0].diagTestStatus === 'DIAGNOSTIC_PENDING') {\n      handleAlert('error', '진단 검사를 진행해야 채혈 완료를 할 수 있습니다.');\n      return;\n    }\n    // toggleModal('bloodDraw', true);\n  };\n\n  const getStepContent = (step) => {\n    if (step === 'LIST') {\n      return (\n        <Fragment>\n          {isLoading && (\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: '100%',\n                height: '80vh',\n              }}\n            >\n              <HashSpinner />\n            </div>\n          )}\n          {!isLoading && diagnosticInfo.length > 0 && (\n            <TableContainer component={Paper} style={{ marginTop: '2rem' }}>\n              <Table style={{ minWidth: '930px', overflowX: 'scroll' }}>\n                <DiagnosticDetailTableHead />\n                <TableBody>\n                  {diagnosticInfo.map((data) => (\n                    <Fragment key={data.diagInspectionId}>\n                      <DiagnosticDetailTableRows data={data} />\n                    </Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n        </Fragment>\n      );\n    }\n\n    if (step === 'RESULT_INPUT') {\n      return (\n        <TableContainer component={Paper} style={{ marginTop: '2rem' }}>\n          <Table style={{ minWidth: '930px', overflowX: 'scroll' }}>\n            <DiagnosticDetailInputTableHead />\n            <TableBody>\n              {diagnosticInfo.map((data) => (\n                <Fragment key={data.diagInspectionId}>\n                  <DiagnosticDetailInputTableRows data={data} />\n                </Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      );\n    }\n\n    if (step === 'INPUT_COMPLETED') {\n      return (\n        <SuccessPage>\n          <FcApproval size={300} />\n          <p>진단 검사 결과가 성공적으로 추가되었습니다.</p>\n        </SuccessPage>\n      );\n    }\n  };\n\n  const handleReset = () => {\n    setLoading(true);\n    setTimeout(() => {\n      showDiagnosticTestList(diagTestId);\n    }, 1000);\n  };\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer\n          style={{\n            height: '100%',\n          }}\n        >\n          <DrawerHeader\n            breakpoint={breakpoint}\n            style={{ padding: '0.5rem', backgroundColor: 'white', zIndex: 1 }}\n          >\n            <h1>진단 검사 상세</h1>\n            <div>\n              <IconButton onClick={() => dispatch(setDiagnosticDrawer(false))}>\n                <AiOutlineClose size={32} />\n              </IconButton>\n            </div>\n          </DrawerHeader>\n          {pageStatus === 'LIST' && memberAuthority === 'ROLE_INSPECTOR' && (\n            <div\n              style={{\n                display: 'flex',\n              }}\n            >\n              <StyledButtonGroup size=\"medium\" color=\"primary\">\n                <Button onClick={() => toggleModal('barcode', true)}>\n                  바코드 출력\n                </Button>\n                <Button onClick={() => togglePage('RESULT_INPUT')}>\n                  결과 입력\n                </Button>\n\n                <Button>\n                  <CSVLink data={diagnosticInfo} headers={headers}>\n                    <span style={{ color: '#3F51B5' }}>엑셀 저장</span>\n                  </CSVLink>\n                </Button>\n                <Button onClick={() => handleReceptionCancel()}>\n                  접수 취소\n                </Button>\n                <Button onClick={() => handleBloodDraw()}>채혈 완료</Button>\n              </StyledButtonGroup>\n              <motion.div\n                variants={buttonSetting}\n                initial=\"rest\"\n                whileHover=\"hover\"\n                whileTap=\"pressed\"\n                style={{\n                  marginLeft: '0.5rem',\n                }}\n              >\n                <IconButton\n                  type=\"button\"\n                  size=\"small\"\n                  style={{\n                    border: '1px solid rgba(0,0,0,0.12)',\n                    marginLeft: '0.5rem',\n                    marginRight: '0.5rem',\n                    padding: '0.5rem',\n                  }}\n                  onClick={() => handleReset()}\n                >\n                  <GrPowerReset />\n                </IconButton>\n              </motion.div>\n            </div>\n          )}\n          {pageStatus === 'LIST' && memberAuthority !== 'ROLE_INSPECTOR' && (\n            <div style={{ display: 'flex' }}>\n              <StyledButtonGroup size=\"medium\" color=\"primary\">\n                <Button>\n                  <CSVLink data={diagnosticInfo} headers={headers}>\n                    <span style={{ color: '#3F51B5' }}>엑셀 저장</span>\n                  </CSVLink>\n                </Button>\n              </StyledButtonGroup>\n              <motion.div\n                variants={buttonSetting}\n                initial=\"rest\"\n                whileHover=\"hover\"\n                whileTap=\"pressed\"\n                style={{\n                  marginLeft: '0.5rem',\n                }}\n              >\n                <IconButton\n                  type=\"button\"\n                  size=\"small\"\n                  style={{\n                    border: '1px solid rgba(0,0,0,0.12)',\n                    marginLeft: '0.5rem',\n                    marginRight: '0.5rem',\n                    padding: '0.5rem',\n                  }}\n                  onClick={() => handleReset()}\n                >\n                  <GrPowerReset />\n                </IconButton>\n              </motion.div>\n            </div>\n          )}\n\n          {pageStatus === 'RESULT_INPUT' && (\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <StyledButton\n                bgColor=\"white\"\n                width=\"10%\"\n                style={{\n                  minWidth: '6rem',\n                }}\n                onClick={() => togglePage('LIST')}\n              >\n                <IoIosArrowBack size={16} /> 상세 보기\n              </StyledButton>\n              <StyledButton\n                bgColor=\"white\"\n                width=\"10%\"\n                style={{\n                  minWidth: '6rem',\n                }}\n                onClick={() => handleUpdateResult()}\n              >\n                추가 하기 <IoIosArrowForward size={16} />\n              </StyledButton>\n            </div>\n          )}\n          {pageStatus === 'INPUT_COMPLETED' && (\n            <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n              <StyledButton\n                bgColor=\"white\"\n                width=\"10%\"\n                style={{\n                  minWidth: '6rem',\n                }}\n                onClick={() => togglePage('LIST')}\n              >\n                상세 보기 <IoIosArrowForward size={16} />\n              </StyledButton>\n            </div>\n          )}\n\n          {getStepContent(pageStatus)}\n          <DiagnosticBarcodeModal />\n          <DiagnosticBloodDrawModal />\n          <DiagnosticReceptionModal />\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default DiagnosticDrawer;\n","import { useState, useCallback } from 'react';\nimport moment from 'moment';\n\n/**\n * [calInfo, sendCalInfo, getPrevWeek, getNextWeek, reset]\n * * 캘린더 정보를 가져오기 위한 Custom Hook\n * @returns [calInfo : object, sendCalInfo : object , getPrevWeek : function, getNextWeek : function, reset : function]\n * * calInfo는 선택 주가 몇번 째 주인지 (weekNo), startDate (주의 시작), endDate(주의 마지막)의 대한 정보를 담고 있음.\n * * sendCalInfo는 서버랑 데이터를 통신할 때에 YYYY-MM-DD 형식으로 보내기 위해서 정의함.\n * * getPrevWeek은 호출 시에 해당 주의 지난 주의 값을 가져옴.\n * * getNextWeek은 호출 시에 해당 주의 다음 주의 값을 가져옴.\n * * reset은 이번 주의 값으로 초기화 함.\n * @author SUNG WOOK HWANG\n */\nconst useCalendar = () => {\n  const [calInfo, setCalInfo] = useState({\n    weekNo: moment().week(),\n    startDate: moment(moment().startOf('week').toDate()).format(\n      'YYYY년 MM월 DD일',\n    ),\n    endDate: moment(moment().endOf('week').toDate()).format('YYYY년 MM월 DD일'),\n  });\n\n  const [sendCalInfo, setSendCalInfo] = useState({\n    weekNo: moment().week(),\n    startDate: moment(moment().startOf('week').toDate()).format('YYYY-MM-DD'),\n    endDate: moment(moment().endOf('week').toDate()).format('YYYY-MM-DD'),\n  });\n\n  const getPrevWeek = useCallback(() => {\n    setCalInfo((prevState) => {\n      const newState = prevState;\n      const { weekNo } = newState;\n      return {\n        weekNo: weekNo - 1,\n        startDate: moment(\n          moment()\n            .week(weekNo - 1)\n            .startOf('week')\n            .toDate(),\n        ).format('YYYY년 MM월 DD일'),\n        endDate: moment(\n          moment()\n            .week(weekNo - 1)\n            .endOf('week')\n            .toDate(),\n        ).format('YYYY년 MM월 DD일'),\n      };\n    });\n\n    setSendCalInfo((prevState) => {\n      const newState = prevState;\n      const { weekNo } = newState;\n      return {\n        weekNo: weekNo - 1,\n        startDate: moment(\n          moment()\n            .week(weekNo - 1)\n            .startOf('week')\n            .toDate(),\n        ).format('YYYY-MM-DD'),\n        endDate: moment(\n          moment()\n            .week(weekNo - 1)\n            .endOf('week')\n            .toDate(),\n        ).format('YYYY-MM-DD'),\n      };\n    });\n  }, []);\n\n  const getNextWeek = useCallback(() => {\n    setCalInfo((prevState) => {\n      const newState = prevState;\n      const { weekNo } = newState;\n      return {\n        weekNo: weekNo + 1,\n        startDate: moment(\n          moment()\n            .week(weekNo + 1)\n            .startOf('week')\n            .toDate(),\n        ).format('YYYY년 MM월 DD일'),\n        endDate: moment(\n          moment()\n            .week(weekNo + 1)\n            .endOf('week')\n            .toDate(),\n        ).format('YYYY년 MM월 DD일'),\n      };\n    });\n\n    setSendCalInfo((prevState) => {\n      const newState = prevState;\n      const { weekNo } = newState;\n      return {\n        weekNo: weekNo + 1,\n        startDate: moment(\n          moment()\n            .week(weekNo + 1)\n            .startOf('week')\n            .toDate(),\n        ).format('YYYY-MM-DD'),\n        endDate: moment(\n          moment()\n            .week(weekNo + 1)\n            .endOf('week')\n            .toDate(),\n        ).format('YYYY-MM-DD'),\n      };\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setCalInfo({\n      weekNo: moment().week(),\n      startDate: moment(moment().startOf('week').toDate()).format(\n        'YYYY년 MM월 DD일',\n      ),\n      endDate: moment(moment().endOf('week').toDate()).format(\n        'YYYY년 MM월 DD일',\n      ),\n    });\n\n    setSendCalInfo({\n      weekNo: moment().week(),\n      startDate: moment(moment().startOf('week').toDate()).format('YYYY-MM-DD'),\n      endDate: moment(moment().endOf('week').toDate()).format('YYYY-MM-DD'),\n    });\n  }, []);\n\n  return [calInfo, sendCalInfo, getPrevWeek, getNextWeek, reset];\n};\n\nexport default useCalendar;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  makeStyles,\n  Modal,\n  Backdrop,\n  IconButton,\n  Grid,\n  Button,\n  Table,\n  Paper,\n  TableBody,\n  TableContainer,\n} from '@material-ui/core';\nimport { IoIosArrowBack } from 'react-icons/io';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { useSnackbar } from 'notistack';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { GrPowerReset } from 'react-icons/gr';\nimport { motion } from 'framer-motion';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport { setDiagnosticModal } from 'redux/features/diagnostic/diagnosticSlice';\nimport SearchBox from 'components/common/search/SearchBox';\nimport { getPatientsList } from 'apis/patientAPI';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\nimport {\n  searchPatientInfoByName,\n  showDiagnosticTestListByPatientId,\n} from 'apis/searchAPI';\nimport DiagnosticTableRow from '../table/DiagnosticTableRow';\nimport DiagnosticTableHead from '../table/DiagnosticTableHead';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst DiagnosticSearchModal = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n  const { breakpoint } = useWindowSize();\n  const [isLoading, setLoading] = useState(true);\n  const [pageStatus, setPageStatus] = useState('SEARCH');\n  const [patientList, setPatientList] = useState([]);\n  const [patientDetailList, setPatientDetailList] = useState([]);\n  const [selectedPatientInfo, setSelectedPatientInfo] = useState({});\n  const [searchVal, setSearchVal] = useState('');\n  const { hospitalCode } = useSelector((state) => state.common.loginInfo);\n  const isOpened = useSelector((state) => state.diagnostic.modalStatus.search);\n\n  const handleClose = () => {\n    dispatch(\n      setDiagnosticModal({\n        name: 'search',\n        status: false,\n      }),\n    );\n    setLoading(true);\n    setPageStatus('SEARCH');\n    setPatientList([]);\n    setSelectedPatientInfo({});\n    setSearchVal('');\n  };\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const buttonSetting = {\n    rest: { scale: 1 },\n    hover: { scale: 1.2 },\n    pressed: { scale: 0.95 },\n  };\n  /**\n   * * 목표 : 해당 병원의 환자를 가지고 오기 위한 async 함수\n   * @param {string} hospitalCode\n   */\n  async function getPatientsInfo(hospitalCode) {\n    try {\n      const result = await getPatientsList(hospitalCode);\n      const newResult = result.data.data.map((data, index) => {\n        const { patientGender } = data;\n        return {\n          id: index + 1,\n          ...data,\n          patientGender: patientGender === 'male' ? '남자' : '여자',\n        };\n      });\n      setPatientList(newResult);\n      setSelectedPatientInfo({});\n      setLoading(false);\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n      setLoading(false);\n    }\n  }\n\n  async function getPatientsInfoByName(patientInfo) {\n    try {\n      const result = await searchPatientInfoByName(patientInfo);\n      const newResult = result.map((data, index) => {\n        const { patientGender } = data;\n        return {\n          id: index + 1,\n          ...data,\n          patientGender: patientGender === 'male' ? '남자' : '여자',\n        };\n      });\n      setPatientList(newResult);\n      setSelectedPatientInfo({});\n      setLoading(false);\n    } catch (error) {\n      // console.log(error);\n      const { message } = error.response.data;\n      if (message === undefined) {\n        handleAlert('error', '알 수 없는 이유로 검색에 실패하였습니다.');\n        setLoading(false);\n        return;\n      }\n      handleAlert('error', message);\n      setLoading(false);\n    }\n  }\n\n  async function getDiagnosticInfoByPatientId(patientId) {\n    try {\n      const result = await showDiagnosticTestListByPatientId(patientId);\n      if (result.length > 0) {\n        setPatientDetailList(result);\n        const { patientName } = result[0];\n        handleAlert(\n          'success',\n          `${patientName}님의 진단 검사가 ${result.length}건 조회되었습니다.`,\n        );\n        setPageStatus('DETAIL');\n      }\n\n      // console.log(result);\n      setLoading(false);\n    } catch (error) {\n      const { message } = error.response.data;\n      if (message === undefined) {\n        handleAlert('error', '알 수 없는 이유로 검색에 실패하였습니다.');\n        setLoading(false);\n        return;\n      }\n      handleAlert('error', message);\n      setLoading(false);\n    }\n  }\n  useEffect(() => {\n    if (isOpened) {\n      setLoading(true);\n\n      setTimeout(() => {\n        getPatientsInfo(hospitalCode);\n      }, 1000);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpened]);\n\n  useEffect(() => {\n    if (searchVal === '') {\n      return;\n    }\n\n    const patientInfo = {\n      hospitalCode,\n      patientName: searchVal,\n    };\n    setLoading(true);\n    setTimeout(() => {\n      getPatientsInfoByName(patientInfo);\n    }, 1000);\n\n    console.log(searchVal);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchVal]);\n\n  const columns = [\n    { field: 'patientName', headerName: '이름', width: 150 },\n    { field: 'patientBirth', headerName: '생년월일', width: 150 },\n    { field: 'patientGender', headerName: '성별', width: 120 },\n    { field: 'patientTel', headerName: '연락처', width: 150 },\n    { field: 'recentDate', headerName: '최근 진료 일자', width: 200 },\n    { field: 'patientAddr1', headerName: '주소 1', width: 300 },\n    { field: 'patientAddr2', headerName: '주소 2', width: 150 },\n    { field: 'patientPostal', headerName: '우편번호', width: 140 },\n  ];\n\n  const handleReset = () => {\n    setLoading(true);\n    setPageStatus('SEARCH');\n    setTimeout(() => {\n      getPatientsInfo(hospitalCode);\n    }, 1000);\n  };\n\n  const handlePatientClick = (e) => {\n    const { row } = e;\n    setSelectedPatientInfo(row);\n  };\n\n  const handlePatientToDiagnosticInfo = () => {\n    setLoading(true);\n\n    const { patientId } = selectedPatientInfo;\n    setTimeout(() => {\n      getDiagnosticInfoByPatientId(patientId);\n    }, 1000);\n  };\n\n  const getStepContent = (step) => {\n    if (step === 'SEARCH') {\n      return (\n        <>\n          {isLoading && (\n            <div\n              style={{\n                width: '100%',\n                height: '30vh',\n                minHeight: '300px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <HashSpinner />\n            </div>\n          )}\n          {!isLoading && (\n            <Grid container justify=\"center\">\n              <Grid item xs={12}>\n                <div\n                  style={{\n                    display: 'flex',\n                  }}\n                >\n                  <div\n                    style={{\n                      flex: 1,\n                    }}\n                  >\n                    <SearchBox\n                      setSearchVal={setSearchVal}\n                      placeholder=\"환자 이름을 검색해주세요.\"\n                      noRemove\n                    />\n                  </div>\n\n                  <motion.div\n                    variants={buttonSetting}\n                    initial=\"rest\"\n                    whileHover=\"hover\"\n                    whileTap=\"pressed\"\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'center',\n                      alignItems: 'center',\n                    }}\n                  >\n                    <IconButton\n                      type=\"button\"\n                      size=\"small\"\n                      style={{\n                        border: '1px solid rgba(0,0,0,0.12)',\n                        marginLeft: '0.5rem',\n                        marginRight: '0.5rem',\n                        padding: '0.5rem',\n                      }}\n                      onClick={() => handleReset()}\n                    >\n                      <GrPowerReset />\n                    </IconButton>\n                  </motion.div>\n                </div>\n              </Grid>\n              <Grid item xs={12} style={{ marginTop: '2em' }}>\n                <div style={{ height: 300, width: '100%' }}>\n                  <DataGrid\n                    rows={patientList}\n                    columns={columns}\n                    onCellClick={handlePatientClick}\n                    pageSize={10}\n                  />\n                </div>\n                {Object.keys(selectedPatientInfo).length > 1 && (\n                  <div style={{ marginTop: '1rem' }}>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      onClick={() => handlePatientToDiagnosticInfo()}\n                    >\n                      더 보기\n                    </Button>\n                  </div>\n                )}\n              </Grid>\n            </Grid>\n          )}\n        </>\n      );\n    }\n\n    if (step === 'DETAIL') {\n      return (\n        <>\n          {!isLoading && (\n            <Grid container justify=\"center\">\n              <Grid\n                item\n                xs={12}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  paddingTop: '0.7rem',\n                  borderTop: '1px solid rgba(0,0,0,0.12)',\n                }}\n              >\n                <motion.div\n                  variants={buttonSetting}\n                  initial=\"rest\"\n                  whileHover=\"hover\"\n                  whileTap=\"pressed\"\n                  style={{\n                    display: 'flex',\n\n                    alignItems: 'center',\n                  }}\n                >\n                  <IconButton\n                    type=\"button\"\n                    size=\"small\"\n                    style={{\n                      border: '1px solid rgba(0,0,0,0.12)',\n                      marginLeft: '0.5rem',\n                      marginRight: '0.5rem',\n                      padding: '0.5rem',\n                    }}\n                    onClick={() => handleReset()}\n                  >\n                    <IoIosArrowBack />\n                  </IconButton>\n                </motion.div>\n                <StyledTypography\n                  variant=\"subtitle1\"\n                  component=\"span\"\n                  weight={6}\n                  style={{\n                    marginLeft: '0.5rem',\n                  }}\n                >\n                  이전으로 돌아가기\n                </StyledTypography>\n                <br />\n              </Grid>\n\n              <Grid\n                item\n                xs={12}\n                style={{\n                  marginTop: '0.5em',\n                  borderTop: '1px solid rgba(0,0,0,0.12)',\n                }}\n              >\n                <TableContainer\n                  component={Paper}\n                  style={{\n                    marginTop: '1.5rem',\n                  }}\n                >\n                  <Table style={{ minWidth: '930px', overflowX: 'scroll' }}>\n                    <DiagnosticTableHead />\n                    <TableBody>\n                      {patientDetailList.map((data) => (\n                        <Fragment key={data.diagTestId}>\n                          <DiagnosticTableRow data={data} />\n                        </Fragment>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Grid>\n            </Grid>\n          )}\n        </>\n      );\n    }\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpened}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{ timeout: 500 }}\n      >\n        <SpringFade in={isOpened}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  {pageStatus === 'SEARCH' && '환자 검색'}\n                  {pageStatus === 'DETAIL' && '환자가 받은 진단 검사 기록'}\n                </StyledTypography>\n                <div>\n                  <IconButton onClick={handleClose}>\n                    <AiOutlineClose size={24} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              {getStepContent(pageStatus)}\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DiagnosticSearchModal;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  Grid,\n  Table,\n  TableContainer,\n  TableBody,\n  Paper,\n  IconButton,\n} from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setDiagnosticModal } from 'redux/features/diagnostic/diagnosticSlice';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport { IoIosArrowBack, IoIosArrowForward } from 'react-icons/io';\nimport { GrPowerReset } from 'react-icons/gr';\nimport { motion } from 'framer-motion';\n\nimport ContentContainer from 'components/common/container/ContentContainer';\nimport TitleHeader from 'components/common/header/TitleHeader';\n\n// import SearchBox from 'components/common/search/SearchBox';\nimport DiagnosticTableHead from 'components/diagnostic/table/DiagnosticTableHead';\nimport DiagnosticTableRow from 'components/diagnostic/table/DiagnosticTableRow';\nimport DiagnosticDrawer from 'components/diagnostic/drawer/DiagnosticDrawer';\nimport useCalendar from 'hooks/useCalendar';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport ResponsivePageHeader from 'components/common/header/ResponsivePageHeader';\nimport DiagnosticSearchModal from 'components/diagnostic/modal/DiagnosticSearchModal';\nimport { showWeeklyDiagnosticTestListByHospitalCode } from 'apis/diagnosisInsepctionAPI';\nimport HashSpinner from 'components/common/spinner/HashSpinner';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\n/**\n * 이 페이지 컴포넌트는 진단 검사 페이지를 작성하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * 진단 검사 (PatientSearch, ColoredButton, Table, DiagnosticDrawer )\n * * Sider\n * * Header\n * @returns {JSX.Element}\n * @author SUNG WOOK HWANG\n */\nconst DiagnosticPage = () => {\n  const dispatch = useDispatch();\n\n  // \b\b\b\b로딩 중 상태\n  const [isLoading, setLoading] = useState(true);\n  const [calInfo, sendCalInfo, getPrevWeek, getNextWeek, reset] = useCalendar();\n\n  // 진단 정보\n  const [diagnosticInfo, setDiagnosticInfo] = useState([]);\n\n  // Redux store에 있는 병원 코드\n  const { hospitalCode } = useSelector((state) => state.common.loginInfo);\n\n  // Redux store에 있는 진단 검사 ID\n  const currentDiagTestId = useSelector(\n    (state) => state.diagnostic.currentDiagTestId,\n  );\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const buttonSetting = {\n    rest: { scale: 1 },\n    hover: { scale: 1.2 },\n    pressed: { scale: 0.95 },\n  };\n\n  /**\n   * * 목표 : 진단 검사를 가져오기 위한 함수\n   * @param {object} sendInfo\n   * @return {object} result\n   */\n  async function getDiagnosticInfos(sendInfo) {\n    try {\n      const result = await showWeeklyDiagnosticTestListByHospitalCode(sendInfo);\n      setDiagnosticInfo(result);\n      setLoading(false);\n    } catch (error) {\n      setDiagnosticInfo([]);\n      const { message } = error.response.data;\n      setLoading(false);\n      handleAlert('error', message);\n    }\n  }\n\n  /**\n   * * 목표 : 처음에 들어올 때에 현재 주간과 병원 코드로 데이터를 가지고 오기 위한 side-effect\n   * @author SUNG WOOK HWANG\n   */\n  useEffect(() => {\n    setLoading(true);\n\n    const { startDate, endDate } = sendCalInfo;\n    const sendInfo = {\n      startDate,\n      endDate,\n      hospitalCode,\n    };\n    setTimeout(() => {\n      getDiagnosticInfos(sendInfo);\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sendCalInfo]);\n\n  return (\n    <div>\n      <header\n        style={{\n          position: 'sticky',\n          top: 0,\n          backgroundColor: 'white',\n          zIndex: 1,\n        }}\n      >\n        <ResponsivePageHeader />\n      </header>\n      <main>\n        <Grid container>\n          <Grid item xs={12}>\n            <PageTransition>\n              <ContentContainer>\n                <TitleHeader>\n                  <span>진료 | </span>\n                  <span>진단 검사 보기</span>\n                </TitleHeader>\n                <div\n                  className=\"icon-area\"\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    borderTop: '1px solid rgba(0,0,0,0.08)',\n                    borderBottom: '1px solid rgba(0,0,0,0.08)',\n                    paddingTop: '0.5rem',\n                    paddingBottom: '0.5rem',\n                  }}\n                >\n                  <motion.div\n                    variants={buttonSetting}\n                    initial=\"rest\"\n                    whileHover=\"hover\"\n                    whileTap=\"pressed\"\n                  >\n                    <IconButton\n                      type=\"button\"\n                      size=\"small\"\n                      style={{\n                        border: '1px solid rgba(0,0,0,0.12)',\n                        marginLeft: '0.5rem',\n                        marginRight: '0.5rem',\n                        padding: '0.5rem',\n                      }}\n                      onClick={() => {\n                        dispatch(\n                          setDiagnosticModal({\n                            name: 'search',\n                            status: true,\n                          }),\n                        );\n                      }}\n                    >\n                      <AiOutlineSearch />\n                    </IconButton>\n                  </motion.div>\n                  <motion.div\n                    variants={buttonSetting}\n                    initial=\"rest\"\n                    whileHover=\"hover\"\n                    whileTap=\"pressed\"\n                  >\n                    <IconButton\n                      type=\"button\"\n                      size=\"small\"\n                      style={{\n                        border: '1px solid rgba(0,0,0,0.12)',\n                        marginLeft: '0.5rem',\n                        marginRight: '0.5rem',\n                        padding: '0.5rem',\n                      }}\n                      onClick={reset}\n                    >\n                      <GrPowerReset />\n                    </IconButton>\n                  </motion.div>\n                  <motion.div\n                    variants={buttonSetting}\n                    initial=\"rest\"\n                    whileHover=\"hover\"\n                    whileTap=\"pressed\"\n                  >\n                    <IconButton\n                      type=\"button\"\n                      size=\"small\"\n                      style={{\n                        border: '1px solid rgba(0,0,0,0.12)',\n                        marginLeft: '0.5rem',\n                        marginRight: '0.5rem',\n                        padding: '0.5rem',\n                      }}\n                      onClick={getPrevWeek}\n                    >\n                      <IoIosArrowBack />\n                    </IconButton>\n                  </motion.div>\n\n                  <motion.div\n                    variants={buttonSetting}\n                    initial=\"rest\"\n                    whileHover=\"hover\"\n                    whileTap=\"pressed\"\n                  >\n                    {' '}\n                    <IconButton\n                      type=\"button\"\n                      size=\"small\"\n                      style={{\n                        border: '1px solid rgba(0,0,0,0.12)',\n                        marginLeft: '0.5rem',\n                        marginRight: '0.5rem',\n                        padding: '0.5rem',\n                      }}\n                      onClick={getNextWeek}\n                    >\n                      <IoIosArrowForward />\n                    </IconButton>\n                  </motion.div>\n\n                  <span>\n                    {calInfo.startDate} ~ {calInfo.endDate}\n                  </span>\n                </div>\n                {isLoading && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'center',\n                      alignItems: 'center',\n                      width: '100vw',\n                      height: '80vh',\n                    }}\n                  >\n                    <HashSpinner />\n                  </div>\n                )}\n\n                {!isLoading && diagnosticInfo.length > 0 && (\n                  <TableContainer\n                    component={Paper}\n                    style={{\n                      marginTop: '1.5rem',\n                    }}\n                  >\n                    <Table style={{ minWidth: '930px', overflowX: 'scroll' }}>\n                      <DiagnosticTableHead />\n                      <TableBody>\n                        {diagnosticInfo.map((data) => (\n                          <Fragment key={data.diagTestId}>\n                            <DiagnosticTableRow data={data} />\n                          </Fragment>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n\n                {!isLoading && diagnosticInfo.length === 0 && (\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'column',\n                      justifyContent: 'center',\n                      alignItems: 'center',\n                      width: '100%',\n                      height: '80vh',\n                    }}\n                  >\n                    <div style={{ width: '100%', maxWidth: '500px' }}>\n                      <img\n                        src=\"/assets/image/404/3.png\"\n                        alt=\"not found\"\n                        width=\"100%\"\n                      />\n                    </div>\n                    <StyledTypography\n                      variant=\"h4\"\n                      component=\"h5\"\n                      weight={7}\n                      style={{\n                        marginTop: '1rem',\n                      }}\n                    >\n                      해당 주의 해당 병원의 진단 검사 목록이 존재하지 않습니다.\n                    </StyledTypography>\n                  </div>\n                )}\n                {currentDiagTestId !== 0 && <DiagnosticDrawer />}\n\n                <DiagnosticSearchModal />\n              </ContentContainer>\n            </PageTransition>\n          </Grid>\n        </Grid>\n      </main>\n    </div>\n  );\n};\n\nexport default DiagnosticPage;\n","import axios from 'axios';\n\n/**\n * * 목적 : 해당 병원의 식별자 코드(hospitalCode)로 NOTICE 리스트를 출력하기 위한 API\n *\n * @param {String} hospitalCode\n * @returns {List<NoticesDTO>} noticeList\n * * [notices Entity]\n * * * !String noticeTitle\n * * * !String noticeAuthor\n * * * !String createDate\n * * * !String noticeHeadText\n * * * String noticeHeadImage\n * * * !int noticeCount\n * @author HYEONG YUN KIM\n */\nexport const getNoticesList = async (hospitalCode) => {\n  return await axios.get('/notice/', {\n    params: {\n      hospitalCode,\n    },\n  });\n};\n\n/**\n * * 목적 : 해당 공지사항의 댓글 리스트를 출력하기 위한 API\n *\n * @param {number} noticeId\n * @returns {List<NoticeCommentsDTO>} noticeList\n * * [noticeComments Entity]\n * * * !String memberName\n * * * !String createdDate\n * * * !String comment\n * @author HYEONG YUN KIM\n */\nexport const getNoticeCommentsList = async (noticeId) => {\n  const result = await axios.get('/notice/comments', {\n    params: {\n      noticeId,\n    },\n  });\n  return result.data.data;\n};\n\n/**\n * * 목적 : 해당 공지사항의 상세정보 + 조회수 증가를 위한 API\n *\n * @param {number} noticeId\n * @returns {List<NoticesDTO>} noticeList\n * * [notices Entity]\n * * * !String noticeTitle\n * * * !String noticeContent\n * * * !String noticeAuthor\n * @author HYEONG YUN KIM\n */\nexport const getNoticeList = async (noticeId) => {\n  const result = await axios.get('/notice/detail', {\n    params: {\n      noticeId,\n    },\n  });\n  return result.data.data;\n};\n\n/**\n * * 목적 : 해당 공지사항의 검색(제목)을 포함한 게시물 위한 API\n *\n * @param {SearchNoticeByHospitalCodeAndTitleVO} searchNoticeByHospitalAndTitle\n * * [SearchNoticeByHospitalCodeAndTitleVO Entity]\n * * * !String noticeTitle\n * * * !String hospitalCode\n * @returns {List<NoticesDTO>} searchList\n * * [notices Entity]\n * * * !String noticeTitle\n * * * !String noticeAuthor\n * * * !String createDate\n * * * !String noticeHeadText\n * * * String noticeHeadImage\n * * * !int noticeCount\n * @author HYEONG YUN KIM\n */\nexport const getNoticesListByTitle = async (searchNoticeByHospitalAndTitle) => {\n  return await axios.get('/notice/search', {\n    params: {\n      searchNoticeByHospitalAndTitle,\n    },\n  });\n};\n\n/**\n * * 목적 : 해당 공지사항을 등록하기 위한 API\n *\n * @param {NoticesDTO} noticeInfo\n * * [notices Entity]\n * * * !String noticeTitle\n * * * !String noticeContent\n * * * !String noticeAuthor\n * * * !LocalDateTime createDate\n * * * !String hospitalCode\n * * * !int memberId\n * * * !String noticeAuthor\n * * * !String noticeHeadText\n * * * String noticeHeadImage\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const createNotice = async (noticeInfo) => {\n  return await axios.post('/notice', noticeInfo);\n};\n\n/**\n * * 목적 : 해당 공지사항의 댓글을 등록하기 위한 API\n *\n * @param {NoticeCommentsDTO} noiceCommentInfo\n * * [noticeComments Entity]\n * * * !int noticeCommentId\n * * * !int memberId\n * * * !int noticeId\n * * * !String memberName\n * * * !String comment\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const addComment = async (noiceCommentInfo) => {\n  return await axios.post('/notice/comment', noiceCommentInfo);\n};\n\n/**\n * * 목적 : 해당 공지사항의 이미지를 서버에 올리고 클라이언트에 URL을 전달하기 위한 API\n *\n * @param {AddNoticeImageVO} noticeImageInfo\n * * [AddNoticeImageVO Entity]\n * * * !String hospitalCode\n * * * !String imageName\n * * * !String base64Content\n * @returns {String} filePath\n * * filePath : 파일저장 경로\n *\n */\nexport const addNoticeImage = async (noticeImageInfo) => {\n  const result = await axios.post('/notice/images', noticeImageInfo);\n  return result.data;\n};\n\n/**\n * * 목적 : 해당 공지사항을 수정하기 위한 API\n *\n * @param {NoticesDTO} noticeInfo\n * * [notices Entity]\n * * * !String noticeTitle\n * * * !String noticeContent\n * * * !String noticeHeadText\n * * * String noticeHeadImage\n * * * !int noticeId\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const modifyNotice = async (noticeInfo) => {\n  return await axios.put('/notice', noticeInfo);\n};\n\n/**\n * * 목적 : 해당 댓글을 수정하기 위한 API\n *\n * @param {UpdateNoticeCommentVO} updateCommentInfo\n * * [UpdateNoticeCommentVO Entity]\n * * * !int noticeCommentId\n * * * !String comment\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const modifyComment = async (updateCommentInfo) => {\n  return await axios.put('/notice/comment', {\n    params: {\n      updateCommentInfo,\n    },\n  });\n};\n\n/**\n * * 목적 : 해당 공지사항을 삭제하기 위한 API\n *\n * @param {number} noticeId\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const removeNotice = async (noticeId) => {\n  return await axios.delete('/notice', {\n    params: {\n      noticeId,\n    },\n  });\n};\n\n/**\n * * 목적 : 해당 댓글을 삭제하기 위한 API\n *\n * @param {number} noticeCommentId\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const removeComment = async (noticeCommentId) => {\n  return await axios.delete('/notice/comment', {\n    params: {\n      noticeCommentId,\n    },\n  });\n};\n\n/**\n * * 목적 : 해당 게시물의 댓글들을 삭제하기 위한 API\n *\n * @param {number} noticeId\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const removeComments = async (noticeId) => {\n  return await axios.delete('/notice/comments', {\n    params: {\n      noticeId,\n    },\n  });\n};\n","import axios from 'axios';\n\n/**\n * * 목적 : 해당 병원의 식별자 코드(hospitalCode)로 TODO 리스트를 출력하기 위한 API\n *\n * @param {String} from\n * @param {String} to\n * @returns coronaData\n * * [todos Entity]\n * * * !String todoContent\n * * * !String hospitalCode\n * * * !String createdDate\n * * * !int todo_id\n * @author HYEONG YUN KIM\n */\nexport const getCoronaData = async (from, to) => {\n  return await axios.get(\n    'https://api.covid19api.com/total/country/kr',\n    {\n      params: {\n        from,\n        to,\n      },\n    },\n  );\n};\n","import axios from 'axios';\n\n/**\n * * 목적 : 해당 병원의 식별자 코드(hospitalCode)로 TODO 리스트를 출력하기 위한 API\n *\n * @param {String} hospitalCode\n * @returns {List<TodosDTO>} todoList\n * * [todos Entity]\n * * * !String todoContent\n * * * !String hospitalCode\n * * * !String createdDate\n * * * !int todo_id\n * @author HYEONG YUN KIM\n */\nexport const getTodosListByHospitalCode = async (hospitalCode) => {\n  return await axios.get('/todo/search/code/', {\n    params: {\n      hospitalCode,\n    },\n  });\n};\n\n/**\n * * 목적 : 해당 임직원의 ID(memberId)로 TODO 리스트를 출력하기 위한 API\n *\n * @param {number} memberId\n * @returns {List<TodosDTO>} todoList\n * * [todos Entity]\n * * * !String todoContent\n * * * !String createdDate\n * * * !int todoId\n * * * !int memberId\n * @author HYEONG YUN KIM\n */\nexport const getTodosListByMemberId = async (memberId) => {\n  return await axios.get('/todo/search/id/', {\n    params: {\n      memberId,\n    },\n  });\n};\n\n/**\n * * 목적 : 해당 TODO 리스트를 등록하기 위한 API\n *\n * @param {TodosDTO} todoInfo\n * * [todos Entity]\n * * * !String todoContent\n * * * LocalDateTime createdDate\n * * * !int memberId\n * * * !String hospitalCode\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const createTodo = async (todoInfo) => {\n  return await axios.post('/todo', todoInfo);\n};\n\n/**\n * * 목적 : 해당 TODO 리스트를 삭제하기 위한 API\n *\n * @param {number} todoId\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const removeTodo = async (todoId) => {\n  return await axios.delete('/todo/', {\n    params: {\n      todoId,\n    },\n  });\n};\n\n/**\n * * 목적 : 해당 TODO의 CHECKED를 1로 수정하기 위한 API\n *\n * @param {number} todoId\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const modifyCheckedIn = async (todoId) => {\n  return await axios.put('todo/in?todoId=' + todoId);\n};\n\n/**\n * * 목적 : 해당 TODO의 CHECKED를 0으로 수정하기 위한 API\n *\n * @param {number} todoId\n * @returns {boolean} result\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nexport const modifyCheckedOut = async (todoId) => {\n  return await axios.put('todo/out?todoId=' + todoId);\n};","import axios from 'axios';\n\n/**\n * * 목적 : 병원에 대한 정보 리스트를 가져오기 위한 API\n * @returns {List<HospitalDTO>} data\n * * !String hospitalCode\n * * !String hospitalName\n * * !String hospitalTel\n * * !String hospitalAddress\n * @author SI HYUN PARK\n */\nexport const getHospitalListInfo = async () => {\n  return await axios.get('/hospital');\n};\n\n/**\n * * 목적 : 병원에 대한 상세정보를 가져오기 위한 API\n * @param {String} hospitalCode\n * @returns {HospitalsDTO} hospitalInfo\n * * !String hospitalCode\n * * !String hospitalName\n * * !String hospitalTel\n * * !String hospitalAddress\n * @author SI HYUN PARK\n */\nexport const getHospitalInfo = async (hospitalCode) => {\n  return await axios.get(`/hospital/${hospitalCode}`);\n};\n\n/**\n * * 목적 : 병원에 대한 정보를 추가하기 위한 API\n * @param {HosptialsDTO} hospitalInfo\n * * !String hospitalName\n * * !String hospitalTel\n * * !String hospitalAddress\n * @returns {boolean} result (등록 작업에 대한 성공 여부)\n * @author SI HYUN PARK\n */\nexport const registerHospitalInfo = async (hospitalInfo) => {\n  return await axios.post('/hospital', hospitalInfo);\n};\n\n/**\n * * 목적 : 병원에 대한 정보를 수정하기 위한 API\n * @param {HospitalsDTO} hospitalInfo\n * * !String hospitalCode\n * * !String hospitalName\n * * !String hospitalTel\n * * !String hospitalAddress\n * @returns {boolean} result (수정 작업에 대한 성공 여부)\n * @author SI HYUN PARK\n */\nexport const modifyHospitalsInfo = async (hospitalInfo) => {\n  return await axios.put('/hospital', hospitalInfo);\n};\n\n/**\n * * 목적 : 병원에 대한 정보를 삭제하기 위한 API\n * @param {String} hospitalCode\n * @returns {boolean} result (삭제 작업에 대한 성공 여부)\n * @author SI HYUN PARK\n */\nexport const removeHospitalInfo = async (hospitalCode) => {\n  return await axios.delete(`/hospital/${hospitalCode}`);\n};\n","import moment from 'moment';\nimport React from 'react';\nimport styled from 'styled-components';\nimport Divider from '@material-ui/core/Divider';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport { ListItem } from '@material-ui/core';\n\n\nconst NoticeContainer = styled.div`\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  padding: 1rem;\n  width: 100%;\n\n  .title,\n  .divider {\n    margin-bottom: 0.5rem;\n  }\n\n  .description {\n    margin-top: 1rem;\n    display: flex;\n    .text-margin {\n      margin-left: 0.5rem;\n    }\n  }\n`;\n\n/**\n * 이 페이지 컴포넌트는 공지사항의 리스트를 보여주는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - NoticeItem\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst NoticeItem = ({ data }) => {\n  // 부모 컴포넌트에서 받은 NOTICE의 data  \n  const { noticeTitle, createDate, noticeAuthor } = data;\n  return (\n    <ListItem>\n      <NoticeContainer>\n        <StyledTypography\n          variant=\"h5\"\n          component=\"h4\"\n          weight={9}\n          className=\"title\"\n        >\n          {noticeTitle}\n        </StyledTypography>\n        <Divider className=\"divider\" />\n        <div className=\"description\">\n          <StyledTypography variant=\"subtitle1\" component=\"span\" weight={7}>\n            작성일 :\n          </StyledTypography>\n\n          <StyledTypography\n            variant=\"subtitle1\"\n            component=\"span\"\n            weight={3}\n            className=\"text-margin\"\n          >\n            {moment(createDate).format('YY-MM-DD')}\n          </StyledTypography>\n          <StyledTypography\n            variant=\"subtitle1\"\n            component=\"span\"\n            weight={3}\n            className=\"text-margin\"\n          >\n            |\n          </StyledTypography>\n          <StyledTypography\n            variant=\"subtitle1\"\n            component=\"span\"\n            weight={7}\n            className=\"text-margin\"\n          >\n            작성자 :\n          </StyledTypography>\n\n          <StyledTypography\n            variant=\"subtitle1\"\n            component=\"span\"\n            weight={3}\n            className=\"text-margin\"\n          >\n            {noticeAuthor}\n          </StyledTypography>\n        </div>\n      </NoticeContainer>\n    </ListItem>\n  );\n};\n\nexport default React.memo(NoticeItem);\n","import styled from 'styled-components';\nimport Container from '@material-ui/core/Container';\n\nconst StyledContainer = styled(Container)`\n  width: 100%;\n  background-color: ${({ bgColor }) => bgColor};\n  border-radius: 12px;\n  padding: ${({ padding }) => {\n    return padding + 'rem';\n  }};\n\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nStyledContainer.defaultProps = {\n  bgColor: 'white',\n  padding: '1',\n};\n\nexport default StyledContainer;\n","export const toBase64 = (file) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n  });\n","import '@toast-ui/editor/dist/toastui-editor.css';\nimport '@toast-ui/editor/dist/i18n/ko-kr';\nimport { Editor } from '@toast-ui/react-editor';\nimport StyledButton from 'components/common/button/StyledButton';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\n\nimport React, { Fragment, useRef, useState } from 'react';\nimport { BsListUl, BsPencilSquare } from 'react-icons/bs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActiveStep } from 'redux/features/notice/noticeSlice';\nimport { useSnackbar } from 'notistack';\nimport { createNotice, addNoticeImage } from 'apis/noticeAPI';\nimport { v4 as uuid } from 'uuid';\nimport { toBase64 } from 'components/common/utils';\n/**\n * 이 페이지 컴포넌트는 공지사항 수정하기 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - Header\n * - NoticeDrawerSuccess\n * - NoticeDrawerMain\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst NoticeDrawerWrite = () => {\n  // 해당 공지사항의 제목을 설정하기 위한 State\n  const [noticeTitle, setNoticeTitle] = useState();\n  // Img 리스트를 설정하기 위한 State\n  const [imgList, setImgList] = useState([]);\n  const editorRef = useRef(null);\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const hospitalCode = useSelector(\n    (state) => state.common.loginInfo.hospitalCode,\n  );\n  const memberId = useSelector((state) => state.common.loginInfo.memberId);\n  const memberName = useSelector((state) => state.common.loginInfo.memberName);\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const handleChange = (event) => {\n    setNoticeTitle(event.target.value);\n  };\n\n  const handleAdd = async (event) => {\n    try {\n      const editorContent = editorRef.current.getInstance().getHTML();\n      if (editorContent === '' || noticeTitle === '') {\n        handleAlert('error', '제목 혹은 내용이 비어있습니다.');\n        return;\n      }\n\n      const noticeText = editorContent.replace(/<(?:.|\\n)*?>/gm, '');\n\n      if (noticeText === '') {\n        handleAlert('error', '내용을 입력해야합니다.');\n        return;\n      }\n      let noticeHeadImage = '';\n      const noticeHeadText = editorContent\n        .replace(/<(?:.|\\n)*?>/gm, '')\n        .substring(0, 50);\n\n      if (imgList.length > 0) {\n        noticeHeadImage = imgList[0];\n      }\n      if (imgList.length === 0) {\n        noticeHeadImage = '';\n      }\n      const sendInfo = {\n        noticeTitle: noticeTitle,\n        createDate: new Date().toJSON().split('.')[0],\n        noticeContent: editorContent,\n        noticeAuthor: memberName,\n        hospitalCode,\n        memberId,\n        noticeHeadText,\n        noticeHeadImage,\n      };\n\n      await createNotice(sendInfo);\n\n      dispatch(setActiveStep('SUCCESS'));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div style={{ marginTop: '2rem', display: 'flex' }}>\n        <div style={{ flex: 0.8, alignSelf: 'center' }}>\n          <h2 style={{ fontWeight: '800' }}>제목</h2>\n        </div>\n        <div style={{ flex: 6 }}>\n          <StyledInputBase\n            value={noticeTitle}\n            onChange={handleChange}\n            placeholder=\"제목을 입력해주세요.\"\n          />\n        </div>\n      </div>\n      <div style={{ marginTop: '2rem' }}>\n        <Editor\n          previewStyle=\"vertical\"\n          height=\"500px\"\n          initialEditType=\"wysiwyg\"\n          placeholder=\"내용을 입력해주세요.\"\n          language=\"ko-KR\"\n          hooks={{\n            addImageBlobHook: async (blob, callback) => {\n              try {\n                let ext = '.jpg';\n\n                if (blob.type === 'image/jpeg') {\n                  ext = '.jpg';\n                } else if (blob.type === 'image/gif') {\n                  ext = '.gif';\n                } else if (blob.type === 'image/png') {\n                  ext = '.png';\n                } else if (blob.type === 'image/webp') {\n                  ext = '.webp';\n                }\n\n                const imageName = uuid() + ext;\n\n                const base64Content = await toBase64(blob);\n\n                const sendInfo = {\n                  hospitalCode,\n                  imageName,\n                  base64Content,\n                };\n\n                const imagePath = await addNoticeImage(sendInfo);\n\n                const completeURL = `${process.env.REACT_APP_SERVER_PATH}/image?path=${imagePath}`;\n                console.log(completeURL);\n\n                setImgList((prevState) => {\n                  const newState = prevState;\n                  newState.push(completeURL);\n                  return newState;\n                });\n\n                callback(completeURL, 'hello world');\n                return false;\n              } catch (error) {\n                if (error.response.data !== undefined) {\n                  const { message } = error.response.data;\n                  handleAlert('error', message);\n                }\n                handleAlert('error', error);\n                return false;\n              }\n            },\n          }}\n          ref={editorRef}\n        />\n      </div>\n      <div\n        style={{\n          marginTop: '20px',\n          display: 'flex',\n        }}\n      >\n        <div style={{ flex: '2', marginRight: '10px' }}>\n          <StyledButton\n            bgColor=\"rgb(226,153,51)\"\n            color=\"white\"\n            onClick={handleAdd}\n          >\n            <BsPencilSquare style={{ marginRight: '5px' }} />\n            게시물 등록\n          </StyledButton>\n        </div>\n        <div style={{ flex: '2' }}>\n          <StyledButton\n            bgColor=\"rgb(8,78,127)\"\n            color=\"white\"\n            onClick={() => dispatch(setActiveStep('MAIN'))}\n          >\n            <BsListUl style={{ marginRight: '5px' }} />\n            목록\n          </StyledButton>\n        </div>\n        <div style={{ flex: '6' }}></div>\n      </div>\n    </Fragment>\n  );\n};\nexport default NoticeDrawerWrite;\n","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActiveStep } from 'redux/features/notice/noticeSlice';\nimport StyledButton from 'components/common/button/StyledButton';\n/**\n * 이 페이지 컴포넌트는 공지사항 작성/수정/삭제가 완료된 후 넘어가게 되는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - NoticeDrawerMain\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst NoticeDrawerSuccess = () => {\n  const dispatch = useDispatch();\n\n  const activeStep = useSelector((state) => state.notice.activeStep);\n\n  return (\n    <Fragment>\n      <div style={{ marginTop: '3rem', display: 'flex' }}></div>\n      <div\n        className=\"right-side\"\n        style={{ flex: 1, display: 'flex', justifyContent: 'center' }}\n      >\n        <img src=\"/assets/image/verified-account.png\" alt=\"Logo\" width=\"50%\" />\n      </div>\n      {activeStep === 'SUCCESS' && (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <h2 style={{ fontWeight: '800' }}>게시물 등록이 완료 되었습니다.</h2>\n        </div>\n      )}\n      {activeStep === 'MODIFYSUCCESS' && (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <h2 style={{ fontWeight: '800' }}>게시물 수정이 완료 되었습니다.</h2>\n        </div>\n      )}\n      {activeStep === 'DELETE' && (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <h2 style={{ fontWeight: '800' }}>게시물 삭제가 완료 되었습니다.</h2>\n        </div>\n      )}\n\n      <div\n        style={{\n          marginTop: '20px',\n          display: 'flex',\n        }}\n      >\n        <div style={{ flex: '2' }}></div>\n        \n        <div style={{ flex: '2' }}>\n          <StyledButton\n            bgColor=\"rgb(8,78,127)\"\n            color=\"white\"\n            onClick={() => dispatch(setActiveStep('MAIN'))}\n          >\n            목록으로 이동\n          </StyledButton>\n        </div>\n        <div style={{ flex: '2' }}></div>\n      </div>\n    </Fragment>\n  );\n};\nexport default NoticeDrawerSuccess;\n","import React from 'react';\nimport styled from 'styled-components';\n\n/**\n * 이 페이지 컴포넌트는 공지사항의 리스트의 스타일을 설정하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - NoticeDrawerItem\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst NoticeDrawerItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 0.5rem;\n  .left-side {\n    padding: 10px;\n    flex: 2;\n    .avatar-container {\n      display: flex;\n      margin: 0.5rem;\n      flex: 2;\n      align-items: center;\n      font-weight: 600;\n    }\n    .textTitle-container {\n      display: flex;\n      margin-left: 15px;\n      font-weight: 750;\n      font-size: 1.3rem;\n      margin-bottom: 10px;\n    }\n    .textContent-container {\n      display: flex;\n      margin-left: 15px;\n      margin-bottom: 10px;\n      color: gray;\n    }\n    .textDate-container {\n      display: flex;\n      margin-left: 15px;\n      color: rgb(107, 104, 104);\n    }\n  }\n  .right-side {\n    align-items: center;\n    \n    flex: 1;\n  }\n`;\n\nexport default React.memo(NoticeDrawerItem);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { IconButton, TablePagination } from '@material-ui/core';\nimport moment from 'moment';\nimport { BsPencilSquare } from 'react-icons/bs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { motion } from 'framer-motion';\nimport {\n  setNoticeCurrentIndex,\n  setActiveStep,\n} from 'redux/features/notice/noticeSlice';\nimport SearchBox from 'components/common/search/SearchBox';\nimport NoticeDrawerItem from 'components/dashboard/NoticeDrawerItem';\nimport StyledButton from 'components/common/button/StyledButton';\nimport { getNoticesList } from 'apis/noticeAPI';\nimport { GrPowerReset } from 'react-icons/gr';\n/**\n * 이 페이지 컴포넌트는 공지사항 메인을 보여주기 위해 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - Header\n * - NoticeDrawerRead\n * - NoticeDrawerWrite\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst NoticeDrawerMain = () => {\n  // 공지사항의 제목 검색을 입력하기 위한 State\n  const [searchVal, setSearchVal] = useState('');\n  // 페이지를 설정하기 위한 State\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  // 공지사항 리스트를 저장하기 위한 State\n  const [notice, setNotice] = React.useState([]);\n\n  const hospitalCode = useSelector(\n    (state) => state.common.loginInfo.hospitalCode,\n  );\n  const dispatch = useDispatch();\n  const buttonSetting = {\n    rest: { scale: 1 },\n    hover: { scale: 1.2 },\n    pressed: { scale: 0.95 },\n  };\n  const handleChange = (e) => {\n    setSearchVal(e.target.value);\n    console.log(e.target.value);\n  };\n\n  useEffect(() => {\n    console.log(searchVal);\n  }, [searchVal]);\n\n  useEffect(() => {\n    const work = async () => {\n      try {\n        const response = await getNoticesList(hospitalCode);\n        setNotice(response.data.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    work();\n  }, []); //***** [] 없으면 무한실행합니다.\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleClick = (data) => {\n    dispatch(setNoticeCurrentIndex(data.noticeId));\n    dispatch(setActiveStep('READ'));\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(event.target.value);\n    setPage(0);\n  };\n\n  const matchData = notice.filter((data) =>\n    data.noticeTitle.includes(searchVal),\n  );\n\n  const handleReset = () => {\n    setSearchVal('');\n  };\n\n  return (\n    <Fragment>\n      <div style={{ marginTop: '3rem', display: 'flex' }}>\n        <div style={{ flex: 1, alignSelf: 'center', marginRight: '20px' }}>\n          <StyledButton\n            bgColor=\"rgb(226,153,51)\"\n            color=\"white\"\n            width=\"100%\"\n            onClick={() => dispatch(setActiveStep('WRITE'))}\n          >\n            <BsPencilSquare style={{ marginRight: '5px' }} />\n            글쓰기\n          </StyledButton>\n        </div>\n        <div style={{ flex: 3 }}>\n          <SearchBox\n            onChange={handleChange}\n            setSearchVal={setSearchVal}\n            placeholder=\"제목을 입력해주세요.\"\n          />\n        </div>\n        <div\n          className=\"icon-area\"\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n\n            paddingTop: '0.5rem',\n            paddingBottom: '0.5rem',\n          }}\n        >\n          <motion.div\n            variants={buttonSetting}\n            initial=\"rest\"\n            whileHover=\"hover\"\n            whileTap=\"pressed\"\n          >\n            <IconButton\n              type=\"button\"\n              size=\"small\"\n              style={{\n                border: '1px solid rgba(0,0,0,0.12)',\n                marginLeft: '0.5rem',\n                marginRight: '0.5rem',\n                padding: '0.5rem',\n              }}\n              onClick={() => handleReset()}\n            >\n              <GrPowerReset />\n            </IconButton>\n          </motion.div>\n        </div>\n      </div>\n      <NoticeDrawerItem>\n        {matchData\n          .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n          .map((data) => (\n            <Fragment key={data.noticeId}>\n              <div\n                style={{\n                  display: 'flex',\n                  marginTop: '10px',\n                  cursor: 'pointer',\n                }}\n                onClick={() => {\n                  handleClick(data);\n                }}\n              >\n                <div className=\"left-side\" style={{ flex: 2 }}>\n                  <div className=\"avatar-container\">\n                    <h4 style={{ marginLeft: '5px' }}>{data.noticeAuthor}</h4>\n                  </div>\n                  <div className=\"textTitle-container\">\n                    <div key={data.noticeId} align=\"left\">\n                      {data.noticeTitle}\n                    </div>\n                  </div>\n                  <div className=\"textContent-container\">\n                    <div align=\"left\">{data.noticeHeadText}</div>\n                  </div>\n                  <div className=\"textDate-container\">\n                    <div align=\"left\">\n                      {moment(data.createDate).format('YY-MM-DD')}\n                    </div>\n                  </div>\n                </div>\n                {data.noticeHeadImage ? (\n                  <div className=\"right-side\" style={{ flex: 1 }}>\n                    <img src={data.noticeHeadImage} alt=\"Logo\" width=\"70%\" maxWidth=\"150px\" maxHeight=\"75px\"/>\n                  </div>\n                ) : (\n                  <div className=\"right-side\" style={{ flex: 1 }}></div>\n                )}\n              </div>\n            </Fragment>\n          ))}\n      </NoticeDrawerItem>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 15]}\n        component=\"div\"\n        count={matchData.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Fragment>\n  );\n};\n\nexport default NoticeDrawerMain;\n","import React, { Fragment } from 'react';\nimport { makeStyles, Modal, Backdrop, IconButton } from '@material-ui/core';\nimport { AiOutlineClose, AiOutlineCheckCircle } from 'react-icons/ai';\nimport { BsFillTrashFill } from 'react-icons/bs';\nimport { useSnackbar } from 'notistack';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport { removeComment } from 'apis/noticeAPI';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyItems: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n/**\n * 목적 : 공지사항의 게시글의 댓글을 삭제하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * @returns\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nconst DeleteCommentModal = ({\n  isOpenCommentModal,\n  setOpenCommentModal,\n  noticeCommentId,\n  setChanged,\n}) => {\n  const classes = useStyles();\n  const { breakpoint } = useWindowSize();\n\n  // 알람 셋팅\n  const { enqueueSnackbar } = useSnackbar();\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 취소 버튼 클릭시 Modal의 상태값을 false로 바꿔준다.\n  const handleClose = () => {\n    setOpenCommentModal(false);\n  };\n\n\n  // 삭제 버튼 클릭시 해당 댓글을 삭제한다.\n  const handleRemoveComment = async (event) => {\n    try {\n      console.log(noticeCommentId);\n      await removeComment(noticeCommentId);\n      handleAlert('success', '삭제가 완료되었습니다.');\n\n      setChanged(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpenCommentModal}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        style={{\n          justifyContent: 'center',\n        }}\n      >\n        <SpringFade in={isOpenCommentModal}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <div>\n                  <IconButton>\n                    <AiOutlineClose size={24} onClose={handleClose} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              <div>\n                <h2\n                  style={{\n                    textAlign: 'center',\n                  }}\n                >\n                  <StyledTypography\n                    style={{\n                      fontWeight: '800',\n                      fontSize: '2.25rem',\n                    }}\n                  >\n                    정말로 삭제하겠습니까?\n                  </StyledTypography>\n                  <img\n                    style={{\n                      border: '5px solid',\n                      borderColor: 'rgba(0,0,0,0.1)',\n                    }}\n                    src=\"/assets/image/notFound.png\"\n                    alt=\"Logo\"\n                    width=\"50%\"\n                  />\n                </h2>\n              </div>\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  marginTop: '1rem',\n                }}\n              >\n                <StyledButton\n                  bgColor=\"rgb(8,78,127)\"\n                  color=\"white\"\n                  width=\"150px\"\n                  onClick={handleRemoveComment}\n                >\n                  <AiOutlineCheckCircle style={{ marginRight: '5px' }} />\n                  확인\n                </StyledButton>\n                <StyledButton\n                  bgColor=\"rgb(216,89,56)\"\n                  color=\"white\"\n                  width=\"150px\"\n                  onClose={handleClose}\n                >\n                  <BsFillTrashFill style={{ marginRight: '5px' }} />\n                  취소\n                </StyledButton>\n              </div>\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DeleteCommentModal;\n","import React from 'react';\nimport { css } from 'styled-components';\nimport SyncLoader from 'react-spinners/SyncLoader';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: #ffa8a8;\n`;\n\nconst SyncSpinner = ({ isLoading }) => (\n  <div style={{ width: '100%', display: 'flex' }}>\n    <SyncLoader color=\"#ffa8a8\" loading={isLoading} css={override} size={30} />\n  </div>\n);\n\nexport default SyncSpinner;\n","import React, { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setActiveStep } from 'redux/features/notice/noticeSlice';\nimport { makeStyles, Modal, Backdrop, IconButton } from '@material-ui/core';\nimport { AiOutlineClose, AiOutlineCheckCircle } from 'react-icons/ai';\nimport { BsFillTrashFill } from 'react-icons/bs';\nimport { useSnackbar } from 'notistack';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport { removeComments, removeNotice } from 'apis/noticeAPI';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyItems: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n/**\n * 목적 : 공지사항의 게시글을 삭제하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * DeleteModal\n * @returns \n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nconst DeleteModal = ({ isOpenModal, setOpenModal, noticeId, comment }) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const { breakpoint } = useWindowSize();\n  // 알람 셋팅\n  const { enqueueSnackbar } = useSnackbar();\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 취소 버튼 클릭시 Modal의 상태값을 false로 바꿔준다.\n  const handleClose = () => {\n    setOpenModal(false);\n  };\n\n  \n  // 삭제 버튼 클릭시 해당 공지사항의 댓글을 먼저\n  // 그리고 공지사항을 삭제한다.\n  const handleRemoveNotice = async (event) => {\n    try {\n      if(comment.length !== 0) {\n        await removeComments(noticeId);\n      }\n      await removeNotice(noticeId);\n      handleAlert('success', '삭제가 완료되었습니다.');\n      dispatch(setActiveStep('DELETE'));\n    } catch (error) {      \n      console.log(error.response);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpenModal}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        style={{\n          justifyContent: 'center',\n        }}\n      >\n        <SpringFade in={isOpenModal}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n              \n                <div>\n                  <IconButton>\n                    <AiOutlineClose size={24} onClose={handleClose} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              <div>\n                <h2\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                  }}\n                >\n                  <StyledTypography\n                    style={{\n                      fontWeight: '800',\n                      fontSize: '2.25rem',\n                    }}\n                  >\n                    정말로 삭제하겠습니까?\n                  </StyledTypography>\n                  <img style={{border: \"5px solid\", borderColor: \"rgba(0,0,0,0.1)\"}}\n                  src=\"/assets/image/notFound.png\" alt=\"Logo\" width=\"50%\" />\n                </h2>\n              </div>\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  marginTop: '1rem'\n\n                }}\n              >\n                <StyledButton\n                  bgColor=\"rgb(8,78,127)\"\n                  color=\"white\"\n                  width=\"150px\"\n                  onClick={handleRemoveNotice}\n                >\n                  <AiOutlineCheckCircle style={{ marginRight: '5px' }} />\n                  확인\n                </StyledButton>\n                <StyledButton\n                  bgColor=\"rgb(216,89,56)\"\n                  color=\"white\"\n                  width=\"150px\"\n                  onClose={handleClose}\n                >\n                  <BsFillTrashFill style={{ marginRight: '5px' }} />\n                  취소\n                </StyledButton>\n              </div>\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DeleteModal;\n","import styled from 'styled-components';\n\nconst TitleHeaderComment = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0.5rem;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n\n  span:first-child {\n    font-weight: 600;\n    font-size: 1.8rem;\n    margin-right: 0.5rem;\n  }\n\n  span:nth-child(2) {\n    font-size: 1.8rem;\n    font-weight: 300;\n  }\n`;\nexport default TitleHeaderComment;\n","import React, { Fragment, useState } from 'react';\nimport styled from 'styled-components';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport { useSnackbar } from 'notistack';\nimport AddIcon from '@material-ui/icons/Add';\nimport { addComment } from 'apis/noticeAPI';\n\nconst SearchContainer = styled.div`\n  padding: 0.5rem;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  background-color: aliceblue;\n`;\n\nconst SearchBase = styled(InputBase)`\n  margin-left: 8px;\n  flex: 1;\n  font-family: 'Spoqa Han Sans Neo', 'Noto Sans KR', sans-serif;\n  font-weight: 700;\n`;\n\nconst InputCommentBox = ({\n  setInputComment,\n  placeholder,\n  noRemove,\n  memberId,\n  noticeId,\n  memberName,\n  setChanged,\n}) => {\n  const [inputVal, setInputVal] = useState('');\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAdd = async (event) => {\n    try {\n      setInputComment(inputVal);\n      const sendInfo = {\n        createdDate: '2021-12-24T03:13',\n        comment: inputVal,\n        memberId,\n        memberName,\n        noticeId,\n      };\n      console.log('sendInfo : ', sendInfo);\n      if (inputVal === '') {\n        handleAlert('error', '값이 입력되지 않았습니다.');\n        return;\n      }\n      await addComment(sendInfo);\n      setInputVal('');\n      handleAlert('success', '등록이 완료되었습니다.');\n      setChanged(true);\n    } catch (error) {\n      console.log(error.response.data);\n    }\n  };\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n  const handleChange = (event) => {\n    setInputVal(event.target.value);\n  };\n\n  const handleKeyPress = (event) => {\n    const { key } = event;\n    if (key === 'Enter' && inputVal) {\n      setInputComment(inputVal);\n      if (noRemove === undefined) {\n        setTimeout(() => {\n          setInputVal('');\n        }, 10);\n      }\n    } else if (key === 'Enter' && !inputVal) {\n      handleAlert('error', '값이 존재하지 않습니다.');\n    }\n  };\n\n  return (\n    <Fragment>\n      <SearchContainer>\n        <SearchBase\n          value={inputVal}\n          placeholder={placeholder}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n        />\n        <IconButton type=\"submit\" onClick={handleAdd}>\n          <AddIcon />\n        </IconButton>\n      </SearchContainer>\n    </Fragment>\n  );\n};\n\nexport default InputCommentBox;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BsPencilSquare, BsListUl, BsFillTrashFill } from 'react-icons/bs';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'html-react-parser';\nimport Typography from '@material-ui/core/Typography';\nimport { MdRemoveCircleOutline } from 'react-icons/md';\nimport {\n  IconButton,\n  Avatar,\n  ListItemAvatar,\n  ListItemText,\n  Divider,\n  ListItem,\n  List,\n} from '@material-ui/core';\nimport moment from 'moment';\nimport DeleteCommentModal from '../modal/DeleteCommentModal';\nimport { setActiveStep } from 'redux/features/notice/noticeSlice';\nimport SyncSpinner from 'components/common/spinner/SyncSpinner';\nimport StyledButton from 'components/common/button/StyledButton';\nimport DeleteModal from 'components/notice/modal/DeleteNoticeModal';\nimport { getNoticeList, getNoticeCommentsList } from 'apis/noticeAPI';\nimport TitleHeaderComment from 'components/notice/drawer/TitleHeaderComment';\nimport InputCommentBox from 'components/notice/drawer/InputCommentBox';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n  inline: {\n    display: 'inline',\n  },\n}));\n\n/**\n * 이 페이지 컴포넌트는 공지사항의 세부사항을 보여주는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - Header\n * - NoticeDrawerModify\n * - NoticeDrawerMain\n * - DeleteModal\n * - DeleteCommentModal\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst NoticeDrawerRead = () => {\n  const classes = useStyles();\n  // 해당 공지사항의 삭제 Modal의 Open 여부를 설정하기 위한 State\n  const [isOpenModal, setOpenModal] = useState(false);\n  // 댓글 삭제 Modal의 Open 여부를 설정하기 위한 State\n  const [isOpenCommentModal, setOpenCommentModal] = useState(false);\n  // 해당 공지사항의 정보를 저장하기 위한 State\n  const [notice, setNotice] = React.useState({});\n  // 해당 공지사항의 댓글을 저장하기 위한 State\n  const [comment, setComment] = React.useState([]);\n  // 해당 공지사항의 댓글의 입력값을 설정하기 위한 State\n  const [inputComment, setInputComment] = useState('');\n  // 댓글의 삭제/생성 여부를 판별을 설정하기 위한 State\n  const [changed, setChanged] = useState(false);\n  // Spinner의 Loading 여부를 설정하기 위한 State\n  const [isLoading, setLoading] = useState(true);\n  // 리덕스에서 값을 불러오기 위한 셋팅\n  const dispatch = useDispatch();\n  const currentIndex = useSelector((state) => state.notice.noticeCurrentIndex);\n  const memberName = useSelector((state) => state.common.loginInfo.memberName);\n  const memberId = useSelector((state) => state.common.loginInfo.memberId);\n\n  // 해당 공지사항의 정보 / 댓글을 불러오기 위한 useEffect\n  useEffect(() => {\n    setLoading(true);\n    const getContentWithComment = async () => {\n      try {\n        // 1. 게시물 가져오기\n        const noticeContent = await getNoticeList(currentIndex);\n        setNotice(noticeContent);\n\n        // 2. 덧글 가져오기\n        const commentContent = await getNoticeCommentsList(currentIndex);\n\n        setComment(commentContent);\n        // 3. 로딩 상태 바꾸기\n        setLoading(false);\n        setChanged(false);\n      } catch (error) {\n        if (error.response.data.content === 'uri=/api/v1/notice/comments') {\n          setComment([]);\n        }\n        setLoading(false);\n        setChanged(false);\n      }\n    };\n    getContentWithComment();\n  }, [changed]);\n\n  // 댓글의 값이 변할 경우 이를 inputComment에 셋팅한다.\n  const handleChange = (e) => {\n    setInputComment(e.target.value);\n  };\n  return (\n    <Fragment>\n      {isLoading && (\n        <div\n          style={{\n            width: '100%',\n            height: '90vh',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <SyncSpinner />\n        </div>\n      )}\n      {!isLoading && (\n        <Fragment>\n          <div style={{ display: 'flex', marginTop: '10px' }}>\n            <div className=\"left-side\" style={{ display: 'flex', flex: 1 }}>\n              <img src=\"/assets/image/doctorface.png\" alt=\"Logo\" width=\"70%\" />\n            </div>\n            <div\n              className=\"left-side\"\n              style={{\n                flex: 8,\n                display: 'flex',\n                marginLeft: '5px',\n                flexDirection: 'column',\n                justifyContent: 'center',\n              }}\n            >\n              <div className=\"avatar-container\">\n                <h3 style={{ fontWeight: '600' }}>{notice.noticeAuthor}</h3>\n              </div>\n              <div className=\"textDate-container\">\n                <div\n                  style={{ fontWeight: '500', marginTop: '5px', color: 'gray' }}\n                >\n                  {moment(notice.createDate).format('YY-MM-DD dd요일 a h:mm')}\n                </div>\n              </div>\n            </div>\n            <div\n              style={{\n                flex: 1,\n                fontWeight: '500',\n                marginTop: '5px',\n                color: 'gray',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              조회수 : {notice.noticeCount}\n            </div>\n          </div>\n          <div\n            style={{ marginTop: '2rem', marginBottom: '2rem', display: 'flex' }}\n          >\n            <h2\n              style={{\n                fontWeight: '600',\n                fontSize: '2rem',\n              }}\n            >\n              {notice.noticeTitle}\n            </h2>\n          </div>\n          <hr />\n          <div style={{ display: 'flex' }}>\n            <h2\n              style={{\n                fontWeight: '500',\n                padding: '0.5rem',\n                display: 'flex',\n                marginTop: '0.5rem',\n                marginBottom: '0.5rem',\n                alignItems: 'center',\n              }}\n            >\n              {parse(notice.noticeContent.toString())}\n            </h2>\n          </div>\n\n          <hr />\n          <TitleHeaderComment>\n            <span>댓글 보기</span>\n          </TitleHeaderComment>\n          <div>\n            <InputCommentBox\n              onChange={handleChange}\n              setInputComment={setInputComment}\n              memberName={memberName}\n              memberId={memberId}\n              noticeId={currentIndex}\n              setChanged={setChanged}\n              placeholder=\"댓글을 입력해주세요. \"\n            />\n          </div>\n\n          {comment.map((data, index) => (\n            <List className={classes.root} key={'commentNum' + index}>\n              <ListItem alignItems=\"flex-start\">\n                <ListItemAvatar>\n                  <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n                </ListItemAvatar>\n                <ListItemText\n                  primary={data.comment}\n                  secondary={\n                    <React.Fragment>\n                      <Typography\n                        component=\"span\"\n                        variant=\"body2\"\n                        className={classes.inline}\n                        color=\"textPrimary\"\n                      >\n                        {data.memberName}\n                      </Typography>\n                    </React.Fragment>\n                  }\n                />\n                {memberId === data.memberId ? (\n                  <IconButton\n                    onClick={() => {\n                      setOpenCommentModal((prevState) => !prevState);\n                    }}\n                  >\n                    <DeleteCommentModal\n                      isOpenCommentModal={isOpenCommentModal}\n                      setOpenCommentModal={setOpenCommentModal}\n                      noticeCommentId={data.noticeCommentId}\n                      setChanged={setChanged}\n                    />\n                    <MdRemoveCircleOutline\n                      size={20}\n                      style={{ color: '#ff6b6b' }}\n                    />\n                  </IconButton>\n                ) : (\n                  <Fragment></Fragment>\n                )}\n              </ListItem>\n              <Divider variant=\"inset\" component=\"li\" />\n            </List>\n          ))}\n\n          {notice.memberId === memberId ? (\n            <div\n              style={{\n                marginTop: '20px',\n                display: 'flex',\n              }}\n            >\n              <div style={{ flex: '2', marginRight: '10px' }}>\n                <StyledButton\n                  bgColor=\"rgb(8,78,127)\"\n                  color=\"white\"\n                  onClick={() => dispatch(setActiveStep('MAIN'))}\n                >\n                  <BsListUl style={{ marginRight: '5px' }} />\n                  목록\n                </StyledButton>\n              </div>\n              <div style={{ flex: '2', marginRight: '10px' }}>\n                <StyledButton\n                  bgColor=\"rgb(226,153,51)\"\n                  color=\"white\"\n                  onClick={() => dispatch(setActiveStep('MODIFY'))}\n                >\n                  <BsPencilSquare style={{ marginRight: '5px' }} />\n                  수정\n                </StyledButton>\n              </div>\n              <div style={{ flex: '2' }}>\n                <StyledButton\n                  bgColor=\"rgb(216,89,56)\"\n                  color=\"white\"\n                  onClick={() => {\n                    setOpenModal((prevState) => !prevState);\n                  }}\n                >\n                  <DeleteModal\n                    isOpenModal={isOpenModal}\n                    setOpenModal={setOpenModal}\n                    noticeId={currentIndex}\n                    comment={comment}\n                  />\n                  <BsFillTrashFill style={{ marginRight: '5px' }} />\n                  삭제\n                </StyledButton>\n              </div>\n              <div style={{ flex: '6' }}></div>\n            </div>\n          ) : (\n            <div\n              style={{\n                marginTop: '20px',\n                display: 'flex',\n              }}\n            >\n              <div style={{ flex: '2', marginRight: '10px' }}>\n                <StyledButton\n                  bgColor=\"rgb(8,78,127)\"\n                  color=\"white\"\n                  onClick={() => dispatch(setActiveStep('MAIN'))}\n                >\n                  <BsListUl style={{ marginRight: '5px' }} />\n                  목록\n                </StyledButton>\n              </div>\n              <div style={{ flex: '2', marginRight: '10px' }}></div>\n              <div style={{ flex: '2', marginRight: '10px' }}></div>\n              <div style={{ flex: '4' }}></div>\n            </div>\n          )}\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\nexport default NoticeDrawerRead;\n","import React, { Fragment, useEffect, useState, useRef } from 'react';\nimport { BsPencilSquare, BsListUl } from 'react-icons/bs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Editor } from '@toast-ui/react-editor';\nimport { useSnackbar } from 'notistack';\nimport { setActiveStep } from 'redux/features/notice/noticeSlice';\nimport StyledButton from 'components/common/button/StyledButton';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport { getNoticeList, modifyNotice, addNoticeImage } from 'apis/noticeAPI';\nimport SyncSpinner from 'components/common/spinner/SyncSpinner';\nimport { v4 as uuid } from 'uuid';\nimport { toBase64 } from 'components/common/utils';\n/**\n * 이 페이지 컴포넌트는 공지사항 수정하기 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - Header\n * - NoticeDrawerSuccess\n * - NoticeDrawerMain\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst NoticeDrawerModify = () => {\n  // Spinner의 Loading 여부를 설정하기 위한 State\n  const [isLoading, setLoading] = useState(true);\n  // 해당 공지사항을 저장하기 위한 State\n  const [notice, setNotice] = React.useState({});\n  // 해당 공지사항의 제목을 수정하기 위한 State\n  const [noticeTitle, setNoticeTitle] = useState();\n  // Img 리스트를 설정하기 위한 State\n  const [imgList, setImgList] = useState([]);\n  const editorRef = useRef(null);\n  // 리덕스에 저장되어 있는 현재 공지사항의 noticeId 가져오기\n  const currentIndex = useSelector((state) => state.notice.noticeCurrentIndex);\n  // 리덕스에 저장되어 있는 hospitalCode 가져오기\n  const hospitalCode = useSelector(\n    (state) => state.common.loginInfo.hospitalCode,\n  );\n  const dispatch = useDispatch();\n  // 알람 설정 세팅\n  const { enqueueSnackbar } = useSnackbar();\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const handleChange = (e) => {\n    setNoticeTitle(e.target.value);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    const work = async () => {\n      try {\n        const noticeContent = await getNoticeList(currentIndex);\n        setNotice(noticeContent);\n        setNoticeTitle(noticeContent.noticeTitle);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n    work();\n  }, []); //***** [] 없으면 무한실행합니다.\n\n  const handleModify = async () => {\n    try {\n      const editorContent = editorRef.current.getInstance().getHTML();\n      if (editorContent === '' || noticeTitle === '') {\n        handleAlert('error', '제목 혹은 내용이 비어있습니다.');\n        return;\n      }\n      const noticeText = editorContent.replace(/<(?:.|\\n)*?>/gm, '');\n\n      if (noticeText === '') {\n        handleAlert('error', '내용을 입력해야합니다.');\n        return;\n      }\n      // editorContent에서 html 코드를 떼어낸 다음 50자 까지만 noticeHeadText 변수에 저장\n      const noticeHeadText = editorContent\n        .replace(/<(?:.|\\n)*?>/gm, '')\n        .substring(0, 50);\n\n    \n      const sendInfo = {\n        noticeId: currentIndex,\n        noticeTitle: noticeTitle,\n        noticeContent: editorContent,\n        noticeHeadText,\n      };\n\n      // noticeAPI의 modifyNotice에 요청 데이터로 sendInfo 넣어주기 \n      await modifyNotice(sendInfo);\n\n      // 수정 완료 후 MODIFYSUCCESS 컴포넌트로 이동\n      dispatch(setActiveStep('MODIFYSUCCESS'));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <Fragment>\n      {isLoading && (\n        <div\n          style={{\n            width: '100%',\n            height: '90vh',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <SyncSpinner />\n        </div>\n      )}\n      {!isLoading && (\n        <Fragment>\n          <div style={{ marginTop: '2rem', display: 'flex' }}>\n            <div style={{ flex: 0.8, alignSelf: 'center' }}>\n              <h2 style={{ fontWeight: '800' }}>제목</h2>\n            </div>\n            <div style={{ flex: 6 }}>\n              <StyledInputBase\n                name=\"noticeTitle\"\n                value={noticeTitle}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n          <div style={{ marginTop: '2rem' }}>\n            <h3 style={{ fontWeight: '400', padding: '0.5rem' }}>\n              <Editor\n                previewStyle=\"vertical\"\n                height=\"500px\"\n                initialEditType=\"wysiwyg\"\n                name=\"noticeContent\"\n                initialValue={notice.noticeContent}\n                language=\"ko\"\n                hooks={{\n                  addImageBlobHook: async (blob, callback) => {\n                    try {\n                      let ext = '.jpg';\n\n                      if (blob.type === 'image/jpeg') {\n                        ext = '.jpg';\n                      } else if (blob.type === 'image/gif') {\n                        ext = '.gif';\n                      } else if (blob.type === 'image/png') {\n                        ext = '.png';\n                      } else if (blob.type === 'image/webp') {\n                        ext = '.webp';\n                      }\n\n                      const imageName = uuid() + ext;\n\n                      const base64Content = await toBase64(blob);\n\n                      const sendInfo = {\n                        hospitalCode,\n                        imageName,\n                        base64Content,\n                      };\n\n                      const imagePath = await addNoticeImage(sendInfo);\n\n                      const completeURL = `${process.env.REACT_APP_SERVER_PATH}/image?path=${imagePath}`;\n                      console.log(completeURL);\n\n                      setImgList((prevState) => {\n                        const newState = prevState;\n                        newState.push(completeURL);\n                        return newState;\n                      });\n\n                      callback(completeURL, 'hello world');\n                      return false;\n                    } catch (error) {\n                      if (error.response.data !== undefined) {\n                        const { message } = error.response.data;\n                        handleAlert('error', message);\n                      }\n                      handleAlert('error', error);\n                      return false;\n                    }\n                  },\n                }}\n                ref={editorRef}\n              />\n            </h3>\n          </div>\n          <div\n            style={{\n              marginTop: '20px',\n              display: 'flex',\n            }}\n          >\n            <div style={{ flex: '2', marginRight: '10px' }}>\n              <StyledButton\n                bgColor=\"rgb(226,153,51)\"\n                color=\"white\"\n                onClick={handleModify}\n              >\n                <BsPencilSquare style={{ marginRight: '5px' }} />\n                게시물 수정\n              </StyledButton>\n            </div>\n            <div style={{ flex: '2', marginRight: '10px' }}>\n              <StyledButton\n                bgColor=\"rgb(8,78,127)\"\n                color=\"white\"\n                onClick={() => dispatch(setActiveStep('MAIN'))}\n              >\n                <BsListUl style={{ marginRight: '5px' }} />\n                목록\n              </StyledButton>\n            </div>\n            <div style={{ flex: '6' }}></div>\n          </div>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\nexport default NoticeDrawerModify;\n","import React, { Fragment } from 'react';\nimport { SwipeableDrawer } from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport NoticeDrawerWrite from './NoticeDrawerWrite';\nimport NoticeDrawerSuccess from './NoticeDrawerSuccess';\nimport NoticeDrawerMain from './NoticeDrawerMain';\nimport NoticeDrawerRead from './NoticeDrawerRead';\nimport NoticeDrawerModify from './NoticeDrawerModify';\nimport {\n  setActiveStep,\n} from 'redux/features/notice/noticeSlice';\n\n/**\n * 이 페이지 컴포넌트는 공지사항 Drawer의 헤드를 보여주기 위해 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - Header\n * - default: NoticeDrawerMain\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst NoticeDrawer = ({ isOpened, setOpened }) => {\n  const { breakpoint } = useWindowSize();\n  const activeStep = useSelector((state) => state.notice.activeStep);\n  const dispatch = useDispatch();\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    setOpened(open);\n  };\n\n  const handleCloseBtn = () => {\n    setOpened(false)\n    dispatch(setActiveStep('MAIN'))\n  };\n\n  const getStepContent = (step) => {\n    switch (step) {\n      case 'MAIN':\n        return <NoticeDrawerMain />;\n      case 'WRITE':\n        return <NoticeDrawerWrite />;\n      case 'READ':\n        return <NoticeDrawerRead />;\n      case 'MODIFY':\n        return <NoticeDrawerModify />;\n      case 'SUCCESS':\n        return <NoticeDrawerSuccess />;\n      case 'MODIFYSUCCESS':\n        return <NoticeDrawerSuccess />;\n      case 'DELETE':\n        return <NoticeDrawerSuccess />;\n      default:\n        return <NoticeDrawerMain />;\n    }\n  };\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer>\n          <DrawerHeader breakpoint={breakpoint}>\n            <h1>공지 사항</h1>\n            <div>\n              <AiOutlineClose size={32} onClick={handleCloseBtn}/>\n            </div>\n          </DrawerHeader>\n\n          {getStepContent(activeStep)}\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default NoticeDrawer;\n","import React, { Fragment, useState } from 'react';\nimport styled from 'styled-components';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport { useSnackbar } from 'notistack';\nimport AddIcon from '@material-ui/icons/Add';\nimport { createTodo } from 'apis/todoAPI';\n\nconst SearchContainer = styled.div`\n  padding: 0.5rem;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  background-color: aliceblue;\n`;\n\nconst SearchBase = styled(InputBase)`\n  margin-left: 8px;\n  flex: 1;\n  font-family: 'Spoqa Han Sans Neo', 'Noto Sans KR', sans-serif;\n  font-weight: 700;\n`;\n\n/**\n * 이 페이지 컴포넌트는 할 일(TODO)을 작성하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - InputBox\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst InputBox = ({\n  setTodoInput,\n  placeholder,\n  noRemove,\n  memberName,\n  memberId,\n  hospitalCode,\n  setChanged,\n}) => {\n  // 부모 컴포넌트(setTodoInput)로 입력한 inputVal을 보내준다.\n  const [inputVal, setInputVal] = useState('');\n\n  // 알림 셋팅\n  const { enqueueSnackbar } = useSnackbar();\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n  // 할 일(TODO)을 추가하기 위한 함수\n  const handleAdd = async (event) => {\n    try {\n      setTodoInput(inputVal);\n      const sendInfo = {\n        createdDate: new Date().toJSON(),\n        todoContent: inputVal,\n        memberId,\n        hospitalCode,\n        memberName,\n      };\n      if (inputVal === '') {\n        handleAlert('error', '값이 입력되지 않았습니다.');\n        return;\n      }\n      await createTodo(sendInfo);\n      // 입력값을 비워주기\n      setInputVal('');\n      handleAlert('success', '등록이 완료되었습니다.');\n      // 상태값이 변경되었음을 부모 컴포넌트로 보내준다.\n      setChanged(true);\n    } catch (error) {\n      console.log(error.response.data);\n    }\n  };\n\n  // 할 일의 입력값이 변할 경우 이를 inputVal에 셋팅한다.\n  const handleChange = (event) => {\n    setInputVal(event.target.value);\n  };\n\n  const handleKeyPress = (event) => {\n    const { key } = event;\n    if (key === 'Enter' && inputVal) {\n      setTodoInput(inputVal);\n      if (noRemove === undefined) {\n        setTimeout(() => {\n          setInputVal('');\n        }, 10);\n      }\n    } else if (key === 'Enter' && !inputVal) {\n      handleAlert('error', '값이 존재하지 않습니다.');\n    }\n  };\n\n  return (\n    <Fragment>\n      <SearchContainer>\n        <SearchBase\n          value={inputVal}\n          placeholder={placeholder}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n        />\n        <IconButton type=\"submit\" onClick={handleAdd}>\n          <AddIcon />\n        </IconButton>\n      </SearchContainer>\n    </Fragment>\n  );\n};\n\nexport default InputBox;\n","import styled from 'styled-components';\n\nconst TitleHeaderDashBoard = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0.7rem;\n  margin-bottom: 0.5rem;\n\n  span:first-child {\n    font-weight: 700;\n    font-size: 1.8rem;\n    margin-right: 1rem;\n  }\n\n  span:nth-child(2) {\n    font-size: 1.8rem;\n    font-weight: 300;\n  }\n`;\n\nexport default TitleHeaderDashBoard;\n","import React, { Fragment } from 'react';\nimport { makeStyles, Modal, Backdrop, IconButton } from '@material-ui/core';\nimport { AiOutlineClose, AiOutlineCheckCircle } from 'react-icons/ai';\nimport { BsFillTrashFill } from 'react-icons/bs';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport { useSnackbar } from 'notistack';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport { removeTodo } from 'apis/todoAPI';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyItems: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n/**\n * 목적 : 대시보드의 TODO 리스트를 삭제하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * DeleteTodoModal\n * @returns\n * 성공: True, 실패: False\n * @author HYEONG YUN KIM\n */\nconst DeleteTodoModal = ({ isOpenModal, setOpenModal, todoId, setChanged }) => {\n  const classes = useStyles();\n  const { breakpoint } = useWindowSize();\n\n  // 알림 셋팅\n  const { enqueueSnackbar } = useSnackbar();\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 취소 버튼 클릭시 Modal의 상태값을 false로 바꿔준다.\n  const handleClose = () => {\n    setOpenModal(false);\n  };\n\n  // 삭제 버튼 클릭시 해당 TODO를 삭제한다.\n  const handleRemoveTodo = async (event) => {\n    try {\n      await removeTodo(todoId);\n      setChanged(true);\n      handleAlert('success', '삭제가 완료되었습니다.');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpenModal}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        style={{\n          justifyContent: 'center',\n        }}\n      >\n        <SpringFade in={isOpenModal}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <div>\n                  <IconButton>\n                    <AiOutlineClose size={24} onClose={handleClose} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              <div>\n                <h2\n                  style={{\n                    textAlign: 'center',\n                  }}\n                >\n                  <StyledTypography\n                    style={{\n                      fontWeight: '800',\n                      fontSize: '2.25rem',\n                    }}\n                  >\n                    정말로 삭제하겠습니까?\n                  </StyledTypography>\n                  <img\n                    style={{\n                      border: '5px solid',\n                      borderColor: 'rgba(0,0,0,0.1)',\n                    }}\n                    src=\"/assets/image/notFound.png\"\n                    alt=\"Logo\"\n                    width=\"50%\"\n                  />\n                </h2>\n              </div>\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  marginTop: '1rem',\n                }}\n              >\n                <StyledButton\n                  bgColor=\"rgb(8,78,127)\"\n                  color=\"white\"\n                  width=\"150px\"\n                  onClick={handleRemoveTodo}\n                >\n                  <AiOutlineCheckCircle style={{ marginRight: '5px' }} />\n                  확인\n                </StyledButton>\n                <StyledButton\n                  bgColor=\"rgb(216,89,56)\"\n                  color=\"white\"\n                  width=\"150px\"\n                  onClose={handleClose}\n                >\n                  <BsFillTrashFill style={{ marginRight: '5px' }} />\n                  취소\n                </StyledButton>\n              </div>\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DeleteTodoModal;\n","import moment from 'moment';\nimport {\n  MdRemoveCircleOutline,\n  MdCheckBox,\n  MdCheckBoxOutlineBlank,\n} from 'react-icons/md';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { ListItem, IconButton } from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DeleteTodoModal from 'components/todo/modal/DeleteTodoModal';\nimport { modifyCheckedOut, modifyCheckedIn } from 'apis/todoAPI';\n\nconst NoticeContainer = styled.div`\n  border: 0.25px solid rgba(0, 0, 0, 0.12);\n  padding: 0.75rem;\n  width: 100%;\n\n  .title,\n  .divider {\n    margin-bottom: 0.25rem;\n  }\n\n  .description {\n    margin-top: 0.25rem;\n    display: flex;\n    .text-margin {\n      margin-left: 0.4rem;\n    }\n  }\n`;\n\n/**\n * 이 페이지 컴포넌트는 할 일(TODO)의 리스트를 보여주는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - TodoItem\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst TodoItem = ({ data, setChanged, loginMemberId }) => {\n  // 부모 컴포넌트에서 받은 TODO의 data  \n  const { todoContent, createdDate, todoId, memberId, memberName } = data;\n  // DeleteTodoDrawer의 Open 여부를 설정하기 위한 State\n  const [isOpenModal, setOpenModal] = useState(false);\n  // Checked 여부를 설정하기 위한 State\n  const [isChecked, setChecked] = useState(data.checked);\n\n  // Checked의 상태를 수정하기 위한 함수\n  const handleModify = async () => {\n    try {\n      // Checked의 상태값이 True일 경우\n      if (isChecked) {\n        await modifyCheckedOut(todoId);\n        // 이전의 상태값(boolean)으로 변경\n        setChecked((prevState) => !prevState);\n        return;\n      }\n      await modifyCheckedIn(data.todoId);\n      // 이전의 상태값(boolean)으로 변경\n      setChecked((prevState) => !prevState);\n      return;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <ListItem>\n      <NoticeContainer>\n        <StyledTypography\n          variant=\"h5\"\n          component=\"h5\"\n          weight={5}\n          className=\"title\"\n        >\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            {isChecked ? (\n              <div\n                className=\"text\"\n                style={{ flex: 9, textDecoration: 'line-through', textDecorationColor: 'rgb(255, 107, 107)'\n              }}\n              >\n                {todoContent}\n              </div>\n            ) : (\n              <div className=\"text\" style={{ flex: 9 }}>\n                {todoContent}\n              </div>\n            )}\n            {memberId === loginMemberId ? (\n              <div\n                style={{ flex: 1, display: 'flex', justifyContent: 'flex-end' }}\n              >\n                <IconButton onClick={handleModify}>\n                  {isChecked ? (\n                    <MdCheckBox size={20} style={{ color: '#ff6b6b' }} />\n                  ) : (\n                    <MdCheckBoxOutlineBlank\n                      size={20}\n                      style={{ color: '#ff6b6b' }}\n                    />\n                  )}\n                </IconButton>\n              </div>\n            ) : (\n              <div style={{ flex: 1 }}></div>\n            )}\n          </div>\n        </StyledTypography>\n        <div\n          className=\"description\"\n          style={{ display: 'flex', alignItems: 'center' }}\n        >\n          <div className=\"text\" style={{ flex: 9 }}>\n            <StyledTypography variant=\"subtitle1\" component=\"span\" weight={4}>\n              작성일자 :\n            </StyledTypography>\n\n            <StyledTypography\n              variant=\"subtitle1\"\n              component=\"span\"\n              weight={2}\n              className=\"text-margin\"\n            >\n              {moment(createdDate).subtract(1, 'months').format('YY-MM-DD')}\n            </StyledTypography>\n            <StyledTypography\n              variant=\"subtitle1\"\n              component=\"span\"\n              weight={2}\n              className=\"text-margin\"\n            >\n              |\n            </StyledTypography>\n            <StyledTypography\n              variant=\"subtitle1\"\n              component=\"span\"\n              weight={4}\n              className=\"text-margin\"\n            >\n              작성자 :\n            </StyledTypography>\n\n            <StyledTypography\n              variant=\"subtitle1\"\n              component=\"span\"\n              weight={2}\n              className=\"text-margin\"\n            >\n              {memberName}\n            </StyledTypography>\n          </div>\n          {memberId === loginMemberId ? (\n            <div\n              style={{ flex: 1, display: 'flex', justifyContent: 'flex-end' }}\n              onClick={() => {\n                setOpenModal((prevState) => !prevState);\n              }}\n            >\n              <DeleteTodoModal\n                isOpenModal={isOpenModal}\n                setOpenModal={setOpenModal}\n                todoId={todoId}\n                setChanged={setChanged}\n              />\n              <IconButton>\n                <MdRemoveCircleOutline size={20} style={{ color: '#ff6b6b' }} />\n              </IconButton>\n            </div>\n          ) : (\n            <div style={{ flex: 1 }}></div>\n          )}\n        </div>\n      </NoticeContainer>\n    </ListItem>\n  );\n};\n\nexport default React.memo(TodoItem);\n","import React from 'react';\nimport { css } from 'styled-components';\nimport BeatLoader from 'react-spinners/SyncLoader';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: #ffa8a8;\n`;\n\nconst BeatSpinner = ({ isLoading }) => (\n  <div style={{ width: '100%', display: 'flex' }}>\n    <BeatLoader color=\"#ffa8a8\" loading={isLoading} css={override} size={30} />\n  </div>\n);\n\nexport default BeatSpinner;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Grid, Hidden, List } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { DatePicker } from '@material-ui/pickers';\nimport { getNoticesList } from 'apis/noticeAPI';\nimport { getCoronaData } from 'apis/coronaAPI';\nimport { AiFillCaretUp } from 'react-icons/ai';\nimport {\n  getTodosListByHospitalCode,\n  getTodosListByMemberId,\n} from 'apis/todoAPI';\nimport { getHospitalInfo } from 'apis/hospitalAPI';\nimport parse from 'html-react-parser';\nimport 'react-calendar/dist/Calendar.css';\nimport NoticeItem from 'components/dashboard/NoticeItem';\nimport ContentContainer from 'components/common/container/ContentContainer';\nimport StyledContainer from 'components/common/container/StyledContainer';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport StyledButton from 'components/common/button/StyledButton';\nimport NoticeDrawer from 'components/notice/drawer/NoticeDrawer';\nimport ResponsivePageHeader from 'components/common/header/ResponsivePageHeader';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport InputBox from 'components/todo/InputTodoBox';\nimport TitleHeaderDashBoard from 'pages/dashboard/front/TitleHeaderDashBoard';\nimport TodoItem from 'components/dashboard/TodoItem';\nimport moment from 'moment';\nimport DashBoardSpinner from 'components/common/spinner/BeatSpinner';\nimport { setActiveStep } from 'redux/features/notice/noticeSlice';\n/**\n * 이 페이지 컴포넌트는 대쉬보드의 메인을 보여주기 위해 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - Sider\n * - Header\n * - 공지사항\n * - CORONA\n * - Calendar\n * - TodoItem\n * - InputBox\n * - ColoredContainer\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\n\nconst FrontPage = () => {\n  // NoticeDrawer의 Open 여부를 설정하기 위한 State\n  const [isOpened, setOpened] = useState(false);\n  // Data Picker 클릭 시 변경된 date를 설정하기 위한 State\n  const [date, changeDate] = useState(new Date());\n  // 할 일의 입력값을 받기위한 State\n  const [todoinput, setTodoInput] = useState('');\n  // 공지사항 리스트를 저장하기 위한 State\n  const [notice, setNotice] = React.useState([]);\n  // 할 일 리스트를 저장하기 위한 State\n  const [todo, setTodo] = React.useState([]);\n  // 자식 컴포넌트의 값이 변경될 경우 useEffect가 이를 감지하여 렌더링하기 위한 State\n  const [changed, setChanged] = useState(false);\n  // 병원 정보를 저장하기 위한 State\n  const [hospital, setHospital] = useState('');\n  // 코로나 정보를 저장하기 위한 State\n  const [corona, setCorona] = useState('');\n  // 할 일, 전체의 할 일의 텍스트 Weight를 설정하기 위한 State\n  const [mineText, setMineText] = useState(700);\n  const [allText, setAllText] = useState(300);\n  // Spinner의 Loading 여부를 설정하기 위한 State\n  const [isLoading, setLoading] = useState(true);\n\n  // 리덕스에 저장되어 있는 값들 불러오기\n  const dispatch = useDispatch();\n  const hospitalCode = useSelector(\n    (state) => state.common.loginInfo.hospitalCode,\n  );\n  const memberName = useSelector((state) => state.common.loginInfo.memberName);\n  const memberId = useSelector((state) => state.common.loginInfo.memberId);\n\n  // NoticeDrawer가 open될 시 변화를 감지\n  useEffect(() => {\n    console.log('변화가 일어났어요.', isOpened);\n  }, [isOpened]);\n\n  // 코로나, 공지사항, 병원, TODO의 데이터를 불러올 때까지\n  // Spinner가 실행되도록 한다. changed의 상태값이 변할 경우 렌더링하도록 한다.\n  useEffect(() => {\n    setLoading(true);\n    const getNoticeAndTodoAndCorona = async () => {\n      try {\n        // 1. 코로나 데이터 가져오기\n        const from = moment()\n          .subtract(3, 'days')\n          .startOf('day')\n          .format('YYYY-MM-DDTHH:mm:ss');\n        const to = moment().startOf('day').format('YYYY-MM-DDTHH:mm:ss');\n        console.log('from :', from);\n\n        console.log('to :', to);\n        const coronaContent = await getCoronaData(from, to);\n        setCorona(coronaContent);\n        console.log('coronaContent : ', coronaContent);\n\n        // 2. 공지사항 가져오기\n        const noticeContent = await getNoticesList(hospitalCode);\n        setNotice(noticeContent.data.data);\n\n        // 3 병원정보 가져오기\n        const hospitalContent = await getHospitalInfo(hospitalCode);\n        setHospital(hospitalContent.data.data);\n        console.log(hospitalContent.data);\n\n        // 4 투두 가져오기\n        const todoContent = await getTodosListByMemberId(memberId);\n        setTodo(todoContent.data.data);\n        setChanged(false);\n\n        // 4. 로딩 상태 바꾸기\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n    getNoticeAndTodoAndCorona();\n  }, [changed]);\n\n  const TodosListByMemberId = async () => {\n    try {\n      const response = await getTodosListByMemberId(memberId);\n\n      setTodo(response.data.data);\n\n      setMineText(700);\n      setAllText(300);\n      setChanged(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const TodosListByHospitalCode = async () => {\n    try {\n      const response = await getTodosListByHospitalCode(hospitalCode);\n\n      setTodo(response.data.data);\n      setMineText(300);\n      setAllText(700);\n      setChanged(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    console.log('변화가 일어났어요.');\n  }, []);\n\n  const handleOpenBtn = () => {\n    setOpened(true);\n    dispatch(setActiveStep('MAIN'));\n  };\n\n  return (\n    <Fragment>\n      {isLoading && (\n        <div\n          style={{\n            width: '100%',\n            height: '90vh',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            cursor: 'wait',\n          }}\n        >\n          <DashBoardSpinner />\n        </div>\n      )}\n      {!isLoading && (\n        <Fragment>\n          <div>\n            <header\n              style={{\n                position: 'sticky',\n                top: 0,\n                backgroundColor: 'default',\n                zIndex: 2,\n              }}\n            >\n              <ResponsivePageHeader />\n            </header>\n            <main>\n              <Grid container>\n                <Grid item xs={12}>\n                  <PageTransition>\n                    <ContentContainer>\n                      <Grid container>\n                        <Grid item xs={12} sm={8} lg={8}>\n                          <StyledContainer\n                            bgColor=\"#EAF2FE\"\n                            padding=\"1.5\"\n                            style={{\n                              display: 'flex',\n                            }}\n                          >\n                            <div\n                              style={{\n                                flex: 3,\n                              }}\n                            >\n                              <StyledTypography\n                                variant=\"h4\"\n                                component=\"h4\"\n                                weight={9}\n                                color=\"primary\"\n                              >\n                                {hospital.hospitalName}\n                              </StyledTypography>\n\n                              <StyledTypography\n                                variant=\"h6\"\n                                component=\"h6\"\n                                weight={5}\n                                style={{ marginTop: '1rem' }}\n                              >\n                                {parse(hospital.hospitalDescription)}\n                              </StyledTypography>\n                            </div>\n                            <Hidden xsDown>\n                              <img\n                                src=\"/assets/image/dashboard_1.png\"\n                                width=\"10%\"\n                                alt=\"Dashboard\"\n                                style={{\n                                  flex: 1,\n                                }}\n                              />\n                            </Hidden>\n                          </StyledContainer>\n                          <div style={{ marginTop: '3rem', display: 'flex' }}>\n                            <div style={{ flex: 4 }}>\n                              <StyledTypography\n                                variant=\"h4\"\n                                component=\"h4\"\n                                weight={7}\n                                style={{ marginLeft: '12px' }}\n                              >\n                                공지사항\n                              </StyledTypography>\n                            </div>\n                            <div style={{ flex: 1 }}>\n                              <StyledButton\n                                bgColor=\"white\"\n                                onClick={handleOpenBtn}\n                              >\n                                <AddIcon />더 보기\n                              </StyledButton>\n                            </div>\n                          </div>\n                          <List component=\"nav\">\n                            {notice\n                              .filter((data, index) => {\n                                if (index < 4) {\n                                  return true;\n                                }\n                                return false;\n                              })\n                              .map((data) => {\n                                return (\n                                  <NoticeItem key={data.noticeId} data={data} />\n                                );\n                              })}\n                          </List>\n                        </Grid>\n                        <Grid item xs={12} sm={4} lg={4}>\n                          <StyledContainer\n                            bgColor=\"#2e51a8\"\n                            style={{ marginLeft: '0.7rem' }}\n                          >\n                            <h4\n                              style={{\n                                fontWeight: '300',\n                                height: '100px',\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                flexDirection: 'column',\n                                color: '#ffffff',\n                              }}\n                            >\n                              <TitleHeaderDashBoard>\n                                <span>코로나바이러스감염증-19</span>\n                              </TitleHeaderDashBoard>\n                              <div style={{ display: 'flex' }}>\n                                {\n                                  corona.data[\n                                    corona.data.length - 1\n                                  ].Date.split('T00:00:00Z')[0]\n                                }{' '}\n                                기준\n                              </div>\n                            </h4>\n\n                            <StyledContainer\n                              bgColor=\"#ffffff\"\n                              style={{\n                                padding: '0.75rem',\n                                fontWeight: '500',\n                                fontSize: '1.1rem',\n                              }}\n                            >\n                              <div\n                                style={{\n                                  display: 'flex',\n                                  justifyContent: 'center',\n                                  alignItems: 'center',\n                                  color: 'rgb(65,69,78)',\n                                  padding: '10px',\n                                }}\n                              >\n                                <div\n                                  style={{\n                                    flex: 1,\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    alignItems: 'center',\n                                  }}\n                                >\n                                  확진환자\n                                  <div>\n                                    <br />\n                                  </div>\n                                  <div\n                                    style={{\n                                      color: 'rgb(236,73,64)',\n                                      marginBottom: '1.5rem',\n                                      display: 'flex',\n                                      alignItems: 'center',\n                                    }}\n                                  >\n                                    <AiFillCaretUp />\n                                    <span\n                                      style={{\n                                        fontSize: '1.3rem',\n                                        marginLeft: '0.3rem',\n                                      }}\n                                    >\n                                      {corona.data[corona.data.length - 1]\n                                        .Confirmed -\n                                        corona.data[corona.data.length - 2]\n                                          .Confirmed}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    {corona.data[\n                                      corona.data.length - 1\n                                    ].Confirmed.toString()}\n                                  </div>\n                                </div>\n                                <div\n                                  style={{\n                                    flex: 1,\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    alignItems: 'center',\n                                  }}\n                                >\n                                  격리해제\n                                  <div>\n                                    <br />\n                                  </div>\n                                  <div\n                                    style={{\n                                      color: 'rgb(67,100,193)',\n                                      marginBottom: '1.5rem',\n                                      display: 'flex',\n                                      alignItems: 'center',\n                                    }}\n                                  >\n                                    <AiFillCaretUp />\n                                    <span\n                                      style={{\n                                        fontSize: '1.3rem',\n                                        marginLeft: '0.3rem',\n                                      }}\n                                    >\n                                      {(\n                                        corona.data[corona.data.length - 1]\n                                          .Recovered -\n                                        corona.data[corona.data.length - 2]\n                                          .Recovered\n                                      ).toString()}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    {corona.data[\n                                      corona.data.length - 1\n                                    ].Recovered.toString()}\n                                  </div>\n                                </div>\n                                <div\n                                  style={{\n                                    flex: 1,\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    alignItems: 'center',\n                                  }}\n                                >\n                                  사망자\n                                  <div>\n                                    <br />\n                                  </div>\n                                  <div\n                                    style={{\n                                      marginBottom: '1.5rem',\n                                      display: 'flex',\n                                      alignItems: 'center',\n                                    }}\n                                  >\n                                    <AiFillCaretUp />\n                                    <span\n                                      style={{\n                                        fontSize: '1.3rem',\n                                        marginLeft: '0.3rem',\n                                      }}\n                                    >\n                                      {corona.data[corona.data.length - 1]\n                                        .Deaths -\n                                        corona.data[corona.data.length - 2]\n                                          .Deaths}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    {corona.data[\n                                      corona.data.length - 1\n                                    ].Deaths.toString()}\n                                  </div>\n                                </div>\n                                <div\n                                  style={{\n                                    flex: 1,\n                                    display: 'flex',\n                                    flexDirection: 'column',\n                                    alignItems: 'center',\n                                  }}\n                                >\n                                  격리중\n                                  <div>\n                                    <br />\n                                  </div>\n                                  <div\n                                    style={{\n                                      marginBottom: '1.5rem',\n                                      display: 'flex',\n                                      alignItems: 'center',\n                                    }}\n                                  >\n                                    <AiFillCaretUp />\n                                    <span\n                                      style={{\n                                        fontSize: '1.3rem',\n                                        marginLeft: '0.3rem',\n                                        // marginBottom: '0.5rem',\n                                      }}\n                                    >\n                                      {(\n                                        corona.data[corona.data.length - 1]\n                                          .Active -\n                                        corona.data[corona.data.length - 2]\n                                          .Active\n                                      ).toString()}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    {corona.data[\n                                      corona.data.length - 1\n                                    ].Active.toString()}\n                                  </div>\n                                </div>\n                              </div>\n                            </StyledContainer>\n\n                            <div style={{ marginLeft: '0.3rem' }}></div>\n                          </StyledContainer>\n\n                          <Hidden xsDown>\n                            <div\n                              style={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                alignItems: 'center',\n                                minHeight: '400px',\n                                marginTop: '1rem',\n                              }}\n                            >\n                              <DatePicker\n                                autoOk\n                                clearText=\"CANCEL\"\n                                color=\"secondary\"\n                                variant=\"static\"\n                                openTo=\"date\"\n                                value={date}\n                                onChange={changeDate}\n                              />\n                            </div>\n                          </Hidden>\n\n                          <StyledContainer\n                            bgColor=\"rgb(203,225,253)\"\n                            style={{\n                              marginLeft: '0.7rem',\n                            }}\n                          >\n                            <div style={{ display: 'flex', padding: '0.5rem' }}>\n                              <div style={{ flex: 3.5 }}>\n                                <TitleHeaderDashBoard\n                                  style={{\n                                    cursor: 'pointer',\n                                  }}\n                                >\n                                  <span\n                                    style={{ fontWeight: mineText }}\n                                    onClick={TodosListByMemberId}\n                                  >\n                                    나의 할 일 |\n                                  </span>\n                                  <span\n                                    style={{ fontWeight: allText }}\n                                    onClick={TodosListByHospitalCode}\n                                  >\n                                    전체의 할 일\n                                  </span>\n                                </TitleHeaderDashBoard>\n                              </div>\n                            </div>\n                            <div\n                              style={{\n                                display: 'flex',\n                                alignItems: 'center',\n                              }}\n                            >\n                              <div style={{ flex: 9 }}>\n                                <InputBox\n                                  setTodoInput={setTodoInput}\n                                  memberId={memberId}\n                                  hospitalCode={hospitalCode}\n                                  setChanged={setChanged}\n                                  memberName={memberName}\n                                  placeholder=\"할 일을 입력해주세요.\"\n                                />\n                              </div>\n                            </div>\n                            <List component=\"nav\">\n                              {todo.map((data) => {\n                                return (\n                                  <TodoItem\n                                    loginMemberId={memberId}\n                                    key={data.todoId}\n                                    data={data}\n                                    setChanged={setChanged}\n                                  />\n                                );\n                              })}\n                            </List>\n                          </StyledContainer>\n                        </Grid>\n                      </Grid>\n\n                      <NoticeDrawer isOpened={isOpened} setOpened={setOpened} />\n                    </ContentContainer>\n                  </PageTransition>\n                </Grid>\n              </Grid>\n            </main>\n          </div>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default FrontPage;\n","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setModalStatus,\n  setAddressInfo,\n} from 'redux/features/member/memberSlice';\nimport { makeStyles, Modal, Backdrop, IconButton } from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DaumPostcode from 'react-daum-postcode';\n// import StyledButton from 'components/common/button/StyledButton';\n\n/**\n * 이 모달 컴포넌트는 주소를 입력해주기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * 모달 (Modal)\n * * * 주소검색API (DaumPostcode)\n * @returns {JSX.Element}\n * @author Jong Hyun Hong\n */\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyItems: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst PostalCodeModal = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { breakpoint } = useWindowSize();\n\n  const isModalOpened = useSelector((state) => state.member.modalStatus);\n\n  const handleClose = () => dispatch(setModalStatus(false));\n\n  const handleComplete = (data) => {\n    const { address, addressType, bname, buildingName, zonecode } = data;\n    let fullAddress = address;\n    let extraAddress = '';\n\n    if (addressType === 'R') {\n      if (bname !== '') {\n        extraAddress += bname;\n      }\n\n      if (buildingName !== '') {\n        extraAddress +=\n          extraAddress !== '' ? `, ${buildingName}` : buildingName;\n      }\n\n      fullAddress += extraAddress !== '' ? ` (${extraAddress})` : '';\n    }\n\n    dispatch(\n      setAddressInfo({\n        member_postal: zonecode,\n        member_addr1: fullAddress,\n      }),\n    );\n    dispatch(setModalStatus(!isModalOpened));\n  };\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isModalOpened}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        style={{\n          justifyContent: 'center',\n        }}\n      >\n        <SpringFade in={isModalOpened}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  도로명 주소 찾기\n                </StyledTypography>\n                <div>\n                  <IconButton>\n                    <AiOutlineClose\n                      size={24}\n                      onClick={() => dispatch(setModalStatus(false))}\n                    />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n\n              <DaumPostcode onComplete={handleComplete} />\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default PostalCodeModal;\n","import axios from 'axios';\n\n/**\n * * 목적 : 해당 병원의 모든 임직원 목록 가져오기\n * * (전체권한)\n * @param {String} hospitalCode\n * @returns {List<MembersDTO>} memberInfo\n * * [Members Table Entity]\n * * * !int memberId (임직원 고유 코드)\n * * * !String memberEmail (임직원 이메일)\n * * * !String memberName (임직원 이름)\n * * * !String memberTel (임직원 전화번호)\n * * * !String memberAddr1 (임직원 상세주소1)\n * * * !String memberAddr2 (임직원 상세주소2)\n * * * !String memberPostal (임직원 우편번호)\n * * * String memberImage (임직원 프로필 사진)\n * * * !LocalDate memberBirth (임직원 생년월일)\n * * * String memberColor (임직원 색상)\n * @author JONG HYUN HONG\n */\nexport const showMembersListByHospitalCode = async (hospitalCode) => {\n  return await axios.get(`/member`, {\n    params: {\n      hospitalCode,\n    },\n  });\n};\n\n/**\n * * 목적 : 검색된 키워드(이름)이 포함된 모든 임직원 목록 가져오기\n * * (전체권한)\n * @param {MemberSearchVO} memberSearchInfo\n * * [MemberSearchVO Entity]\n * * * !String hospitalCode (병원 코드)\n * * * !String memberName (임직원 이름)\n * @returns {List<MembersDTO>} searchList\n * * [Members Entity]\n * * * !int memberId (임직원 고유 코드)\n * * * !String memberEmail (임직원 이메일)\n * * * !String memberName (임직원 이름)\n * * * !String memberTel (임직원 전화번호)\n * * * !String memberAddr1 (임직원 상세주소1)\n * * * !String memberAddr2 (임직원 상세주소2)\n * * * !String memberPostal (임직원 우편번호)\n * * * String memberImage (임직원 프로필 사진)\n * * * !LocalDate memberBirth (임직원 생년월일)\n * * * String memberColor (임직원 색상)\n * @author JONG HYUN HONG\n */\nexport const showMembersListByNameAndCode = async (memberSearchInfo) => {\n  return await axios.post(`/member/search`, memberSearchInfo);\n};\n\n/**\n * * 목적 : 해당 병원의 해당 임직원을 추가하기\n * * (병원장)\n * @param {MembersDTO} memberInfo\n * * [Mermbers Entity]\n * * * !String memberEmail (임직원 이메일)\n * * * !String memberPw (임직원 비밀번호)\n * * * !String memberName (임직원 이름)\n * * * !String memberTel (임직원 전화번호)\n * * * !String memberAddr1 (임직원 상세주소1)\n * * * !String memberAddr2 (임직원 상세주소2)\n * * * !String memberPostal (임직원 우편번호)\n * * * !String memberAuthority (임직원 권한)\n * * * !boolean memberEnabled (임직원 활성화)\n * * * !String hospitalCode (병원코드)\n * * * String doctorRoom (진료실)\n * * * String memberImage (임직원 프로필 사진)\n * * * !String memberGender (임직원 성별)\n * * * !LocalDate memberBirth (임직원 생년월일)\n * * * !LocalDateTime joinedDate (임직원 가입일자)\n * * * String memberIntroduction (임직원 자기소개)\n * * * !String memberColor (임직원 색상)\n * @author JONG HYUN HONG\n * @returns {boolean} result 성공: true, 실패: false\n */\nexport const addMember = async (memberInfo) => {\n  return await axios.post(`/member`, memberInfo);\n};\n\n/**\n * * 목적 : 해당 병원의 해당 임직원을 수정하기\n * * (병원장)\n * @param {MembersDTO} memberInfo\n * * [Mermbers Table]\n * * * !int memberId (임직원 고유 번호)\n * * * !String memberAuthority (임직원 권한)\n * * * !String memberName (임직원 이름)\n * * * !String memberTel (임직원 전화번호)\n * * * !String memberPostal (임직원 우편번호)\n * * * !String memberAddr1 (임직원 상세주소1)\n * * * !String memberAddr2 (임직원 상세주소2)\n * @returns {boolean} result 성공: true, 실패: false\n * @author JONG HYUN HONG\n */\nexport const modifyMemberInfo = async (memberInfo) => {\n  return await axios.put(`/member`, memberInfo);\n};\n\n/**\n * * 목적 : 해당 병원의 해당 임직원을 삭제하기\n * * (병원장)\n * @param {int} memberId\n * @returns {boolean} result 성공: true, 실패: false\n * @author JONG HYUN HONG\n */\nexport const deleteMember = async (memberId) => {\n  return await axios.delete(`/member`, {\n    params: {\n      memberId,\n    },\n  });\n};\n\n/**\n * * 목적 : 해당 병원의 해당 임직원에 대한 비밀번호 초기화하기\n * * (병원장)\n * @param {int} memberId\n * @returns {boolean} result 성공: true, 실패: false\n * @author JONG HYUN HONG\n */\nexport const intializeMemberPw = async (memberId) => {\n  console.log(memberId);\n  return await axios.put(`/member/initial-pw?memberId=${memberId}`);\n};\n\n/**\n * * 목적 : 해당 환자의 이미지 업로드 버튼을 눌렀을때 이미지를 base64로 전송해서 저장\n * * (병원장)\n * @param {AddNoticeImageVO} imageInfo\n * * [AddNoticeImageVO Entity]\n * * * !String hospitalCode (병원 코드)\n * * * !String imageName (이미지 이름)\n * * * !String base64Content (base64 텍스트)\n * @returns {String} imageSrc\n * @author JONG HYUN HONG\n */\nexport const memberImageUpload = async (imageInfo) => {\n  return await axios.post(`/member/image`, imageInfo);\n};\n\n/**\n * * 목적 : 중복된 이메일이 있는지에 대해 검사\n * * (병원장)\n * @param {String} memberEmail\n * @returns {boolean} result 성공: true, 실패: false\n * @author JONG HYUN HONG\n */\nexport const isExistedEmail = async (memberEmail) => {\n  return await axios.get(`/member/email-check`, {\n    params: {\n      memberEmail,\n    },\n  });\n};\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  SwipeableDrawer,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Paper,\n} from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  setModalStatus,\n  setAddressInfo,\n} from 'redux/features/member/memberSlice';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\n\nimport useWindowSize from 'hooks/useWindowSize';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport PostalCodeModal from '../modal/PostalCodeModal';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\nimport ImageUploader from 'react-images-upload';\nimport StyledContainer from 'components/common/container/StyledContainer';\nimport { IoManOutline, IoWomanOutline } from 'react-icons/io5';\nimport { useSnackbar } from 'notistack';\nimport { addMember, memberImageUpload, isExistedEmail } from 'apis/memberAPI';\nimport { CirclePicker } from 'react-color';\n\n/**\n * 이 DRAWER 컴포넌트는 추가할 임직원 정보를 입력하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * DRAWER (SwipeableDrawer)\n * * * 주소 검색 (PostalCodeModal)\n * * * 성별 선택 (IoManOutline, IoWomanOutline)\n * * * 생년월일 입력 (KeyboardDatePicker)\n * * * 이미지 업로드 (ImageUploader)\n * * * 색상 선택 (CirclePicker)\n * @returns {JSX.Element}\n * @author Jong Hyun Hong\n */\nconst MemberDrawer = ({ isOpened, setOpened, currentUser, showMember }) => {\n  const { breakpoint } = useWindowSize();\n\n  // 임직원의 권한을 설정할때 저장하는 상태\n  const [selectVal, setSelectVal] = useState('의사');\n\n  // 임직원의 이메일 중복체크의 확인여부를 저장하는 상태\n  const [isEmailChecked, setIsEmailChecked] = useState(false);\n\n  // 임직원의 이메일 값을 입력받는 상태\n  const [memberEmail, setMemberEmail] = useState('');\n\n  // 임직원의  생년월일 상태, 날짜 에러메세지(최대 및 최소 값 값 제대로 입력)\n  const [keyboardDate, handleKeyDateChange] = useState(new Date());\n  const [dateErrorMessage, setDateErrorMessage] = useState('');\n\n  // 임직원의 색상을 저장하기 위한 상태\n  const [currentColor, setCurrentColor] = useState('');\n\n  // 임직원의 이미지VO 값을 저장하는 상태\n  const [pictures, setPictures] = useState('');\n  const { enqueueSnackbar } = useSnackbar();\n\n  //Drawer창 on/off시 동작(데이터 초기화)\n  useEffect(() => {\n    setPictures('');\n    setMemberEmail('');\n    setSelectedGender({\n      female: false,\n      male: false,\n    });\n    setCurrentColor('');\n  }, [isOpened]);\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 색상 변경시 동작\n  const colorChange = (color, event) => {\n    if (color) {\n      setCurrentColor(color.hex);\n      console.log(color.hex);\n    }\n  };\n\n  // 이미지를 업로드하거나 취소할때의 동작\n  const onDrop = async (event, picture) => {\n    if (event.length === 1) {\n      let imageName = '';\n      imageName = event[0].name;\n      let imageInfo = {\n        hospitalCode: currentUser.hospitalCode,\n        imageName,\n        base64Content: picture[0],\n      };\n      setPictures(imageInfo);\n      console.log(imageInfo);\n      // const { data, status } = await memberImageUpload(pictures);\n      // console.log(data);\n    } else {\n      //창 닫을때\n      console.log('창닫힘', picture);\n      setPictures('');\n    }\n  };\n\n  const dispatch = useDispatch();\n\n  const isModalOpened = useSelector((state) => state.member.modalStatus);\n\n  const { member_postal, member_addr1 } = useSelector(\n    (state) => state.member.addressInfo,\n  );\n\n  const [selectedGender, setSelectedGender] = useState({\n    male: false,\n    female: false,\n  });\n\n  // 성별을 선택할때의 동작\n  const handleChangeGender = (name) => {\n    console.log(name);\n    if (name === 'male') {\n      //남성일때\n      setSelectedGender({\n        female: false,\n        male: true,\n      });\n    } else {\n      //여성일때\n      setSelectedGender({\n        male: false,\n        female: true,\n      });\n    }\n  };\n\n  //drawer창 on/off 될때마다 주소값 초기화\n  useEffect(() => {\n    dispatch(\n      setAddressInfo({\n        member_postal: '',\n        member_addr1: '',\n      }),\n    );\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (breakpoint !== undefined) {\n      console.log('Current breakpoint is', breakpoint);\n    }\n  }, [breakpoint]);\n\n  //생년월일 입력에러시 나오는 문구\n  const handleDateError = (data, error) => {\n    if (data) {\n      console.log(data);\n      setDateErrorMessage(data);\n    } else {\n      console.log('올바른 값을 입력하셨습니다.');\n      setDateErrorMessage('');\n    }\n  };\n\n  //fuction(open){function(e){}}\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    setOpened(open);\n  };\n\n  //이메일 중복체크\n  const handleEmailChecked = async () => {\n    if (memberEmail === '') {\n      handleAlert('error', '이메일을 입력해주세요.');\n      return;\n    }\n\n    //유효성 검사\n    const regExpEmail =\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n    const isValidEmail = regExpEmail.test(memberEmail);\n    if (!isValidEmail) {\n      handleAlert('error', '이메일을 올바른 형식으로 입력해주세요.');\n      return;\n    }\n    try {\n      const { data, status } = await isExistedEmail(memberEmail);\n      console.log('이메일검사 결과: ', data);\n      handleAlert('success', '이메일을 사용해도 좋습니다.');\n      setIsEmailChecked(true);\n    } catch (error) {\n      handleAlert('error', '중복된 이메일 입니다. 다른 이메일을 사용해주세요.');\n      return;\n    }\n  };\n\n  //이메일 input값 상태저장\n  const handleChange = (event) => {\n    setMemberEmail(event.target.value);\n  };\n\n  //이메일 변경될때마다 중복상태 설정\n  useEffect(() => {\n    setIsEmailChecked(false);\n  }, [memberEmail]);\n\n  //임직원 추가 버튼(submit)\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // 이메일 정규 표현식\n    const regExpEmail =\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n    // 비밀번호 정규 표현식\n    // 숫자, 특수문자 각 1회 이상, 영문은 2개 이상 사용하여 8자리 이상 입력\n    const regExpPw =\n      /(?=.*\\d{1,50})(?=.*[~`!@#$%\\^&*()-+=]{1,50})(?=.*[a-zA-Z]{2,50}).{8,50}$/;\n\n    // 전화번호 정규표현식\n    const regExpTel =\n      /^(01[016789]{1}|02|0[3-9]{1}[0-9]{1})-?[0-9]{3,4}-?[0-9]{4}$/;\n\n    let memberAuthority = '';\n    if (selectVal === '병원장') {\n      memberAuthority = 'ROLE_DIRECTOR';\n    } else if (selectVal === '의사') {\n      memberAuthority = 'ROLE_DOCTOR';\n    } else if (selectVal === '간호사') {\n      memberAuthority = 'ROLE_NURSE';\n    } else if (selectVal === '검사자') {\n      memberAuthority = 'ROLE_INSPECTOR';\n    }\n\n    const memberEmail = event.target.memberEmail.value;\n    const memberPw = event.target.memberPassword.value;\n    const memberName = event.target.memberName.value;\n    const memberTel = event.target.memberTel.value;\n    const memberBirth = event.target.memberBirth.value;\n    const memberPostal = event.target.memberAddress1.value;\n    const memberAddr1 = event.target.memberAddress2.value;\n    const memberAddr2 = event.target.memberAddress3.value;\n    let memberImage = '';\n    const memberIntroduction = event.target.memberIntroduce.value;\n    const memberColor = currentColor;\n\n    let gender = '';\n    if (selectedGender['male'] === true) {\n      gender = 'male';\n    } else if (selectedGender['female'] === true) {\n      gender = 'female';\n    }\n    const memberGender = gender;\n\n    //유효성 검사\n    const isValidEmail = regExpEmail.test(memberEmail);\n    const isValidPW = regExpPw.test(memberPw);\n    const isValidTel = regExpTel.test(memberTel);\n\n    if (!isEmailChecked) {\n      handleAlert('error', '이메일 중복 체크를 해주세요.');\n      return;\n    } else if (!isValidEmail) {\n      handleAlert('error', '이메일을 올바른 형식으로 입력해주세요.');\n      return;\n    } else if (!isValidPW) {\n      handleAlert(\n        'error',\n        '비밀번호를 숫자, 특수문자 각 1회 이상, 영문은 2글자 이상 입력하고 총 8자 이상이 되어야 합니다.',\n      );\n      return;\n    } else if (memberGender === '') {\n      handleAlert('error', '성별을 선택해주세요.');\n      return;\n    } else if (memberName === '') {\n      handleAlert('error', '이름이 공백입니다.');\n      return;\n    } else if (!isValidTel) {\n      handleAlert(\n        'error',\n        '전화번호를 올바르게 입력해주세요.(공백 또는 ' - ' 사용)',\n      );\n      return;\n    } else if (memberBirth === '') {\n      handleAlert('error', '생년월일 값을 입력해주세요.');\n      return;\n    } else if (!(dateErrorMessage === '')) {\n      console.log(dateErrorMessage);\n      handleAlert(\n        'error',\n        `생년월일에서 ${dateErrorMessage} 다시 한번 확인해주세요.`,\n      );\n      return;\n    } else if (memberPostal === '' || memberAddr1 === '') {\n      handleAlert('error', '주소가 공백입니다. 주소 검색을 해주세요.');\n      return;\n    } else if (memberAddr2 === '') {\n      handleAlert('error', '상세주소가 공백입니다. 상세주소를 입력해주세요.');\n      return;\n    } else if (memberColor === '') {\n      handleAlert('error', '색상이 입력되지 않았습니다. 색상을 골라주세요.');\n      return;\n    }\n\n    //pictures 데이터가 존재\n    if (pictures !== '') {\n      const { data, status } = await memberImageUpload(pictures);\n      console.log('이미지가 등록됨: ', data);\n      memberImage = data;\n    }\n\n    try {\n      let memberInfo = {\n        hospitalCode: currentUser.hospitalCode,\n        memberPw,\n        memberBirth,\n        memberEmail,\n        memberGender,\n        memberName,\n        memberTel,\n        memberAuthority,\n        memberPostal,\n        memberAddr1,\n        memberAddr2,\n        memberEnabled: 1,\n        memberImage,\n        memberIntroduction,\n        memberColor,\n      };\n      console.log(memberInfo);\n      const { data, status } = await addMember(memberInfo);\n      console.log(data);\n    } catch (error) {\n      handleAlert('error', '추가도중에 오류가 발생하였습니다.');\n    }\n    showMember();\n    handleAlert('success', '임직원이 추가되었습니다.');\n    setOpened(false);\n  };\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <form onSubmit={handleSubmit}>\n          <ResponsiveContainer breakpoint={breakpoint}>\n            <DrawerHeader breakpoint={breakpoint}>\n              <h1>직원 추가</h1>\n              <div>\n                <AiOutlineClose size={32} onClick={() => setOpened(false)} />\n              </div>\n            </DrawerHeader>\n\n            <Grid container spacing={1} style={{ padding: '1rem' }}>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  직책\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <FormControl style={{ width: '100%' }} variant=\"outlined\">\n                  <InputLabel id=\"form-label\">의사</InputLabel>\n                  <Select\n                    labelId=\"form-label\"\n                    id=\"select-label\"\n                    label=\"직책\"\n                    onChange={(e) => setSelectVal(e.target.value)}\n                    value={selectVal}\n                  >\n                    <MenuItem value=\"의사\" onClick={() => setSelectVal('의사')}>\n                      의사\n                    </MenuItem>\n                    <MenuItem\n                      value=\"간호사\"\n                      onClick={() => setSelectVal('간호사')}\n                    >\n                      간호사\n                    </MenuItem>\n                    <MenuItem\n                      value=\"검사자\"\n                      onClick={() => setSelectVal('검사자')}\n                    >\n                      검사자\n                    </MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  이메일\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={7}>\n                <StyledInputBase\n                  name=\"memberEmail\"\n                  onChange={handleChange}\n                  value={memberEmail}\n                />\n              </Grid>\n              <Grid\n                item\n                xs={2}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledButton\n                  bgColor=\"lightgray\"\n                  onClick={() => handleEmailChecked()}\n                >\n                  중복 체크\n                </StyledButton>\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  비밀번호\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <StyledInputBase name=\"memberPassword\" type=\"password\" />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  성별\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <div\n                  style={{\n                    display: 'flex',\n                    maxWidth: '400px',\n                    height: '100px',\n                  }}\n                >\n                  <StyledContainer\n                    bgColor=\"rgb(62,63,70)\"\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                    }}\n                    onClick={() => handleChangeGender('male')}\n                  >\n                    {selectedGender.male && (\n                      <Fragment>\n                        <IoManOutline color=\"rgb(244,213,51)\" size={64} />\n                        <div\n                          style={{\n                            display: 'flex',\n                            justifyContent: 'center',\n                            flex: 1,\n                          }}\n                        >\n                          <StyledTypography\n                            variant=\"subtitle1\"\n                            weight={7}\n                            style={{\n                              color: 'rgb(244,213,51)',\n                              fontFamily: 'Lato',\n                            }}\n                          >\n                            남자 (Male)\n                          </StyledTypography>\n                        </div>\n                      </Fragment>\n                    )}\n                    {!selectedGender.male && (\n                      <Fragment>\n                        <IoManOutline color=\"white\" size={64} />\n                        <div\n                          style={{\n                            display: 'flex',\n                            justifyContent: 'center',\n                            flex: 1,\n                          }}\n                        >\n                          <StyledTypography\n                            variant=\"subtitle1\"\n                            weight={7}\n                            style={{\n                              color: 'white',\n                              fontFamily: 'Lato',\n                            }}\n                          >\n                            남자 (Male)\n                          </StyledTypography>\n                        </div>\n                      </Fragment>\n                    )}\n                  </StyledContainer>\n                  <StyledContainer\n                    bgColor=\"rgb(62,63,70)\"\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                    }}\n                    onClick={() => handleChangeGender('female')}\n                  >\n                    {selectedGender.female && (\n                      <Fragment>\n                        <IoWomanOutline color=\"rgb(244,213,51)\" size={64} />\n                        <div\n                          style={{\n                            display: 'flex',\n                            justifyContent: 'center',\n                            flex: 1,\n                          }}\n                        >\n                          <StyledTypography\n                            variant=\"subtitle1\"\n                            weight={7}\n                            style={{\n                              color: 'rgb(244,213,51)',\n                              fontFamily: 'Lato',\n                            }}\n                          >\n                            여자 (Female)\n                          </StyledTypography>\n                        </div>\n                      </Fragment>\n                    )}\n                    {!selectedGender.female && (\n                      <Fragment>\n                        <IoWomanOutline color=\"white\" size={64} />\n                        <div\n                          style={{\n                            display: 'flex',\n                            justifyContent: 'center',\n                            flex: 1,\n                          }}\n                        >\n                          <StyledTypography\n                            variant=\"subtitle1\"\n                            weight={7}\n                            style={{\n                              color: 'white',\n                              fontFamily: 'Lato',\n                            }}\n                          >\n                            여자 (Female)\n                          </StyledTypography>\n                        </div>\n                      </Fragment>\n                    )}\n                  </StyledContainer>\n                </div>\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  이름\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <StyledInputBase name=\"memberName\" />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  전화번호\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <StyledInputBase name=\"memberTel\" />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  생년월일\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <KeyboardDatePicker\n                  name=\"memberBirth\"\n                  disableFuture\n                  openTo=\"year\"\n                  format=\"yyyy-MM-DD\"\n                  views={['year', 'month', 'date']}\n                  value={keyboardDate}\n                  onChange={handleKeyDateChange}\n                  onError={handleDateError}\n                  invalidDateMessage=\"잘못된 값을 입력하셨습니다.\"\n                  maxDateMessage=\"미래의 값은 입력할 수 없습니다.\"\n                  minDateMessage=\"1900/01/01부터 입력할 수 있습니다.\"\n                />\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  주소\n                </StyledTypography>\n              </Grid>\n\n              <Grid item xs={9}>\n                <StyledInputBase\n                  name=\"memberAddress1\"\n                  placeholder=\"우편 번호\"\n                  value={member_postal}\n                  readOnly\n                />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledButton\n                  bgColor=\"lightgray\"\n                  onClick={() => dispatch(setModalStatus(!isModalOpened))}\n                  // onClick={() => setOpenModal(true)}\n                >\n                  주소 찾기\n                </StyledButton>\n              </Grid>\n              <Grid item xs={12}>\n                <StyledInputBase\n                  name=\"memberAddress2\"\n                  placeholder=\"주소\"\n                  value={member_addr1}\n                  readOnly\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <StyledInputBase\n                  name=\"memberAddress3\"\n                  placeholder=\"상세 주소를 입력하세요.\"\n                />\n              </Grid>\n            </Grid>\n            <div>\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                이미지\n              </StyledTypography>\n              <ImageUploader\n                name=\"memberImage\"\n                withIcon={true}\n                buttonText=\"이미지를 선택해주세요.\"\n                onChange={onDrop}\n                imgExtension={['.jpg', '.png', '.jpeg']}\n                fileSizeError=\"파일사이즈가 너무 큽니다. 최대크기(5242880)\"\n                fileTypeError=\"파일확장자가 잘못되었습니다.\"\n                label=\"최대 파일 크기: 5mb, 확장자: jpg, png만 가능\"\n                maxFileSize={5242880}\n                singleImage\n                withPreview\n              />\n            </div>\n            <div>\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                자기소개\n              </StyledTypography>\n              <TextField\n                name=\"memberIntroduce\"\n                label=\"간단한 소개인사를 적어주세요.\"\n                multiline\n                rows={4}\n                variant=\"outlined\"\n                fullWidth\n              />\n            </div>\n            <div\n              style={{\n                marginTop: 15,\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <StyledTypography\n                variant=\"h6\"\n                component=\"h5\"\n                weight={5}\n                style={{ marginRight: 15 }}\n              >\n                색상선택\n              </StyledTypography>\n              <CirclePicker onChange={colorChange} />\n              <Paper\n                style={{\n                  width: 60,\n                  height: 60,\n                  marginLeft: 30,\n                  backgroundColor: currentColor,\n                }}\n              />\n            </div>\n            <div\n              style={{\n                position: 'fixed',\n                bottom: 30,\n                right: 20,\n                display: 'flex',\n                justifyContent: 'flex-end',\n              }}\n            >\n              <StyledButton type=\"submit\" bgColor=\"lightgray\">\n                임직원 추가\n              </StyledButton>\n            </div>\n            <PostalCodeModal />\n          </ResponsiveContainer>\n        </form>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default MemberDrawer;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  SwipeableDrawer,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Paper,\n} from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport useWindowSize from 'hooks/useWindowSize';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport PostalCodeModal from '../modal/PostalCodeModal';\nimport { setModalStatus } from 'redux/features/member/memberSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  isExistedEmail,\n  memberImageUpload,\n  modifyMemberInfo,\n} from 'apis/memberAPI';\nimport { v4 as uuid } from 'uuid';\nimport { CirclePicker } from 'react-color';\nimport ImageUploader from 'react-images-upload';\n\n/**\n * 이 DRAWER 컴포넌트는 임직원 수정사항을 작성하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * DRAWER (SwipeableDrawer)\n * * * 주소 검색 (PostalCodeModal)\n * * * 이미지 업로드 (ImageUploader)\n * * * 색상 선택 (CirclePicker)\n * @returns {JSX.Element}\n * @author Jong Hyun Hong\n */\nconst MemberUpdateDrawer = ({\n  isUpdateOpened,\n  setUpdateOpened,\n  memberData,\n  currentUser,\n  showMember,\n}) => {\n  const { breakpoint } = useWindowSize();\n\n  // 임직원의 권한을 설정할때 저장하는 상태\n  const [selectVal, setSelectVal] = useState('');\n\n  // 임직원의 이메일 중복체크의 확인여부를 저장하는 상태\n  const [isEmailChecked, setIsEmailChecked] = useState(false);\n\n  // 임직원 정보에 대한 데이터를 저장하는 상태\n  const [memberInfo, setMemberInfo] = useState({});\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  // 임직원의 색상을 저장하기 위한 상태\n  const [currentColor, setCurrentColor] = useState('');\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 데이터 변경시에 동작\n  const handleChange = (event) => {\n    // 이메일 변경시 중복체크 여부 재설정\n    if (event.target.name === 'memberEmail') {\n      setIsEmailChecked(false);\n    }\n    setMemberInfo({ ...memberInfo, [event.target.name]: event.target.value });\n    console.log(event.target.name);\n    console.log('값 변경: ', event.target.value);\n  };\n\n  // 이미지를 업로드하거나 취소할때의 동작\n  const onDrop = async (event, picture) => {\n    if (event.length === 0 || picture.length === 0) {\n      return;\n    }\n\n    try {\n      let ext = '.jpg';\n\n      if (event[0].type === 'image/jpeg') {\n        ext = '.jpg';\n      } else if (event[0].type === 'image/gif') {\n        ext = '.gif';\n      } else if (event[0].type === 'image/png') {\n        ext = '.png';\n      } else if (event[0].type === 'image/webp') {\n        ext = '.webp';\n      }\n\n      const imageName = uuid() + ext;\n\n      let imageInfo = {\n        hospitalCode: currentUser.hospitalCode,\n        imageName,\n        base64Content: picture[0],\n      };\n\n      await memberImageUpload(imageInfo);\n      const sendImageName = `/${imageInfo.hospitalCode}/${imageInfo.imageName}`;\n      setMemberInfo((prevState) => ({\n        ...prevState,\n        memberImage: sendImageName,\n      }));\n      // setPictures(imageInfo);\n    } catch (error) {\n      // const { message } = error.response.data;\n\n      handleAlert('error', '알 수 없는 이유로 이미지 업로드에 실패하였습니다.');\n      return;\n    }\n  };\n\n  //Drawer창이 켜졌을때 데이터 받아오기\n  useEffect(() => {\n    if (isUpdateOpened) {\n      setMemberInfo({\n        memberId: memberData.memberId,\n        memberName: memberData.memberName,\n        memberTel: memberData.memberTel,\n        memberAuthority: memberData.memberAuthority,\n        memberPostal: memberData.memberPostal,\n        memberAddr1: memberData.memberAddr1,\n        memberAddr2: memberData.memberAddr2,\n        memberColor: memberData.memberColor,\n        memberEmail: memberData.memberEmail,\n        memberImage: memberData.memberImage,\n        memberIntroduction: memberData.memberIntroduction,\n      });\n      console.log('updateOpened', memberData);\n      setSelectVal(memberData.memberAuthority);\n    }\n  }, [isUpdateOpened]);\n\n  const dispatch = useDispatch();\n  const isModalOpened = useSelector((state) => state.member.modalStatus);\n  const { member_postal, member_addr1 } = useSelector(\n    (state) => state.member.addressInfo,\n  );\n\n  // 색상 변경시 데이터 저장\n  useEffect(() => {\n    console.log('currentCOlor', currentColor);\n    setMemberInfo({\n      ...memberInfo,\n      memberColor: currentColor,\n    });\n  }, [currentColor]);\n\n  // 권한 변경시 데이터 저장\n  useEffect(() => {\n    console.log('memberAuthority', selectVal);\n    setMemberInfo({\n      ...memberInfo,\n      memberAuthority: selectVal,\n    });\n  }, [selectVal]);\n\n  // 주소 및 우편번호 변경시 데이터 저장\n  useEffect(() => {\n    setMemberInfo({\n      ...memberInfo,\n      memberPostal: member_postal,\n      memberAddr1: member_addr1,\n    });\n  }, [member_postal, member_addr1]);\n\n  // '변경' 버튼을 클릭시 동작\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      // 이메일 정규 표현식\n      const regExpEmail =\n        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n      // 전화번호 정규표현식\n      const regExpTel =\n        /^(01[016789]{1}|02|0[3-9]{1}[0-9]{1})-?[0-9]{3,4}-?[0-9]{4}$/;\n\n      const isValidEmail = regExpEmail.test(memberInfo.memberEmail);\n      const isValidTel = regExpTel.test(memberInfo.memberTel);\n\n      // 동일한 이메일주소\n      let sameEmail = false;\n      // 같은 이메일일때\n      if (memberInfo.memberEmail === memberData.memberEmail) {\n        sameEmail = true;\n      }\n      console.log('이메일 체크 상태: ', isEmailChecked);\n\n      if (!sameEmail) {\n        if (!isEmailChecked) {\n          handleAlert('error', '이메일 중복 체크를 해주세요.');\n          return;\n        }\n      } else if (!isValidEmail) {\n        handleAlert('error', '이메일을 올바른 형식으로 입력해주세요.');\n        return;\n      } else if (memberInfo.memberName === '') {\n        handleAlert('error', '이름이 공백입니다.');\n        return;\n      } else if (!isValidTel) {\n        handleAlert(\n          'error',\n          '전화번호를 제대로 입력해주세요.(공백 또는 ' - ' 사용)',\n        );\n        return;\n      } else if (\n        memberInfo.memberPostal === '' ||\n        memberInfo.memberAddr1 === ''\n      ) {\n        handleAlert('error', '주소가 공백입니다. 주소 검색을 해주세요.');\n        return;\n      } else if (memberInfo.memberAddr2 === '') {\n        handleAlert('error', '상세주소가 공백입니다. 상세주소를 입력해주세요.');\n        return;\n      } else if (memberInfo.memberColor === '') {\n        handleAlert('error', '색상이 없습니다. 색을 골라주세요.');\n        return;\n      }\n      console.log('modifyInfo', memberInfo);\n      await modifyMemberInfo(memberInfo);\n\n      handleAlert('success', '임직원 정보가 변경 되었습니다.');\n      showMember();\n      setUpdateOpened(false);\n    } catch (error) {\n      const { message } = error.response.data;\n\n      if (message === undefined) {\n        handleAlert(\n          'error',\n          '알 수 없는 이유로 임직원 정보 수정에 실패하였습니다.',\n        );\n        return;\n      }\n\n      handleAlert('error', message);\n      return;\n    }\n  };\n\n  //이메일 중복체크\n  const handleEmailChecked = async () => {\n    if (memberInfo.memberEmail === '') {\n      handleAlert('error', '이메일을 입력해주세요.');\n      return;\n    }\n\n    //유효성 검사\n    const regExpEmail =\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n    const isValidEmail = regExpEmail.test(memberInfo.memberEmail);\n    if (!isValidEmail) {\n      handleAlert('error', '이메일을 올바른 형식으로 입력해주세요.');\n      return;\n    }\n\n    try {\n      if (memberInfo.memberEmail !== memberData.memberEmail) {\n        const { data } = await isExistedEmail(memberInfo.memberEmail);\n        console.log('이메일검사 결과: ', data);\n        handleAlert('success', '이메일을 사용해도 좋습니다.');\n      }\n      setIsEmailChecked(true);\n    } catch (error) {\n      handleAlert('error', '중복된 이메일 입니다. 다른 이메일을 사용해주세요.');\n      return;\n    }\n  };\n\n  // 색상 변경시 동작\n  const colorChange = (color, event) => {\n    if (color) {\n      setCurrentColor(color.hex);\n      console.log(color.hex);\n    }\n  };\n\n  useEffect(() => {\n    if (breakpoint !== undefined) {\n      console.log('Current breakpoint is', breakpoint);\n    }\n  }, [breakpoint]);\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    setUpdateOpened(open);\n  };\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isUpdateOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <form onSubmit={handleSubmit}>\n          <ResponsiveContainer breakpoint={breakpoint}>\n            <DrawerHeader breakpoint={breakpoint}>\n              <h1>직원 정보 변경 - {memberData.memberName}님</h1>\n              <div>\n                <AiOutlineClose\n                  size={32}\n                  onClick={() => setUpdateOpened(false)}\n                />\n              </div>\n            </DrawerHeader>\n\n            <Grid container spacing={1} style={{ padding: '1rem' }}>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  직책\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <FormControl style={{ width: '100%' }} variant=\"outlined\">\n                  <InputLabel id=\"form-label\">의사</InputLabel>\n                  <Select\n                    labelId=\"form-label\"\n                    id=\"select-label\"\n                    label=\"직책\"\n                    value={selectVal}\n                  >\n                    <MenuItem\n                      value=\"ROLE_DOCTOR\"\n                      onClick={() => setSelectVal('ROLE_DOCTOR')}\n                    >\n                      의사\n                    </MenuItem>\n                    <MenuItem\n                      value=\"ROLE_NURSE\"\n                      onClick={() => setSelectVal('ROLE_NURSE')}\n                    >\n                      간호사\n                    </MenuItem>\n                    <MenuItem\n                      value=\"ROLE_INSPECTOR\"\n                      onClick={() => setSelectVal('ROLE_INSPECTOR')}\n                    >\n                      검사자\n                    </MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  이메일\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={7}>\n                <StyledInputBase\n                  name=\"memberEmail\"\n                  onChange={handleChange}\n                  value={memberInfo.memberEmail || ''}\n                />\n              </Grid>\n              <Grid\n                item\n                xs={2}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledButton\n                  bgColor=\"lightgray\"\n                  onClick={() => handleEmailChecked()}\n                >\n                  중복 체크\n                </StyledButton>\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  이름\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <StyledInputBase\n                  name=\"memberName\"\n                  value={memberInfo.memberName || ''}\n                  onChange={handleChange}\n                />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  전화번호\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <StyledInputBase\n                  name=\"memberTel\"\n                  value={memberInfo.memberTel || ''}\n                  onChange={handleChange}\n                />\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  주소\n                </StyledTypography>\n              </Grid>\n\n              <Grid item xs={9}>\n                <StyledInputBase\n                  name=\"memberPostal\"\n                  placeholder=\"우편 번호\"\n                  value={memberInfo.memberPostal || ''}\n                  onChange={handleChange}\n                  readOnly\n                />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledButton\n                  bgColor=\"lightgray\"\n                  onClick={() => dispatch(setModalStatus(!isModalOpened))}\n                >\n                  주소 찾기\n                </StyledButton>\n              </Grid>\n              <Grid item xs={12}>\n                <StyledInputBase\n                  name=\"memberAddr1\"\n                  placeholder=\"주소\"\n                  value={memberInfo.memberAddr1 || ''}\n                  onChange={handleChange}\n                  readOnly\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <StyledInputBase\n                  name=\"memberAddr2\"\n                  placeholder=\"상세 주소를 입력하세요.\"\n                  value={memberInfo.memberAddr2 || ''}\n                  onChange={handleChange}\n                />\n              </Grid>\n            </Grid>\n\n            <div>\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                이미지\n              </StyledTypography>\n              <ImageUploader\n                name=\"memberImage\"\n                withIcon={true}\n                buttonText=\"이미지를 선택해주세요.\"\n                onChange={onDrop}\n                imgExtension={['.jpg', '.png', '.jpeg']}\n                fileSizeError=\"파일사이즈가 너무 큽니다. 최대크기(5242880)\"\n                fileTypeError=\"파일확장자가 잘못되었습니다.\"\n                label=\"최대 파일 크기: 5mb, 확장자: jpg, png만 가능\"\n                maxFileSize={5242880}\n                singleImage\n                withPreview\n              />\n            </div>\n            <div>\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                자기소개\n              </StyledTypography>\n              <TextField\n                name=\"memberIntroduction\"\n                value={memberInfo.memberIntroduction || ''}\n                onChange={handleChange}\n                label=\"간단한 소개인사를 적어주세요.\"\n                multiline\n                rows={4}\n                variant=\"outlined\"\n                fullWidth\n              />\n            </div>\n            <div\n              style={{\n                marginTop: 15,\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <StyledTypography\n                variant=\"h6\"\n                component=\"h5\"\n                weight={5}\n                style={{ marginRight: 15 }}\n              >\n                색상선택\n              </StyledTypography>\n              <CirclePicker onChange={colorChange} />\n              <Paper\n                style={{\n                  width: 60,\n                  height: 60,\n                  marginLeft: 30,\n                  backgroundColor: memberInfo.memberColor || '',\n                }}\n              />\n            </div>\n\n            <div\n              style={{\n                position: 'fixed',\n                bottom: 30,\n                right: 20,\n                display: 'flex',\n                justifyContent: 'flex-end',\n              }}\n            >\n              <StyledButton type=\"submit\" bgColor=\"lightgray\">\n                정보 변경\n              </StyledButton>\n            </div>\n            <PostalCodeModal />\n          </ResponsiveContainer>\n        </form>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default MemberUpdateDrawer;\n","import React, { Fragment } from 'react';\nimport { makeStyles, Modal, Backdrop, IconButton } from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useSnackbar } from 'notistack';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport { deleteMember } from 'apis/memberAPI';\n\n/**\n * 이 모달 컴포넌트는 삭제할때의 여부를 재확인해주기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * 모달 (Modal)\n * @returns {JSX.Element}\n * @author Jong Hyun Hong\n */\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyItems: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst DeleteModal = ({ isOpenModal, setOpenModal, memberData, showMember }) => {\n  const classes = useStyles();\n  const { breakpoint } = useWindowSize();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  const handleClose = () => {\n    setOpenModal(false);\n  };\n\n  const removeMember = async () => {\n    try {\n      const { data, status } = await deleteMember(memberData.memberId);\n      console.log(data);\n      console.log(memberData.memberId);\n      handleAlert('success', '삭제되었습니다.');\n      showMember();\n    } catch (error) {\n      handleAlert('error', '삭제도중 오류가 발생하였습니다.');\n    }\n    setOpenModal(false);\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isOpenModal}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        style={{\n          justifyContent: 'center',\n        }}\n      >\n        <SpringFade in={isOpenModal}>\n          <div\n            className={classes.paper}\n            style={{ display: 'flex', flexDirection: 'column' }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  임직원 삭제 - {memberData.memberName}님\n                </StyledTypography>\n                <div>\n                  <IconButton>\n                    <AiOutlineClose\n                      size={24}\n                      onClick={() => setOpenModal(false)}\n                    />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  flexDirection: 'column',\n                }}\n              >\n                <StyledTypography variant=\"h4\" component=\"h5\" weight={6}>\n                  정말 삭제하겠습니까?\n                </StyledTypography>\n\n                <div\n                  style={{\n                    maxWidth: '300px',\n                    display: 'flex',\n                  }}\n                >\n                  <img\n                    src=\"http://localhost:3000/assets/image/question.jpeg\"\n                    alt=\"deleteImg\"\n                    width=\"100%\"\n                  />\n                </div>\n              </div>\n              <div\n                style={{\n                  marginTop: '1rem',\n                  marginBottom: '1rem',\n                  marginLeft: '12rem',\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledButton\n                  bgColor=\"rgb(11, 83, 151)\"\n                  color=\"white\"\n                  width=\"60\"\n                  onClick={() => removeMember()}\n                  display=\"flex\"\n                >\n                  확인\n                </StyledButton>\n                <StyledButton\n                  bgColor=\"rgba(165, 10, 17, 0.637)\"\n                  color=\"white\"\n                  width=\"60\"\n                  onClick={() => setOpenModal(false)}\n                >\n                  취소\n                </StyledButton>\n              </div>\n            </ResponsiveContainer>\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default DeleteModal;\n","import React from 'react';\nimport { css } from 'styled-components';\nimport PacmanLoader from 'react-spinners/PacmanLoader';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: lightblue;\n`;\n\nconst PacmanSpinner = ({ isLoading }) => (\n  <div style={{ width: '100%', display: 'flex' }}>\n    <PacmanLoader\n      color=\"lightblue\"\n      loading={isLoading}\n      css={override}\n      size={30}\n    />\n  </div>\n);\n\nexport default PacmanSpinner;\n","import React, { useState, useEffect, Fragment } from 'react';\nimport {\n  Divider,\n  Grid,\n  Table,\n  TableContainer,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableFooter,\n  TablePagination,\n  Paper,\n  Button,\n  IconButton,\n  Avatar,\n} from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport ContentContainer from 'components/common/container/ContentContainer';\nimport TitleHeader from 'components/common/header/TitleHeader';\nimport SearchBox from 'components/common/search/SearchBox';\nimport MemberDrawer from 'components/member/drawer/MemberDrawer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport MemberUpdateDrawer from 'components/member/drawer/MemberUpdateDrawer';\nimport DeleteModal from 'components/member/modal/DeleteModal';\nimport { BiRefresh } from 'react-icons/bi';\nimport { FiRefreshCcw } from 'react-icons/fi';\nimport ResponsivePageHeader from 'components/common/header/ResponsivePageHeader';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport {\n  intializeMemberPw,\n  showMembersListByHospitalCode,\n  showMembersListByNameAndCode,\n} from 'apis/memberAPI';\nimport { useSelector } from 'react-redux';\nimport PacmanSpinner from 'components/common/spinner/PacmanSpinner';\n\n/**\n * 이 페이지 컴포넌트는 임직원 관리 페이지를 작성하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * Sider\n * * Header\n * * 임직원 관리 ( MemberDrawer, MemberUpdateDrawer, DeleteModal, Table, ColoredButton)\n * @returns {JSX.Element}\n * @author Jong Hyun Hong\n */\nconst MemberPage = () => {\n  const [isOpened, setOpened] = useState(false);\n  const [isUpdateOpened, setUpdateOpened] = useState(false);\n  const [searchVal, setSearchVal] = useState('');\n\n  const [selectedData, setSelectedData] = useState('');\n  const [member, setMember] = useState([]);\n\n  //page설정 상태관리\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const [isOpenModal, setOpenModal] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n\n  //스피너상태\n  const [isLoading, setLoading] = useState(true);\n\n  //현재 사용자\n  const currentUser = useSelector((state) => state.common.loginInfo);\n\n  //임직원 정보 가져오기\n  async function showMember() {\n    try {\n      const { data, status } = await showMembersListByHospitalCode(\n        currentUser.hospitalCode,\n      );\n      setMember(data.data);\n      setLoading(false);\n    } catch (error) {\n      handleAlert('error', 'error: 임직원 정보 가져오기');\n      setLoading(false);\n    }\n  }\n\n  // 검색하기\n  async function showSearchMember(searchKeyword) {\n    if (searchKeyword.trim() === '' || searchKeyword === undefined) {\n      return;\n    }\n    let memberSearchInfo = {\n      memberName: searchKeyword,\n      hospitalCode: currentUser.hospitalCode,\n    };\n\n    try {\n      const { data, status } = await showMembersListByNameAndCode(\n        memberSearchInfo,\n      );\n      if (data) {\n        // 검색 결과 존재\n        setMember(data.data);\n      } else {\n        //검색 결과 없음\n        handleAlert('error', '검색결과가 없습니다.');\n        return;\n      }\n    } catch (error) {\n      console.log(error.response.data);\n      handleAlert('error', 'error: 검색도중 오류발생');\n    }\n  }\n\n  //전체 리스트 받아오기\n  useEffect(() => {\n    setLoading(true);\n    showMember();\n  }, []);\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  //페이지상태 이벤트(페이지 이동시)\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  //페이지당 보여줄 컬럼개수\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  //비밀번호 초기화\n  const handleInitPassword = async (memberData) => {\n    try {\n      const { data, status } = await intializeMemberPw(memberData.memberId);\n      console.log('초기화 결과: ', data);\n      handleAlert(\n        'success',\n        `${memberData.memberName}님의 비밀번호가 초기화되었습니다. (!@#douzone1234)`,\n      );\n    } catch (error) {\n      handleAlert('error', '비밀번호 초기화 중 에러발생');\n    }\n  };\n\n  //검색 초기화\n  const handleRefresh = () => {\n    setPage(0);\n    setSearchVal('');\n    showMember();\n  };\n\n  //검색했을때 동작\n  useEffect(() => {\n    console.log(searchVal);\n    setPage(0);\n    showSearchMember(searchVal);\n    console.log('검색했을때 동작-useEffect[searchVal]');\n  }, [searchVal]);\n\n  return (\n    <div>\n      {isLoading && (\n        <div\n          style={{\n            width: '100%',\n            height: '90vh',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <PacmanSpinner />\n        </div>\n      )}\n      {!isLoading && (\n        <Fragment>\n          <header\n            style={{\n              position: 'sticky',\n              top: 0,\n              backgroundColor: 'white',\n              zIndex: 1,\n            }}\n          >\n            <ResponsivePageHeader />\n          </header>\n          <main>\n            <Grid container>\n              <Grid item xs={12}>\n                <PageTransition>\n                  <ContentContainer>\n                    <TitleHeader>\n                      <span>병원 | </span>\n                      <span>임직원 관리</span>\n                    </TitleHeader>\n                    <br />\n                    <Grid container>\n                      <Grid item xs={9} lg={4}>\n                        <SearchBox\n                          setSearchVal={setSearchVal}\n                          placeholder=\"임직원 이름을 입력해주세요.\"\n                        />\n                      </Grid>\n                      <Grid item xs={1} lg={2}>\n                        <IconButton\n                          color=\"primary\"\n                          size=\"medium\"\n                          onClick={handleRefresh}\n                          style={{ marginLeft: '20px', marginTop: '10px' }}\n                        >\n                          <FiRefreshCcw />\n                        </IconButton>\n                      </Grid>\n                      <Grid\n                        item\n                        xs={2}\n                        lg={6}\n                        style={{\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'flex-end',\n                        }}\n                      >\n                        {currentUser.memberAuthority === 'ROLE_DEVELOP' ||\n                        currentUser.memberAuthority === 'ROLE_DIRECTOR' ? (\n                          <StyledButton\n                            width=\"100px\"\n                            bgColor=\"rgb(30, 51, 71)\"\n                            color=\"white\"\n                            onClick={() => setOpened((prevState) => !prevState)}\n                          >\n                            추가\n                          </StyledButton>\n                        ) : null}\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Paper>\n                          <TableContainer\n                            style={{ marginTop: '1rem', marginBottom: '1rem' }}\n                          >\n                            <Table\n                              style={{ minWidth: '600px', overflowX: 'scroll' }}\n                            >\n                              <TableHead>\n                                <TableRow>\n                                  <TableCell\n                                    component=\"td\"\n                                    style={{\n                                      minWidth: '40px',\n                                      overflowX: 'scroll',\n                                    }}\n                                  >\n                                    직책\n                                  </TableCell>\n                                  <TableCell\n                                    component=\"td\"\n                                    style={{\n                                      minWidth: '50px',\n                                      overflowX: 'scroll',\n                                    }}\n                                  ></TableCell>\n                                  <TableCell\n                                    component=\"td\"\n                                    style={{\n                                      minWidth: '100px',\n                                      overflowX: 'scroll',\n                                    }}\n                                  >\n                                    이름{'&'}생년월일\n                                  </TableCell>\n                                  {currentUser.memberAuthority ===\n                                    'ROLE_DEVELOP' ||\n                                  currentUser.memberAuthority ===\n                                    'ROLE_DIRECTOR' ? (\n                                    <TableCell\n                                      component=\"td\"\n                                      style={{\n                                        minWidth: '100px',\n                                        overflowX: 'scroll',\n                                      }}\n                                    >\n                                      이메일{'&'}연락처\n                                    </TableCell>\n                                  ) : (\n                                    <Fragment>\n                                      <TableCell\n                                        component=\"td\"\n                                        style={{\n                                          minWidth: '100px',\n                                          overflowX: 'scroll',\n                                        }}\n                                      >\n                                        이메일\n                                      </TableCell>\n                                      <TableCell\n                                        component=\"td\"\n                                        style={{\n                                          minWidth: '100px',\n                                          overflowX: 'scroll',\n                                        }}\n                                      >\n                                        연락처\n                                      </TableCell>\n                                    </Fragment>\n                                  )}\n                                  <TableCell\n                                    component=\"td\"\n                                    style={{\n                                      minWidth: '200px',\n                                      overflowX: 'scroll',\n                                    }}\n                                  >\n                                    주소\n                                  </TableCell>\n                                  {currentUser.memberAuthority ===\n                                    'ROLE_DEVELOP' ||\n                                  currentUser.memberAuthority ===\n                                    'ROLE_DIRECTOR' ? (\n                                    <Fragment>\n                                      <TableCell\n                                        component=\"td\"\n                                        style={{\n                                          minWidth: '100px',\n                                          overflowX: 'scroll',\n                                        }}\n                                      ></TableCell>\n                                      {/* <TableCell\n                                        component=\"td\"\n                                        style={{\n                                          minWidth: '100px',\n                                          overflowX: 'scroll',\n                                        }}\n                                      ></TableCell> */}\n                                      <TableCell\n                                        component=\"td\"\n                                        style={{\n                                          minWidth: '100px',\n                                          overflowX: 'scroll',\n                                        }}\n                                      ></TableCell>\n                                    </Fragment>\n                                  ) : null}\n                                </TableRow>\n                              </TableHead>\n                              <TableBody>\n                                {member\n                                  .slice(\n                                    page * rowsPerPage,\n                                    (page + 1) * rowsPerPage,\n                                  )\n                                  .map((data) => (\n                                    <Fragment key={data.memberId}>\n                                      {console.log('JONG HYUN HAT DA', data)}\n                                      <TableRow hover=\"true\">\n                                        <TableCell component=\"th\">\n                                          {data.memberAuthority ===\n                                            'ROLE_DEVELOP' && '개발자'}\n                                          {data.memberAuthority ===\n                                            'ROLE_DIRECTOR' && '병원장'}\n                                          {data.memberAuthority ===\n                                            'ROLE_DOCTOR' && '의사'}\n                                          {data.memberAuthority ===\n                                            'ROLE_INSPECTOR' && '검사자'}\n                                          {data.memberAuthority ===\n                                            'ROLE_NURSE' && '간호사'}\n                                        </TableCell>\n                                        <TableCell component=\"th\">\n                                          {data.memberImage !== null &&\n                                          data.memberImage.trim() !== '' ? (\n                                            <Avatar\n                                              src={`${process.env.REACT_APP_SERVER_PATH}/image?path=${data.memberImage}`}\n                                            />\n                                          ) : (\n                                            <Avatar\n                                              style={{\n                                                backgroundColor:\n                                                  data.memberColor,\n                                              }}\n                                            />\n                                          )}\n                                        </TableCell>\n                                        <TableCell component=\"th\">\n                                          <p\n                                            style={{\n                                              marginBottom: '0.325rem',\n                                            }}\n                                          >\n                                            {data.memberName}\n                                          </p>\n                                          <Divider />\n                                          <p\n                                            style={{\n                                              marginTop: '0.325rem',\n                                            }}\n                                          >\n                                            {' '}\n                                            {data.memberBirth}\n                                          </p>\n                                        </TableCell>\n                                        {currentUser.memberAuthority ===\n                                          'ROLE_DEVELOP' ||\n                                        currentUser.memberAuthority ===\n                                          'ROLE_DIRECTOR' ? (\n                                          <TableCell component=\"th\">\n                                            <p\n                                              style={{\n                                                marginBottom: '0.325rem',\n                                              }}\n                                            >\n                                              {data.memberEmail}\n                                            </p>\n                                            <Divider />\n                                            <p\n                                              style={{\n                                                marginTop: '0.325rem',\n                                              }}\n                                            >\n                                              {' '}\n                                              {data.memberTel}\n                                            </p>\n                                          </TableCell>\n                                        ) : (\n                                          <Fragment>\n                                            <TableCell component=\"th\">\n                                              {data.memberEmail}\n                                            </TableCell>\n                                            <TableCell component=\"th\">\n                                              {data.memberTel}\n                                            </TableCell>\n                                          </Fragment>\n                                        )}\n                                        <TableCell component=\"th\">\n                                          {data.memberAddr1} -{' '}\n                                          {data.memberAddr2}\n                                        </TableCell>\n                                        {currentUser.memberAuthority ===\n                                          'ROLE_DEVELOP' ||\n                                        currentUser.memberAuthority ===\n                                          'ROLE_DIRECTOR' ? (\n                                          <Fragment>\n                                            <TableCell component=\"th\">\n                                              <StyledButton\n                                                bgColor=\"rgb(11, 83, 151)\"\n                                                color=\"white\"\n                                                onClick={() => {\n                                                  setUpdateOpened(\n                                                    (prevState) => !prevState,\n                                                  );\n                                                  setSelectedData(data);\n                                                }}\n                                              >\n                                                변경\n                                              </StyledButton>\n                                            </TableCell>\n                                            {/* <TableCell component=\"th\">\n                                              <StyledButton\n                                                bgColor=\"rgba(165, 10, 17, 0.637)\"\n                                                color=\"white\"\n                                                onClick={() => {\n                                                  setOpenModal(\n                                                    (prevState) => !prevState,\n                                                  );\n                                                  setSelectedData(data);\n                                                }}\n                                              >\n                                                삭제\n                                              </StyledButton>\n                                            </TableCell> */}\n                                            <TableCell component=\"th\">\n                                              <Button\n                                                size=\"small\"\n                                                bgColor=\"rgba(11, 131, 31, 0.795)\"\n                                                color=\"white\"\n                                                onClick={() => {\n                                                  handleInitPassword(data);\n                                                }}\n                                                endIcon={<BiRefresh />}\n                                              >\n                                                비밀번호 초기화\n                                              </Button>\n                                            </TableCell>\n                                          </Fragment>\n                                        ) : null}\n                                      </TableRow>\n                                    </Fragment>\n                                  ))}\n                              </TableBody>\n                              <TableFooter>\n                                <TableRow>\n                                  <TablePagination\n                                    count={member.length}\n                                    page={page}\n                                    rowsPerPage={rowsPerPage}\n                                    onChangePage={handleChangePage}\n                                    onChangeRowsPerPage={\n                                      handleChangeRowsPerPage\n                                    }\n                                    rowsPerPageOptions={[5, 10, 25]}\n                                  />\n                                </TableRow>\n                              </TableFooter>\n                            </Table>\n                          </TableContainer>\n                        </Paper>\n                      </Grid>\n                    </Grid>\n\n                    {/* 추가 Drawer \n                  isOpened, setOpened: Drawer 오픈상태 \n                  setMember: memberData에 대한 정보 수정에 대한 상태setter전달\n                  currentUser: 현재 회원(병원코드, 이메일, 권한 등) \n              */}\n                    <MemberDrawer\n                      isOpened={isOpened}\n                      setOpened={setOpened}\n                      currentUser={currentUser}\n                      showMember={showMember}\n                    />\n                    {/* 수정 Drawer \n                  isUpdateOpened, setUpdateOpened: Drawer 오픈상태\n                  memberData: 선택한 멤버정보 전달\n                  setMember: memberData에 대한 정보 수정에 대한 상태setter전달\n              */}\n                    <MemberUpdateDrawer\n                      isUpdateOpened={isUpdateOpened}\n                      setUpdateOpened={setUpdateOpened}\n                      memberData={selectedData}\n                      currentUser={currentUser}\n                      showMember={showMember}\n                    />\n                    {/* 삭제 Modal */}\n                    <DeleteModal\n                      isOpenModal={isOpenModal}\n                      setOpenModal={setOpenModal}\n                      memberData={selectedData}\n                      showMember={showMember}\n                    />\n                  </ContentContainer>\n                </PageTransition>\n              </Grid>\n            </Grid>\n          </main>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default MemberPage;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {setGenderStatus} from \"redux/features/member/memberSlice\";\nimport { Grid } from '@material-ui/core';\nimport { IoManOutline, IoWomanOutline } from 'react-icons/io5';\nimport StyledContainer from 'components/common/container/StyledContainer';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\n/**\n * 이 페이지 컴포넌트는 환자의 성별을 작성한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * Sider\n * * Header\n * * 환자 관리 (PatientSearch, Table, ColoredButton)\n * @returns {JSX.Element}\n * @author SI HYUN PARK\n */\nconst SelectedMan = () => {\n\n  const dispatch = useDispatch();\n  const genderStatus = useSelector((state) => state.member.gender);\n  // 성별 선택을 위한 상태 데이터\n  const [selectedGender, setSelectedGender] = useState({\n    male: false,\n    female: false,\n  });\n\n  useEffect(() => {\n     dispatch(setGenderStatus('male'));\n  }, [dispatch])\n\n  // 남,여 클릭시 변경하기 위한 onChange\n  const handleChange = (name) => {\n    // console.log(name);\n    // let balance = '';\n    // if (name === 'male') {\n    //   balance = 'female';\n    // } else {\n    //   balance = 'male';\n    // }\n\n    // const value = selectedGender[name];\n    // let balanceValue = selectedGender[balance];\n    // if (!value === balanceValue) {\n    //   balanceValue = !balanceValue;\n    // }\n    // setSelectedGender({\n    //   ...selectedGender,\n    //   [name]: !value,\n    //   [balance]: balanceValue,\n    // });\n    dispatch(setGenderStatus(name));\n  };\n \n\n\n  return (\n    <Fragment>\n      <main>\n        <Grid container>\n          <Grid item xs={12} sm={8} md={9} lg={10}>\n            <div>\n              <div\n                style={{ display: 'flex', maxWidth: '400px', height: '70px' }}\n              >\n                <StyledContainer\n                  bgColor=\"rgb(62,63,70)\"\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                  }}\n                  onClick={() => handleChange('male')}\n                >\n                  {genderStatus === 'female' && (\n                    <Fragment>\n                      <IoManOutline color=\"rgb(217,217,217)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{ color: 'white', fontFamily: 'Lato' }}\n                        >\n                          남자 (Male)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                  {genderStatus === 'male' && (\n                    <Fragment>\n                      <IoManOutline color=\"rgb(244,213,51)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{\n                            color: 'rgb(244,213,51)',\n                            fontFamily: 'Lato',\n                          }}\n                        >\n                          남자 (Male)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                </StyledContainer>\n                <StyledContainer\n                  bgColor=\"rgb(62,63,70)\"\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                  }}\n                  onClick={() => handleChange('female')}\n                >\n                  {genderStatus === 'male' && (\n                    <Fragment>\n                      <IoWomanOutline color=\"rgb(217,217,217)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{ color: 'white', fontFamily: 'Lato' }}\n                        >\n                          여자 (Female)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                  {genderStatus === 'female' && (\n                    <Fragment>\n                      <IoWomanOutline color=\"rgb(244,213,51)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{\n                            color: 'rgb(244,213,51)',\n                            fontFamily: 'Lato',\n                          }}\n                        >\n                          여자 (Female)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                </StyledContainer>\n              </div>\n            </div>\n          </Grid>\n        </Grid>\n      </main>\n    </Fragment>\n  );\n};\n\nexport default SelectedMan;\n","import React, { Fragment } from 'react';\nimport Postcode from 'react-daum-postcode';\nimport { makeStyles, Modal, Backdrop, IconButton } from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport SpringFade from 'components/common/fade/SpringFade';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\n\n/**\n * 이 페이지 컴포넌트는 주소 데이터를 가져오기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * Sider\n * * Header\n * * 환자 관리 (PatientSearch, Table, ColoredButton)\n * @returns {JSX.Element}\n * @author SI HYUN PARK\n */\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  paper: {\n    minHeight: '400px',\n    minWidth: '400px',\n    maxWidth: '920px',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid rgba(0,0,0,0.12)',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst AddressModal = ({ isModalOpened, setModalOpened,addressClick }) => {\n  const classes = useStyles();\n  const { breakpoint } = useWindowSize();\n\n \n  // 주소데이터를 세팅하는 부분\n  const handleComplete = (data) => {\n    \n    let fullAddress = data.address;\n    let extraAddress = '';\n\n    if (data.addressType === 'R') {\n      if (data.bname !== '') {\n        extraAddress += data.bname;\n      }\n\n      if (data.buildingName !== '') {\n        extraAddress +=\n          extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName;\n      }\n      fullAddress += extraAddress !== '' ? ` (${extraAddress})` : '';\n    }\n    const postalcode = data.zonecode;\n    //주소데이터를 세팅해서 상위 컴포넌트에 주소데이터를 전달한다\n    addressClick({ fullAddress, postalcode });\n     \n    setModalOpened(false);\n  };\n\n  const handleClose = () => setModalOpened(false);\n\n  return (\n    <Fragment>\n      <Modal\n        className={classes.modal}\n        open={isModalOpened}\n        onClose={() => handleClose()}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <SpringFade in={isModalOpened}>\n          <div\n            className={classes.paper}\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            <ResponsiveContainer breakpoint={breakpoint} style={{ flex: 1 }}>\n              <DrawerHeader breakpoint={breakpoint}>\n                <StyledTypography variant=\"h5\" component=\"h5\" weight={7}>\n                  주소찾기\n                </StyledTypography>\n                <div>\n                  <IconButton\n                    onClick={() => setModalOpened(false)}\n                  >\n                    <AiOutlineClose size={24} />\n                  </IconButton>\n                </div>\n              </DrawerHeader>\n            </ResponsiveContainer>\n            <Postcode onComplete={handleComplete} />\n          </div>\n        </SpringFade>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default AddressModal;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setGenderStatus } from 'redux/features/member/memberSlice';\nimport moment from 'moment';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { registerPatientInfo } from 'apis/patientAPI';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\nimport { SwipeableDrawer, Grid } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport SelectedMan from '../selectedGender/selectedGender';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport useWindowSize from 'hooks/useWindowSize';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport PatientModal from '../modal/Modal';\n\n/**\n * 이 페이지 컴포넌트는 환자를 추가하기 위해 작성한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * Sider\n * * Header\n * * 환자 관리 (PatientSearch, Table, ColoredButton)\n * @returns {JSX.Element}\n * @author SI HYUN PARK\n */\nconst PatientDrawer = ({\n  isOpened,\n  setOpened,\n  setDisplay,\n}) => {\n  // redux에서 선택된 성별을 가져온다\n  const gender = useSelector((state) => state.member.gender);\n\n  // 로그 유저에 대한 정보\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n  const dispatch = useDispatch();\n  const { breakpoint } = useWindowSize();\n\n  // 주소 API를 나타내는 상태 데이터\n  const [isModalOpened, setModalOpened] = useState(false);\n\n  // 생년월일 (데이터 피커)에 대한 상태 데이터\n  const [keyboardDate, handleKeyDateChange] = useState(new Date());\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 데이터 베이스에 추가하기 위한 객체 상태 데이터\n  const [isPatient, setPatient] = useState({\n    patientName: '',\n    patientSsn: '',\n    patientBirth: '',\n    patientAddr1: '',\n    patientAddr2: '',\n    patientPostal: '',\n    patientTel: '',\n    patientHeight: '',\n    patientWeight: '',\n    patientGender: '',\n    recentDate: '',\n    hospitalCode: '',\n  });\n\n  useEffect(() => {\n    if (breakpoint !== undefined) {\n      console.log('Current breakpoint is', breakpoint);\n    }\n  }, [breakpoint]);\n\n  //fuction(open){function(e){}}\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    setOpened(open);\n  };\n  // 추가버튼 클릭시 일어나는 이벤트\n  const addHandleClick = async () => {\n    // 생년월일, 환자의 ssn, 등록일을 세팅하는 부분\n    isPatient.patientBirth = moment(keyboardDate).format('YYYY-MM-DD');\n    isPatient.patientSsn = moment(keyboardDate).format('YYYY-MM-DD');\n    isPatient.recentDate = moment(new Date()).format('yyyy-MM-DDTHH:mm');\n    // 유효성 검사\n    if (isPatient.patientName === undefined || isPatient.patientName === '') {\n      handleAlert('error', '이름을 입력해주세요.');\n      return;\n    }\n\n    if (gender === '') {\n      handleAlert('error', '성별을 선택해주세요.');\n      return;\n    } else {\n      isPatient.patientGender = gender;\n    }\n\n    if (isPatient.patientBirth === '') {\n      handleAlert('error', '생년월일을 입력해주세요.');\n      return;\n    }\n    const reg = /^[0-9]{3}[-]+[0-9]{4}[-]+[0-9]{4}$/;\n    if (!reg.test(isPatient.patientTel)) {\n      handleAlert('error', '전화번호 형식이 맞지 않습니다.');\n\n      return;\n    }\n\n    if (\n      Number.parseInt(isPatient.patientHeight) === isNaN ||\n      isPatient.patientHeight === undefined\n    ) {\n      handleAlert('error', '키는 숫자만 입력 가능합니다.');\n      return;\n    }\n    if (\n      Number.parseInt(isPatient.patientWeight) === isNaN ||\n      isPatient.patientWeight === undefined\n    ) {\n      handleAlert('error', '몸무게 숫자만 입력 가능합니다.');\n      return;\n    }\n    if (\n      isPatient.patientPostal === undefined ||\n      isPatient.patientAddr1 === undefined\n    ) {\n      handleAlert('error', '주소를 입력해주세요.');\n      return;\n    }\n    isPatient.hospitalCode = loginInfo.hospitalCode;\n    console.log(isPatient);\n\n    try {\n      const { data } = await registerPatientInfo(isPatient);\n      console.log(data.data);\n      handleAlert('success', '환자가 등록되었습니다.');\n      setDisplay(true);\n      setPatient({});\n      dispatch(setGenderStatus(''));\n      handleKeyDateChange(new Date());\n      setOpened(false);\n    } catch (error) {\n      const { message } = error.response.data;\n      console.log(message);\n      handleAlert('error', message);\n    }\n  };\n\n  // 환자의 입력정보를 담아내는 onChange 함수\n  const handleChange = (event) => {\n    setPatient({\n      ...isPatient,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // 클릭시 주소 모달창이 나타난다\n  const findAddressHandle = () => {\n    setModalOpened(true);\n  };\n  // 주소모달창에 넘겨줄 props, 이 함수를 통해 주소값을 가져온다\n  const addressClick = ({ fullAddress, postalcode }) => {\n    setPatient({\n      ...isPatient,\n      patientPostal: postalcode,\n      patientAddr1: fullAddress,\n    });\n  };\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer breakpoint={breakpoint}>\n          <DrawerHeader breakpoint={breakpoint}>\n            <h1>환자 추가</h1>\n            <div>\n              <AiOutlineClose\n                size={32}\n                onClick={() => {\n                  setOpened(false);\n                  setPatient({});\n                  dispatch(setGenderStatus(''));\n                }}\n              />\n            </div>\n          </DrawerHeader>\n\n          <Grid\n            container\n            spacing={1}\n            alignItems=\"center\"\n            justify=\"center\"\n            style={{ padding: '1rem' }}\n          >\n            <Grid\n              item\n              xs={3}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                이름\n              </StyledTypography>\n            </Grid>\n            <Grid item xs={9}>\n              <StyledInputBase\n                name=\"patientName\"\n                onChange={handleChange}\n                style={{ width: '53%' }}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={3}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                marginTop: '1em',\n              }}\n            >\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                성별\n              </StyledTypography>\n            </Grid>\n            <Grid item xs={9} style={{ marginTop: '1em' }}>\n              <SelectedMan />\n            </Grid>\n\n            <Grid\n              item\n              xs={3}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <StyledTypography\n                variant=\"h6\"\n                component=\"h5\"\n                weight={5}\n                style={{ marginTop: '1em', marginBottom: '1em' }}\n              >\n                생년월일\n              </StyledTypography>\n            </Grid>\n            <Grid item xs={9} style={{ marginTop: '1em', marginBottom: '1em' }}>\n              <KeyboardDatePicker\n                disableFuture\n                openTo=\"year\"\n                format=\"yyyy/MM/DD\"\n                views={['year', 'month', 'date']}\n                value={keyboardDate}\n                onChange={handleKeyDateChange}\n              />\n            </Grid>\n\n            <Grid\n              item\n              xs={3}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                연락처\n              </StyledTypography>\n            </Grid>\n            <Grid item xs={9}>\n              <StyledInputBase\n                name=\"patientTel\"\n                onChange={handleChange}\n                style={{ width: '80%' }}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={3}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                키(cm)\n              </StyledTypography>\n            </Grid>\n            <Grid item xs={9}>\n              <StyledInputBase\n                name=\"patientHeight\"\n                style={{ width: '53%' }}\n                onChange={handleChange}\n                type=\"number\"\n              />\n            </Grid>\n            <Grid\n              item\n              xs={3}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                몸무게(kg)\n              </StyledTypography>\n            </Grid>\n            <Grid item xs={9}>\n              <StyledInputBase\n                name=\"patientWeight\"\n                style={{ width: '53%' }}\n                onChange={handleChange}\n                type=\"number\"\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                주소\n              </StyledTypography>\n            </Grid>\n\n            <Grid item xs={9}>\n              <StyledInputBase\n                placeholder=\"우편번호\"\n                value={isPatient.patientPostal || ''}\n                readOnly\n              />\n            </Grid>\n            <Grid\n              item\n              xs={3}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n              }}\n            >\n              <StyledButton\n                onClick={() => findAddressHandle()}\n                bgColor=\"#a9e34b\"\n              >\n                주소 찾기\n              </StyledButton>\n            </Grid>\n            <Grid item xs={12}>\n              <StyledInputBase\n                value={isPatient.patientAddr1 || ''}\n                placeholder=\"주소를 입력해주세요\"\n                readOnly\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <StyledInputBase\n                name=\"patientAddr2\"\n                onChange={handleChange}\n                placeholder=\"상세 주소를 입력하세요.\"\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} style={{ marginTop: '2em' }}>\n            <div style={{ textAlign: 'center' }}>\n              <StyledButton\n                bgColor=\"#1E4C7C\"\n                width=\"80%\"\n                style={{ color: 'white' }}\n                onClick={addHandleClick}\n              >\n                환자 추가\n              </StyledButton>\n            </div>\n          </Grid>\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n      {/* 주소 API 모달창 */}\n      <PatientModal\n        isModalOpened={isModalOpened}\n        addressClick={addressClick}\n        setModalOpened={setModalOpened}\n      />\n    </Fragment>\n  );\n};\n\nexport default PatientDrawer;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {setGenderStatus} from \"redux/features/member/memberSlice\";\nimport { Grid } from '@material-ui/core';\nimport { IoManOutline, IoWomanOutline } from 'react-icons/io5';\nimport StyledContainer from 'components/common/container/StyledContainer';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\n\n/**\n * 이 페이지 컴포넌트는 환자의 성별을 수정하기 위해 작성한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * Sider\n * * Header\n * * 환자 관리 (PatientSearch, Table, ColoredButton)\n * @returns {JSX.Element}\n * @author SI HYUN PARK\n */\nconst SelectedMan = (genderValue) => {\n  const dispatch = useDispatch();\n  // 리덕스에서 성별 데이터를 가져온다\n  const gender = genderValue.genderValue; \n\n  const genderStatus= useSelector((state) => state.member.gender);\n \n\n  // 성별을 세팅하는 onChange\n  const handleChange = (name) => {\n   \n   dispatch(setGenderStatus(name));\n  };\n  \n  useEffect(() => {\n   dispatch(setGenderStatus(gender));\n  }, [gender, dispatch])\n\n\n\n  return (\n    <Fragment>\n      <main>\n        <Grid container>\n          <Grid item xs={12} sm={8} md={9} lg={10}>\n            <div>\n              <div\n                style={{ display: 'flex', maxWidth: '400px', height: '70px' }}\n              >\n                <StyledContainer\n                  bgColor=\"rgb(62,63,70)\"\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                  }}\n                  onClick={() => handleChange('male')}\n                >\n                  {genderStatus === 'female' && (\n                    <Fragment>\n                      <IoManOutline color=\"rgb(217,217,217)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{ color: 'white', fontFamily: 'Lato' }}\n                        >\n                          남자 (Male)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                  {genderStatus === 'male' && (\n                    <Fragment>\n                      <IoManOutline color=\"rgb(244,213,51)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{\n                            color: 'rgb(244,213,51)',\n                            fontFamily: 'Lato',\n                          }}\n                        >\n                          남자 (Male)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                </StyledContainer>\n                <StyledContainer\n                  bgColor=\"rgb(62,63,70)\"\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                  }}\n                  onClick={() => handleChange('female')}\n                >\n                  {genderStatus === 'male' && (\n                    <Fragment>\n                      <IoWomanOutline color=\"rgb(217,217,217)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{ color: 'white', fontFamily: 'Lato' }}\n                        >\n                          여자 (Female)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                  {genderStatus === 'female'&& (\n                    <Fragment>\n                      <IoWomanOutline color=\"rgb(244,213,51)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{\n                            color: 'rgb(244,213,51)',\n                            fontFamily: 'Lato',\n                          }}\n                        >\n                          여자 (Female)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                </StyledContainer>\n              </div>\n            </div>\n          </Grid>\n        </Grid>\n      </main>\n    </Fragment>\n  );\n};\n\nexport default SelectedMan;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setGenderStatus } from 'redux/features/member/memberSlice';\nimport moment from 'moment';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { SwipeableDrawer, Grid } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport useWindowSize from 'hooks/useWindowSize';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport StyledButton from 'components/common/button/StyledButton';\nimport AddressModal from '../modal/Modal';\nimport SelectedUpdateGender from '../selectedGender/selectedUpdateGender';\nimport { modifyPatient } from 'apis/patientAPI';\n\n/**\n * 이 페이지 컴포넌트는 환자를 수정하기 위해 작성한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * Sider\n * * Header\n * * 환자 관리 (PatientSearch, Table, ColoredButton)\n * @returns {JSX.Element}\n * @author SI HYUN PARK\n */\nconst PatientUpdateDrawer = ({\n  isUpdateOpened,\n  setUpdateOpened,\n  readPatientData,\n  setDisplay,\n}) => {\n  const { breakpoint } = useWindowSize();\n\n  // 생년월일을 수정하기 위해 사용할 상태 데이터\n  const [keyboardDate, handleKeyDateChange] = useState(new Date());\n  // 성별을 수정하기 위해 사용할 리덕스\n  const gender = useSelector((state) => state.member.gender);\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 주소 API 창을 띄울 모달 창 상태 데이터\n  const [isUpdateModalOpened, setUpdateModalOpened] = useState(false);\n\n  // 수정 완료 클릭시 다시 한번 수정 하시겠습니까? 라는 컴포넌트를 띄어줄 상태 데이터\n  const [changeView, setChange] = useState(false);\n\n  //환자의 정보를 담을 상태 데이터\n  const [patientInfo, setPatientInfo] = useState({});\n\n  useEffect(() => {\n    if (breakpoint !== readPatientData) {\n      console.log('Current breakpoint is', breakpoint);\n    }\n  }, [breakpoint, readPatientData]);\n\n\n  // Drawer창이 열릴 때마다 props를 통해 받아온 readPatientData를 patientInfo와 keyboardDate에 세팅하는 부분\n  useEffect(() => {\n    if (isUpdateOpened) {\n       handleKeyDateChange(readPatientData.patientBirth);\n       setPatientInfo(readPatientData);\n    }\n  }, [readPatientData, isUpdateOpened, patientInfo.patientBirth]);\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      setPatientInfo({});\n      return;\n    }\n    setChange(false);\n    dispatch(setGenderStatus(''));\n    setUpdateOpened(open);\n  };\n\n  // 수정버튼 클릭시 일어나는 이벤트\n  const updateHandleClick = async () => {\n    // 유효성검사\n    if (\n      patientInfo.patientName !== readPatientData.patientName ||\n      keyboardDate !== readPatientData.patientBirth ||\n      patientInfo.patientAddr1 !== readPatientData.patientAddr1 ||\n      patientInfo.patientPostal !== readPatientData.patientPostal ||\n      patientInfo.patientTel !== readPatientData.patientTel ||\n      patientInfo.patientHeight !== readPatientData.patientHeight ||\n      patientInfo.patientWeight !== readPatientData.patientWeight ||\n      patientInfo.patientAddr2 !== readPatientData.patientAddr2 ||\n      patientInfo.patientGender !== gender\n    ) {\n      // 수정하는 부분\n      try {\n        patientInfo.patientGender = gender;\n        patientInfo.patientBirth = moment(keyboardDate).format('yyyy-MM-DD');\n\n        setPatientInfo(patientInfo);\n        const { data } = await modifyPatient(patientInfo);\n        console.log(data.data)\n        handleAlert('success', '내용이 변경 되었습니다.');\n        dispatch(setGenderStatus(''));\n        setChange(true);\n      } catch (error) {\n        handleAlert('error', '내용이 변경되지 않았습니다.');\n      }\n    } else {\n      handleAlert('error', '변경된 사항이 없습니다.');\n    }\n  };\n\n  // 주소버튼 클릭시 주소 모달에 해당 함수를 넘겨 주소 정보를 담아오는 부분\n  const addressClick = ({ fullAddress, postalcode }) => {\n    setPatientInfo({\n      ...patientInfo,\n      patientPostal: postalcode,\n      patientAddr1: fullAddress,\n      patientAddr2: '',\n    });\n  };\n\n\n  // 수정된 정보를 담는 부분\n  const updateHandleChange = (event) => {\n    setPatientInfo({\n      ...patientInfo,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  // 생년월일을 변경하는 부분\n  const dateUpdateHandleChange = (date) => {\n    console.log('Date', keyboardDate);\n    const birth = moment(date).format('yyyy/MM/DD');\n    handleKeyDateChange(birth);\n  };\n\n  // 클릭시 주소 모달창이 열린다\n  const findAddressHandleClick = () => {\n    setUpdateModalOpened(true);\n  };\n\n  // 클릭시 드로어가 다친다\n  const closeHandleClick = () => {\n    setChange(false);\n    dispatch(setGenderStatus(''));\n    setUpdateOpened(false);\n  };\n\n  // 메인함수에서 값을 다시 받아오기 위해 실해하는 함수\n  const BackTotheMain = () => {\n      setDisplay(true);\n      setUpdateOpened(false);\n      setChange(false);\n  };\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isUpdateOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer breakpoint={breakpoint}>\n          <DrawerHeader breakpoint={breakpoint}>\n            <h1>환자 정보 수정</h1>\n            <div>\n              <AiOutlineClose size={32} onClick={closeHandleClick} />\n            </div>\n          </DrawerHeader>\n          {changeView === false ? (\n            <Grid\n              container\n              spacing={1}\n              alignItems=\"center\"\n              justify=\"center\"\n              style={{ padding: '1rem' }}\n            >\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  이름\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <StyledInputBase\n                  name=\"patientName\"\n                  value={patientInfo.patientName}\n                  onChange={updateHandleChange}\n                  style={{ width: '53%' }}\n                />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  marginTop: '1em',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  성별\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9} style={{ marginTop: '1em' }}>\n                <SelectedUpdateGender genderValue={patientInfo.patientGender} />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography\n                  variant=\"h6\"\n                  component=\"h5\"\n                  weight={5}\n                  style={{ marginTop: '1em', marginBottom: '1em' }}\n                >\n                  생년월일\n                </StyledTypography>\n              </Grid>\n              <Grid\n                item\n                xs={9}\n                style={{ marginTop: '1em', marginBottom: '1em' }}\n              >\n                <KeyboardDatePicker\n                  disableFuture\n                  openTo=\"year\"\n                  format=\"yyyy/MM/DD\"\n                  views={['year', 'month', 'date']}\n                  value={keyboardDate}\n                  onChange={dateUpdateHandleChange}\n                />\n              </Grid>\n\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  연락처\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <StyledInputBase\n                  name=\"patientTel\"\n                  value={patientInfo.patientTel}\n                  onChange={updateHandleChange}\n                  style={{ width: '80%' }}\n                />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  키(cm)\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <StyledInputBase\n                  name=\"patientHeight\"\n                  style={{ width: '53%' }}\n                  value={patientInfo.patientHeight}\n                  onChange={updateHandleChange}\n                  type=\"number\"\n                />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  몸무게(kg)\n                </StyledTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <StyledInputBase\n                  name=\"patientWeight\"\n                  style={{ width: '53%' }}\n                  value={patientInfo.patientWeight}\n                  onChange={updateHandleChange}\n                  type=\"number\"\n                />\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                  주소\n                </StyledTypography>\n              </Grid>\n\n              <Grid item xs={9}>\n                <StyledInputBase\n                  placeholder=\"우편번호\"\n                  value={patientInfo.patientPostal}\n                  readOnly\n                />\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <StyledButton\n                  onClick={findAddressHandleClick}\n                  bgColor=\"#a9e34b\"\n                >\n                  주소 찾기\n                </StyledButton>\n              </Grid>\n              <Grid item xs={12}>\n                <StyledInputBase\n                  placeholder=\"주소를 입력해주세요\"\n                  value={patientInfo.patientAddr1}\n                  readOnly\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <StyledInputBase\n                  name=\"patientAddr2\"\n                  onChange={updateHandleChange}\n                  value={\n                    patientInfo.patientAddr2 !== false &&\n                    patientInfo.patientAddr2\n                  }\n                  placeholder=\"상세 주소를 입력하세요.\"\n                />\n              </Grid>\n              <Grid item xs={8} style={{ marginTop: '2em' }}>\n                <div style={{ textAlign: 'center' }}>\n                  <StyledButton\n                    bgColor=\"#1E4C7C\"\n                    width=\"80%\"\n                    style={{ color: 'white' }}\n                    onClick={updateHandleClick}\n                  >\n                    환자 수정\n                  </StyledButton>\n                </div>\n              </Grid>\n            </Grid>\n          ) : (\n            <div style={{ textAlign: 'center' }}>\n              <div>\n                <img src=\"/assets/image/accept.png\" alt=\"accept\" />\n              </div>\n              <div>\n                <h1 style={{ fontWeight: 'bold', marginBottom: '2em' }}>\n                    수정이 완료되었습니다.\n                </h1>\n              </div>\n              <div>\n                <StyledButton\n                  width=\"60%\"\n                  bgColor=\"#DDB892\"\n                  color=\"white\"\n                  onClick={BackTotheMain}\n                >\n                  메인 화면으로 돌아가기\n                </StyledButton>\n              </div>\n            </div>\n          )}\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n\n      {/* 주소 APi 모달 */}\n      <AddressModal\n        isModalOpened={isUpdateModalOpened}\n        setModalOpened={setUpdateModalOpened}\n        addressClick={addressClick}\n      />\n    </Fragment>\n  );\n};\n\nexport default PatientUpdateDrawer;\n","import React from 'react';\nimport { css } from 'styled-components';\nimport ClockLoader from 'react-spinners/ClockLoader';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nconst ClockSpinner = ({ isLoading }) => (\n  <div style={{ width: '100%' }}>\n    <ClockLoader color=\"red\" loading={isLoading} css={override} size={80} />\n  </div>\n);\n\nexport default ClockSpinner;\n","import React, { useState, useEffect, Fragment } from 'react';\nimport {\n  Grid,\n  Table,\n  TableContainer,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  IconButton,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { getPatientsList, getSearchPatientList } from 'apis/patientAPI';\nimport PatientDrawer from '../../../components/patient/drawer/PatientDrawer';\nimport PatientUpdateDrawer from '../../../components/patient/drawer/PatientUpdateDrawer';\nimport { GrPowerReset } from 'react-icons/gr';\nimport ContentContainer from 'components/common/container/ContentContainer';\nimport TitleHeader from 'components/common/header/TitleHeader';\nimport StyledButton from 'components/common/button/StyledButton';\nimport SearchBox from 'components/common/search/SearchBox';\nimport ResponsivePageHeader from 'components/common/header/ResponsivePageHeader';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport ClockSpinner from 'components/common/spinner/ClockSpinner';\nimport moment from 'moment';\n\n/**\n * 이 페이지 컴포넌트는 환자 관리 페이지를 작성하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * Sider\n * * Header\n * * 환자 관리 (PatientSearch, Table, ColoredButton)\n * @returns {JSX.Element}\n * @author SI HYUN PARK\n */\nconst PatientPage = () => {\n  // 환자 추가시 환자의 정보를 입력하는 드로어에 대한 open/close 여부 상태 데이터\n  const [isOpened, setOpened] = useState(false);\n\n  // 환자 정보 변경시 내용을 변경을 하기 위한 드로어에 대한 open/close 여부 상태 데이터\n  const [isUpdateOpened, setUpdateOpened] = useState(false);\n\n  // 수정 드로어에 세팅할 환자정보\n  const [readPatientData, setReadPatientData] = useState({});\n\n  // 데이터베이스에서 환자에 대한 정보 객체를 담을 상태 데이터 ([{환자1}, {환자2}.....])\n  const [patientData, setPatients] = useState([]);\n\n  // spinner를 나타내는 상태데이터\n  const [isLoading, setLoading] = useState(true);\n\n  // 추가 수정할때 addDisplay의 값은 변경이 된다. 그리고 변경됨에 따라 환자 리스트를 다시 불러오기 위해 설정한 상태 데이터\n  const [addDisplay, setDisplay] = useState(false);\n\n  // 로그인 유저에 대한 정보\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n\n  // 처음 렌더링 되었을 때, 환자의 데이터를 불러온다\n  useEffect(() => {\n    const getPatient = async () => {\n      try {\n        const { data } = await getPatientsList(loginInfo.hospitalCode);\n        setPatients(data.data);\n      } catch (error) {\n        console.log(error);\n        setPatients([]);\n        setLoading(false);\n      }\n    };\n    getPatient();\n  }, [loginInfo]);\n\n  // 환자의 데이터(patientData)가 변경됨에 따라 isLoading이 false 값 세팅 해준다\n  useEffect(() => {\n    if (patientData.length > 0) {\n      setLoading(false);\n    }\n  }, [patientData]);\n\n// 추가, 수정시 addDisplay 값이 변경된다, 그렇게 되면 다시 환자데이터를 불러와 뷰에 세팅한다\n  useEffect(() => {\n    if(addDisplay) {\n      setLoading(true);\n      const getAddPatient = async () => {\n        try {\n          const { data } = await getPatientsList(loginInfo.hospitalCode);\n          setPatients(data.data);\n        } catch (error) {\n          console.log(error);\n          setPatients([]);\n          setLoading(false);\n        }\n      };\n      getAddPatient();\n      setDisplay(false);\n    }\n  }, [addDisplay, loginInfo])\n\n  const resetOnClick = async () => {\n      setLoading(true);\n      try {\n          const { data } = await getPatientsList(loginInfo.hospitalCode);\n          setPatients(data.data);\n        } catch (error) {\n          console.log(error);\n          setPatients([]);\n          setLoading(false);\n        }\n  }\n\n\n  // 환자 이름 검색을 통해 가져온 환자 리스트\n  const setSearchVal = async (inputVal) => {\n    \n    setLoading(true);\n    try {\n      const { data } = await getSearchPatientList({\n        hospitalCode: loginInfo.hospitalCode,\n        patientName: inputVal,\n      });\n      setPatients(data.data);\n    } catch (error) {\n      setPatients([]);\n      console.log(error.response.data);\n      setLoading(false);\n     \n    }\n  };\n  // 스피너 컴포넌트\n  const clockSpinner = () => {\n    return (\n      <div\n        style={{\n          height: '100vh',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <ClockSpinner isLoading={isLoading} />\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <header\n        style={{\n          position: 'sticky',\n          top: 0,\n          backgroundColor: 'white',\n          zIndex: 1,\n        }}\n      >\n        <ResponsivePageHeader />\n      </header>\n      <main>\n        <Grid container>\n          <Grid item xs={12}>\n            <PageTransition>\n              <ContentContainer>\n                <TitleHeader>\n                  <span>환자 | </span>\n                  <span>환자 관리</span>\n                </TitleHeader>\n                <br />\n                <Grid container justify=\"center\" >\n                  <Grid item xs={8} lg={6}>\n                    <SearchBox\n                      setSearchVal={setSearchVal}\n                      placeholder=\"환자 이름을 입력해주세요.\"\n                    />\n                  </Grid>\n                  <Grid item xs={2} lg={2} >\n                    <IconButton\n                      type=\"button\"\n                      size=\"medium\"\n                      style={{\n                        border: '1px solid rgba(0,0,0,0.12)',\n                        marginLeft: '0.5rem',\n                        marginRight: '0.5rem',\n                        marginTop : '0.5rem'\n                      }}\n                      onClick={resetOnClick}\n                    >\n                      <GrPowerReset />\n                    </IconButton>\n                  </Grid>\n                  <Grid\n                    item\n                    xs={2}\n                    lg={4}\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'flex-end',\n                    }}\n                  >\n                    <StyledButton\n                      width=\"100px\"\n                      bgColor=\"rgb(30, 51, 71)\"\n                      color=\"white\"\n                      onClick={() => {\n                        setOpened(true);\n                      }}\n                    >\n                      추가\n                    </StyledButton>\n                  </Grid>\n                  {isLoading && clockSpinner()}\n\n                  <Grid item xs={12}>\n                    {!isLoading && patientData.length === 0 && (\n                      <Grid container alignItems=\"center\" justify=\"center\">\n                        <Grid\n                          item\n                          xs={5}\n                          md={5}\n                          lg={6}\n                          xl={6}\n                          style={{\n                            textAlign: 'center',\n                          }}\n                        >\n                          <h1\n                            style={{\n                              fontWeight: 'bold',\n                            }}\n                          >\n                            데이터가 없습니다\n                          </h1>\n                        </Grid>\n                        <Grid\n                          item\n                          xs={7}\n                          md={7}\n                          lg={6}\n                          xl={6}\n                          style={{ marginTop: '2em' }}\n                        >\n                          <img\n                            src=\"/assets/image/pleaseSearching.png\"\n                            width=\"60%\"\n                            alt=\"searching\"\n                          />\n                        </Grid>\n                      </Grid>\n                    )}\n                    {!isLoading && patientData.length > 0 && (\n                      <TableContainer style={{ marginTop: '1rem' }}>\n                        <Table\n                          style={{ minWidth: '600px', overflowX: 'scroll' }}\n                        >\n                          <TableHead>\n                            <TableRow>\n                              <TableCell component=\"td\">번호</TableCell>\n                              <TableCell component=\"td\">이름</TableCell>\n                              <TableCell component=\"td\">생년월일</TableCell>\n                              <TableCell component=\"td\">주소</TableCell>\n                              <TableCell component=\"td\"></TableCell>\n                            </TableRow>\n                          </TableHead>\n                          <TableBody>\n                            {patientData.map((data) => (\n                              <Fragment key={data.patientId}>\n                                <TableRow>\n                                  <TableCell component=\"th\">\n                                    {data.patientId}\n                                  </TableCell>\n                                  <TableCell component=\"th\">\n                                    {data.patientName}\n                                  </TableCell>\n                                  <TableCell component=\"th\">\n                                    {moment(data.patientBirth).format(\n                                      'yyyy년 MM월 DD일',\n                                    )}\n                                  </TableCell>\n                                  <TableCell component=\"th\">\n                                    {data.patientAddr2 === undefined &&\n                                      data.patientAddr1}\n                                    {data.patientAddr2 !== undefined &&\n                                      data.patientAddr1 +\n                                        ' ' +\n                                        data.patientAddr2}\n                                  </TableCell>\n                                  <TableCell component=\"th\">\n                                    <StyledButton\n                                      bgColor=\"rgb(11, 83, 151)\"\n                                      color=\"white\"\n                                      onClick={() => {\n                                        setUpdateOpened(true);\n                                        setReadPatientData(data);\n                                      }}\n                                    >\n                                      변경\n                                    </StyledButton>\n                                  </TableCell>\n                                </TableRow>\n                              </Fragment>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </TableContainer>\n                    )}\n                  </Grid>\n                </Grid>\n              </ContentContainer>\n            </PageTransition>\n          </Grid>\n        </Grid>\n      </main>\n      {/* 환자를 추가할때 나타나는 드로어 */}\n      <PatientDrawer\n        isOpened={isOpened}\n        setOpened={setOpened}\n        setDisplay={setDisplay}\n      />\n      {/* 환자를 수정할때 나타나는 드로어 */}\n      <PatientUpdateDrawer\n        isUpdateOpened={isUpdateOpened}\n        setUpdateOpened={setUpdateOpened}\n        readPatientData={readPatientData}\n        setDisplay={setDisplay}\n      />\n    </div>\n  );\n};\n\nexport default PatientPage;\n","import axios from 'axios';\n\n/**\n * * 목적 : 진료 접수(예약) 목록 보기를 위한 API\n * @param {WeekNoWithMemberVO} weekNoWithMember\n * * !int weekNo\n * * !int memberId\n * * !String hospitalCode\n * @returns {List<ReservationVO>} result\n * * !String category (time)\n * * !String color (white)\n * * [Diagnosis Entity]\n * * !int id (diagId, 진료 pk)\n * * !int calendarId (=weekNo)\n * * !LocalDateTime start (예약 시작 시간)\n * * !LocalDateTime end (예약 마감 시간)\n * * !String visitPurpose (방문 목적)\n * * [Patients Entity]\n * * !String title (환자 이름)\n * * !int patientId (환자 pk)\n * * !String patientName (환자 이름)\n * * !LocatDate patientBirth (환자 생년월일)\n * * [Members Entity]\n * * !int memberId\n * * !String bgColor (의사마다의 고유 색)\n * * !String doctorName (의사 이름)\n * * !String doctorRoom (의사 방 이름)\n * @author SI HYUN PARK\n */\nexport const getReservationInfo = async (WeekNoWithMemberVO) => {\n  return await axios.post('/reservation/data', WeekNoWithMemberVO);\n};\n\n/**\n * * 목적 : 진료 접수(예약)을 추가하기 위한 API\n * @param {DiagnosisDTO} diagnosisInfo\n * * !int weekNo\n * * !LocalDateTime startDate\n * * !LocalDateTime endDate\n * * !String visitPurpose\n * * String drOpinion (null)\n * * !boolean isPharmacy (false)\n * * !boolean isInjector (false)\n * * !boolean isDiagnosticTest (false)\n * * !boolean isVital (false)\n * * !String reservationStatus (RESERVATION_REGISTER)\n * * !int memberId\n * * !int patientId\n * * !String hospitalCode\n * @returns {boolean} result (등록 성공 여부)\n * @author SI HYUN PARK\n */\nexport const registerReservationInfo = async (diagnosisInfo) => {\n  return await axios.post('/reservation', diagnosisInfo);\n};\n\n/**\n * * 목적 : 진료 접수 내용 (방문 목적)을 수정하기 위한 API\n * @param {diagnosisUpdateVO} diagnosisUpdateVO\n * * !int diagId\n * * !int patientId\n * * !int memberId\n * * !String hospitalCode\n * * !String visitPurpose\n * @returns {boolean} result (수정 성공 여부)\n * @author SI HYUN PARK\n */\nexport const modifyReservationInfo = async (diagnosisUpdateVO) => {\n  return await axios.put('/reservation', diagnosisUpdateVO);\n};\n\n/**\n * * 목적 : 진료 접수 내용을 삭제 (status 수정)하기 위한 API\n * @param {int} diagId\n * @returns {boolean} result (삭제 성공 여부)\n * @author SI HYUN PARK\n */\nexport const removeReservationInfo = async (diagId) => {\n  return await axios.put(`/reservation/${diagId}`);\n};\n\n/**\n * 목적 : 예약 추가시 등록할 환자를 검색하기 위한 API\n * @param {PatientSearchVO} patientVO\n * * !String hospitalCode\n * * !String patientName\n * @returns {List<PatientDTO>} data\n * * !int patientId\n * * !String patientName\n * * !String patientSsn\n * * !String patientGender\n * * !String patientTel\n * * !String patientAddr1\n * * String patientAddr2\n * * !String patientPostal\n * * !int patientHeight\n * * !int patientWeight\n * * !LocalDateTime recentDate\n * * !LocalDate patientBirth\n * * !String hospitalCode\n * @author SI HYUN PARK\n */\nexport const getPatientInfo = async (patientVO) => {\n  return await axios.post('/reservation/patient', patientVO);\n};\n\n/**\n * 목적 : 화면 렌더링 될때 select에 의사 정보를 세팅할 데이터를 가져오기 위한 API\n * @param {String} hospitalCode\n * @returns {List<MemberDTO>} data\n * * !int memberId\n * * !String memberName\n * * !String doctorRoom\n * * !String hospitalCode\n * * !String memberColor\n * @author SI HYUN PARK\n */\nexport const getDoctorInfo = async (hospitalCode) => {\n  return await axios.get(`/reservation/doctor/${hospitalCode}`);\n};\n\n/**\n * * 목적 : 예약 환자 검색\n * @param {PatientSearchVO} patientSearchVO\n * * !String hospitalCode\n * * !String patientName\n * @returns {List<ReservationVO>} data\n * * !String category (time)\n * * !String color (white)\n * * [Diagnosis Entity]\n * * !int id (diagId, 진료 pk)\n * * !int calendarId (=weekNo)\n * * !LocalDateTime start (예약 시작 시간)\n * * !LocalDateTime end (예약 마감 시간)\n * * !String visitPurpose (방문 목적)\n * * [Patients Entity]\n * * !String title (환자 이름)\n * * !int patientId (환자 pk)\n * * !String patientName (환자 이름)\n * * !LocatDate patientBirth (환자 생년월일)\n * * [Members Entity]\n * * !int memberId\n * * !String bgColor (의사마다의 고유 색)\n * * !String doctorName (의사 이름)\n * * !String doctorRoom (의사 방 이름)\n * @author SI HYUN PARK\n */\nexport const getSearchReservationPatient = async (patientSearchVO) => {\n  return await axios.post('/reservation/waitingPatient', patientSearchVO);\n};\n","import React, { useState } from 'react';\nimport moment from 'moment';\nimport { useSelector } from 'react-redux';\nimport { registerReservationInfo } from 'apis/reservationAPI';\nimport { Grid } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport StyledButton from 'components/common/button/StyledButton';\nimport { sendMqttMessage } from 'apis/pushAPI';\n\n/*\n  예약정보 (환자정보, 의사정보, 예약시간, 내원사유)를 입력하고 \n  데이터를 추가하는 컴포넌트\n  reservationTime: 예약시간 데이터 (날짜, 예약시작시간, 예약마감시간), ReservationDrawer에서 props로 받은 데이터를\n                   바로 해당 컴포넌트에 바로 props로 보내준다\n  doctorInfo: 의사 데이터, ReservationDrawer에서 props로 받은 데이터를 바로 해당 컴포넌트에 바로 props로 보내준다\n  patientInfo: ReservationDrawer의 setPatient 상태함수를 ReservationPatientListContainer 컴포넌트로 보내\n               환자정보를 가져온다. 그러면 patientInfo는 환자정보로 채워진다.\n               환자정보로 채워진 데이터를 해당 컴포넌트에 props로 전해준다.\n  setCheckChange: false-> 검색어 (SearchBox) true-> 해당내용이 맞습니까? 상태에 따라 컴포넌트 구성도가 달라짐\n                  해당 컴포넌트에서 true로 세팅 해주어 컴포넌트 구성도를 다르게 만들어준다\n*/\n\n/*\n  검색:\n\n*/\nconst ReservationInfoContainer = (\n  {\n    reservationTime,\n    doctorInfo,\n    patientInfo,\n    setOpened,\n    setCheckChange,\n    setAddDisplay,\n  },\n  props,\n) => {\n  /*\n    내원사유를 세팅하기 위한 상태 데이터\n\n    검색: \n  */\n  const [visitReason, setReason] = useState('');\n\n  // 진료예약,true -> (진료예약 + 이전으로돌아가기 버튼),false\n  const [buttonChange, setButtonChange] = useState(false);\n  // 로그인한 멤버의 정보를 가져오는 redux\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n\n  // 내원사유 값을 받아오는 onChange\n  const visitReasonHandleChange = (event) => {\n    setReason(event.target.value);\n  };\n  const { enqueueSnackbar } = useSnackbar();\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  /*\n    컴포넌트 바뀌기 전, 진료예약 버튼 클릭시 발생하는 클릭 이벤트\n    1) 환자이름과 생년월일이 안젹혀있을 때\n    2) 내원사유를 적지 않았을때\n    3) 1),2)의 조건을 충족을 하면, \n       컴포넌트가 바뀐다 (이전으로 돌아가기 + 진료예약 버튼) -> setButtonChange\n       검색입력박스가 이미지로 바뀐다 -> setCheckChange\n\n    검색: \n  */\n  const handleReservationClick = () => {\n    //1)\n    if (patientInfo.patient_name === '' && patientInfo.patient_birth === '') {\n      handleAlert('error', '환자를 선택해주세요.');\n    } else {\n      //2)\n      if (visitReason === '') {\n        handleAlert('error', '내원 사유를 적어주세요.');\n      } else {\n        //3)\n        setCheckChange(true);\n        setButtonChange(true);\n      }\n    }\n  };\n  /*\n    버튼 컴포넌트가 바뀐 후의 진료예약 버튼 클릭시 발생하는 클릭 이벤트\n    reservationInfo 객체에 props(reservationTime, patientInfo,doctorInfo) \n    가 세팅, 상태데이터 (visitReason)을 세팅한다\n    객체 형식은 ui toast calendar에서 추가할 때 쓰이는 객체형식과 섞어서 구성하였다\n    1) 리덕스에 reservationInfo데이터를 저장하기 위해 dispatch를 이용\n    2) 검색입력박스가 이미지로 바뀐다 -> setCheckChange\n    3) 컴포넌트가 바뀐다 (이전으로 돌아가기 + 진료예약 버튼) -> setButtonChange\n\n    검색: \n  */\n  const handleInsertInfoClick = async () => {\n    try {\n      const startDate = moment(reservationTime.start.toDate()).format(\n        'yyyy-MM-DDTHH:mm',\n      );\n      const endDate = moment(reservationTime.end.toDate()).format(\n        'yyyy-MM-DDTHH:mm',\n      );\n      const reservationInfo = {\n        weekNo: reservationTime.weekNum,\n        startDate,\n        endDate,\n        visitPurpose: visitReason,\n        drOpinion: '',\n        isPharmacy: false,\n        isInjector: false,\n        isDiagnosticTest: false,\n        isVital: false,\n        reservationStatus: 'RESERVATION_REGISTER',\n        patientId: patientInfo.patientId,\n        memberId: doctorInfo.memberId,\n        hospitalCode: loginInfo.hospitalCode,\n      };\n      //1) db 등록\n      const { data } = await registerReservationInfo(reservationInfo);\n      console.log(data.data);\n      //2)\n      setCheckChange(false);\n      //3)\n      setButtonChange(false);\n      handleAlert('success', '예약이 접수되었습니다.');\n\n      // Push Alert를 보낸다. (의사에게)\n      const sendPushMessage = {\n        topic: `/${loginInfo.hospitalCode}/doctor`,\n        priority: 'success',\n        message: `${patientInfo.patientName} 환자가 ${doctorInfo.memberName} 의사에게 진료가 예약되었습니다.`,\n      };\n\n      await sendMqttMessage(sendPushMessage);\n\n      setAddDisplay(true);\n      setOpened(false);\n    } catch (error) {\n      console.log('error', error);\n      const { message } = error.response.data;\n      handleAlert('error', message);\n      setCheckChange(false);\n      setButtonChange(false);\n    }\n  };\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      style={{\n        padding: '2rem',\n      }}\n    >\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          이름\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={patientInfo.patientName} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          생년월일\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={patientInfo.patientBirth} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          예약 날짜\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={reservationTime.date} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          예약 시작\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={reservationTime.startTime} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          예약 종료\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={reservationTime.endTime} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          진료실\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={doctorInfo.doctorRoom} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          의사\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={doctorInfo.memberName} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          내원 사유\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase\n          onChange={visitReasonHandleChange}\n          value={visitReason}\n        />\n      </Grid>\n      {buttonChange === false ? (\n        <Grid item xs={12} style={{ textAlign: 'center', marginTop: '1.5em' }}>\n          <StyledButton\n            width=\"80%\"\n            onClick={handleReservationClick}\n            style={{ backgroundColor: 'rgb(30, 51, 71)', color: 'white' }}\n          >\n            진료예약\n          </StyledButton>\n        </Grid>\n      ) : (\n        <Grid item xs={12} style={{ textAlign: 'center', marginTop: '1.5em' }}>\n          <div style={{ marginBottom: '1em' }}>\n            <StyledButton\n              width=\"80%\"\n              style={{\n                backgroundColor: '#a9e34b',\n                color: 'white',\n              }}\n              onClick={() => {\n                setCheckChange(false);\n                setButtonChange(false);\n              }}\n            >\n              이전으로 돌아가기\n            </StyledButton>\n          </div>\n          <div>\n            <StyledButton\n              width=\"80%\"\n              style={{\n                backgroundColor: 'rgb(30, 51, 71)',\n                color: 'white',\n              }}\n              onClick={handleInsertInfoClick}\n            >\n              진료예약\n            </StyledButton>\n          </div>\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default ReservationInfoContainer;\n","import React, {Fragment} from \"react\";\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\n\n/*\n  환자 검색 결과에 대한 환자 데이터 리스트 안의 ListItem에 환자 데이터를 세팅하는 부분이다.\n*/\nconst Item = ({ patient, patientClick }) => {\n  return (\n    <div>\n      <Divider variant=\"inset\" component=\"li\" />\n      <ListItem\n        alignItems=\"flex-start\"\n        style={{ cursor: 'pointer' }}\n        onClick={() => patientClick(patient)}\n      >\n        <ListItemAvatar>\n          <Avatar alt={patient.patientName} src=\"/assets/image/patient.png\" />\n        </ListItemAvatar>\n        <ListItemText\n          primary={patient.patientName + ' / ' + patient.patientGender}\n          secondary={\n            <Fragment>\n              <StyledTypography\n                component=\"span\"\n                variant=\"body2\"\n                color=\"textPrimary\"\n              >\n                {' ' + patient.patientBirth}\n              </StyledTypography>\n            </Fragment>\n          }\n        />\n      </ListItem>\n      <Divider variant=\"inset\" component=\"li\" />\n    </div>\n  );\n};\n\nexport default React.memo(Item);\n","\n\n/*\n  환자 검색 결과가 없을 때 세팅하는 컴포넌트이다.\n*/\nconst ResultValue = () => {\n\n  return (\n    <div style={{ alignItems: 'center' }}>\n      <div style={{ width: '100%', textAlign: 'center' }}>\n        <img\n          src=\"/assets/image/notFound.png\"\n          width=\"100%\"\n          alt=\"confirmPicture\"\n        />\n      </div>\n      <div\n        style={{\n          alignItems: 'center',\n        }}\n      >\n        <div\n          style={{\n            fontWeight: 'bold',\n            textAlign: 'center',\n            marginTop: '1em',\n          }}\n        >\n          <h1>검색 결과가 없습니다 </h1>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ResultValue;","import { useEffect, useCallback, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPatientInfo } from 'apis/reservationAPI';\nimport { changePage, chaneInputVal } from \"redux/features/reservation/reservationSlice\";\nimport List from \"@material-ui/core/List\"\nimport PatientItem from \"./Item/Item\";\nimport ResertValue from \"./Item/Result\";\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport { GrClose } from 'react-icons/gr';\nimport ClockSpinner from 'components/common/spinner/ClockSpinner';\n\n/*\n  SearchBox에서 키워드를 통해 검색한 결과를 나타내는 컴포넌트 이다.\n  PatientItem을 통해 검색한 결과 리스트 (환자리스트)를 볼수 있다.\n  ResertValue는 검색 결과가 없을 때 세팅한 컴포넌트이다.\n\n  setPatientInfo -> 여기에 환자 데이터를 세팅할 수 있다.\n*/\nfunction ReservationPatientListContainer(props) {\n  const { setPatientInfo} = props;\n\n  /*\n   리덕스에서 세팅된 검색 키워드 value를 가져온다.\n  */\n  const keyword = useSelector((state) => state.reservation.inputVal);\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n  const dispatch = useDispatch();\n\n  // 키원드를 통해 얻은 데이터를 담을 상태 데이터\n  const [searchResults, setResult] = useState([]);\n\n  // clockSpinner에 쓰일 boolean\n  const [isLoading, setLoading] = useState(true);\n\n  // 검색결과 데이터가 존재한다면, 1로 세팅 존재하지않는다면 2로 세팅하여 setLoading 값에 대한 변화를줌, 65번쨰줄 useEffect 참조\n  const [page, setPage] = useState(0);\n\n\n  /*\n    keyword 값이 변경될 때 마다, keyword에 맞는 환자데이터를 가져온다\n    갖고오는 부분이다.\n  */\n  useEffect(() => {\n    \n    setPage(0);\n    const patientListData = async () => {\n      try {\n         const hospitalCode = loginInfo.hospitalCode;\n        const patientName = keyword;\n        const { data } = await getPatientInfo({\n          hospitalCode,\n          patientName\n        });\n        \n        setResult(data.data);\n        setPage(2);\n      } catch (error) {\n        setPage(1);\n      }\n    };\n   try{\n    patientListData();\n   }catch(error) {\n   }\n  }, [keyword, loginInfo]); // 바뀌는 값 기준\n\n/*\n  page=2 일때는 환자데이터가 존재, page = 0 일때는 환자데이터 가져오기시작, page=1 때는 환자데이터가 존재하지 않음\n  0일때는 spinner를 실행하기위해서, 그 외에는 spinner를 멈추기 위해서 세팅을 함\n*/\n  useEffect(() => {\n    if(page>0){\n      setLoading(false);\n    }else {\n      setLoading(true);\n    }\n  }, [page])\n\n\n\n\n\n\n  /*\n    ReservationDrawer에서의 \n    컴포넌트 변경 부분이다. 완료버튼을 누르면 다시 한번 확인하는 화면이 나타난다\n  */\n  const closeClick = useCallback(() => {\n    dispatch(changePage('INFO'));\n  }, [dispatch]);\n\n  /*\n    PatientItem에 props로 보내는 클릭 이벤트 함수이다.\n    PatientItem에서 가져온 patient 데이터를 ReservationDrawer를 통해 가져온 props의\n    setPatientInfo에 세팅한다.\n  */\n  const patientClick = useCallback(\n    (patient) => {\n      console.log(\"click\", patient);\n      setPatientInfo(patient);\n      closeClick();\n      dispatch(chaneInputVal(''));\n    },\n    [dispatch, closeClick, setPatientInfo],\n  );\n\n// clockspinner 컴포넌트\n const clockSpinner = () => {\n    return (\n      <div\n        style={{\n          height: '100vh',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <ClockSpinner isLoading={isLoading} />\n      </div>\n    );\n  };\n\n// 환자결과 값을 리스트로 나타내는 컴포넌트\n  const listContent = () => {\n    return (\n      <div>\n    \n      <DrawerHeader onClick={closeClick}>\n        <div style={{ cursor: 'pointer', marginTop: '1em' }}>\n          <GrClose fontSize=\"1em\" />\n        </div>\n      </DrawerHeader>\n     \n      <List>\n        { (page> 1 )  && \n          searchResults.map((patient) => {\n            return (\n              <PatientItem\n                key={patient.patientId}\n                patient={patient}\n                patientClick={patientClick}\n              />\n            );\n          })\n        \n        }\n        {(page === 1 )&& \n           <ResertValue />\n        \n        }\n      </List>\n      \n    \n    </div>\n    )\n  }\n\n  return (\n    <div>\n      {isLoading && clockSpinner()}\n      {!isLoading && listContent()};\n    </div>\n  );\n}\n\nexport default ReservationPatientListContainer;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changePage, chaneInputVal } from \"redux/features/reservation/reservationSlice\";\nimport { SwipeableDrawer } from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport SearchBox from 'components/common/search/SearchBox';\nimport ReservationInfoContainer from './ReservationInfoContainer';\nimport ReservationPatientListContainer from \"./ReservationPatientListContainer\"\n\n/*\n예약환자를 추가하는 컴포넌트이다\nisOpened : 해당 컴포넌트를 여는 상태 데이터이다\nsetOpened : 해당 컴포넌트를 여는 상태 데이터에 대한 함수이다.\nreservationTime : 년월일, 예약 시작시간과 마감시간 관한 데이터이다.\ndoctorInfo: 의사에 관한 데이터이다\n*/\n/*\n검색\n1) changePage -> (데이터 입력 컴포넌트 -> 검색리스트 보여주는 컴포넌트로 변경)\n2) checkChange -> (검색어 입력창 -> 이미지(추가하시겠습니까?)뷰로 변경)\n3) patientInfoSetting -> patientInfo 상태 데이터에 데이터 추가\n4) keywordSetting -> 환자 검색에 입력한 키워드\n*/\nconst ReservationDrawer = ({\n  isOpened,\n  setOpened,\n  reservationTime,\n  doctorInfo,\n  registerPageResult,\n  setAddDisplay\n}, props) => {\n  /*\n  컴포넌트 변경 부분이다. 완료버튼을 누르면 다시 한번 확인하는 화면이 나타난다\n  검색: changePage\n  */\n  const page = useSelector((state) => state.reservation.pageStatus);\n  const dispatch = useDispatch();\n\n  const { breakpoint } = useWindowSize();\n\n  \n\n  /*\n  환자의 정보를 세팅하는 상태 데이터\n  검색: patientInfoSetting\n  */\n  const [patientInfo, setPatient] = useState({\n    patient_id: '',\n    patient_name: '',\n    patient_gender: '',\n    patient_birth: '',\n  });\n \n  /*\n    false일때 검색어 (SearchBox), true일때 해당내용이 맞습니까? \n    상태에 따라 컴포넌트 구성도가 달라짐\n    검색: checkChange\n  */\n  const [checkChange, setCheckChange] = useState(false);\n \n  // drawer 오픈에 관한 메소드\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    if (!open) {\n      dispatch(changePage('INFO'));\n    }\n    setOpened(open);\n  };\n\n  /*\n    x 버튼 클릭시 drawer가 닫힌다\n    dispatch를 통해 changePage에 INFO 문자를 세팅\n    page가 info일 때는 진료예약 버튼 아닐떄는 (이전으로 돌아가기 + 진료예약 버튼)으로 구성되어 있는 컴포넌트가 세팅\n    \n    검색: changePage\n  */\n  const handleChangeCloseClick = () => {\n    setOpened(false);\n    dispatch(changePage('INFO'));\n  };\n\n  /*\n    해당 Drawer(ReservationDrawer)가 열거나 닫게되면 (상태데이터가 바뀌면)\n    checkChange 값을 원상태(false)로 바꿔준다.\n    patientInfo 값도 초기화 시켜준다.\n    --> 닫고 열었을 때, 전 상태값을 초기화 시키고 새로운 값을 얻기 위해\n\n    검색: patientInfoSetting, checkChange\n  */\n  useEffect(() => {\n    setCheckChange(false);\n    setPatient({\n      patient_id: '',\n      patient_name: '',\n      patient_gender: '',\n      patient_birth: '',\n    });\n  }, [isOpened]);\n\n  /*\n    환자의 정보를 가져오기 위한 함수\n    환자 이름을 검색 한 후, 검색을 통해 나온 환자데이터를 \n    patientInfo에 세팅 시켜 준다.\n\n    검색: patientInfoSetting\n  */\n  const setPatientInfo = (patient) => {\n     setPatient({\n      patientId: patient.patientId,\n      patientName: patient.patientName,\n      patientGender: patient.patientGender,\n      patientBirth: patient.patientBirth\n    });\n  };\n\n  /*\n    SearchBox에 입력된 검색어를 갖고오는 함수\n    redux에 dispatch를 이용하여 검색어값을 세팅한다\n    세팅된 검색어는 ReservationPatientListContainer에서 사용한다\n    SEARCH_INFO를 세팅하므로써 \n    ReservationInfoContainer -> ReservationPatientListContainer 컴포넌트로 바꿀수 있도록 한다.\n\n    검색: keywordSetting, changePage\n  */\n  const setSearchVal = async(inputVal) => {\n    dispatch(changePage('SEARCH_INFO'));\n    dispatch(chaneInputVal(inputVal));\n  };\n\n  \n\n  return (\n    \n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={isOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer breakpoint={breakpoint}>\n          <DrawerHeader breakpoint={breakpoint}>\n            <h1>진료 접수</h1>\n            <div>\n              <AiOutlineClose\n                size={32}\n                // 검색: changePage\n                onClick={handleChangeCloseClick}\n                style={{ cursor: 'pointer' }}\n              />\n            </div>\n          </DrawerHeader>\n          {checkChange === false ? (\n            // 검색: keywordSetting\n            <SearchBox\n              setSearchVal={setSearchVal}\n              placeholder=\"환자 이름을 입력해주세요.\"\n            />\n          ) : (\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              <div style={{ flex: 2 }}>\n                <img\n                  src=\"/assets/image/question.jpeg\"\n                  width=\"100%\"\n                  alt=\"confirmPicture\"\n                />\n              </div>\n              <div\n                style={{\n                  flex: 3,\n                  alignItems: 'center',\n                  marginLeft: '1em',\n                }}\n              >\n                <div style={{ fontWeight: 'bold' }}>\n                  <h1>접수 내용이 </h1>\n                  <h1>다음과 같습니까? </h1>\n                </div>\n              </div>\n            </div>\n          )}\n          {/* changePage */}\n          {page === 'INFO' && (\n            //예약정보를 세팅하는 컴포넌트\n            <ReservationInfoContainer\n              reservationTime={reservationTime}\n              doctorInfo={doctorInfo}\n              patientInfo={patientInfo}\n              setOpened={setOpened}\n              setCheckChange={setCheckChange}\n              setAddDisplay={setAddDisplay}\n            />\n          ) }\n          {page === 'SEARCH_INFO' && (\n            // 환자 정보를 검색하는 컴포넌트 (검색: patientInfoSetting)\n          \n            <ReservationPatientListContainer setPatientInfo={setPatientInfo} registerPageResult={registerPageResult}/> \n            \n          )}\n          \n\n\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default ReservationDrawer;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n  modifyReservationInfo,\n  removeReservationInfo,\n} from 'apis/reservationAPI';\nimport moment from 'moment';\nimport { Grid } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport StyledButton from 'components/common/button/StyledButton';\nimport { sendMqttMessage } from 'apis/pushAPI';\n\n/**\n * * 목적 : 예약 상태를 보여주기 위한 컨테이너\n * 캘린더에 추가된 데이터를 클릭했을 때 나오는 ReservationDrawer에 세팅되는 컨텐트 부분이다.\n * readPatient: 예약된 환자 정보 객체 데이터이다.\n * @param {object} state hello world\n * @returns {JSX.Element} view\n */\n\nconst ReservationReadContainer = ({\n  setReadOpened,\n  readPatient,\n  setAddDisplay,\n}) => {\n  // 로그인한 유저의 정보를 가져오기 위한 데이터\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n\n  const { enqueueSnackbar } = useSnackbar();\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n\n  // 내원사유를 관리하는 상태 데이터, readPatient.drOpinion을 세팅하여 수정할 수 있도록 한다\n  const [visitReason, setReason] = useState(readPatient.visitPurpose);\n  // 수정, 삭제 완료되었을떄에 따라 컴포넌트를 세팅하기 위한 상태 데이터\n  const [checkPage, setCheckPage] = useState('');\n  // 예약시간 부분을 커스텀하여 세팅하는 상태 데이터\n  const [reservationTime, setReservationTime] = useState({\n    day: '',\n    startTime: '',\n    endTime: '',\n  });\n\n  /* \n    내원사유에 대한 값을 받아 세팅 하는 부분\n    검색: checkPage\n  */\n  const visitReasonHandleChange = (event) => {\n    setReason(event.target.value);\n  };\n\n  /*\n    readPatient(props)값이 변할 떄마다 실행이 된다.\n    여기에서 readPatient에 있는 예약 시간 데이터를 통해 커스텀하여 데이터 세팅\n    reservationTime에 데이터를 세팅한다.\n    검색: reservationTime\n  */\n  useEffect(() => {\n    const day = moment(readPatient.start).format('YYYY년 MM월 DD일');\n    const startTime = moment(readPatient.start).format('LT');\n    const endTime = moment(readPatient.end).format('LT');\n    setReservationTime({ day, startTime, endTime });\n  }, [readPatient]);\n\n  /*\n    예약수정 버튼을 클릭했을 때, 실행되는 클릭 이벤트 함수\n    1) 수정된 값이 없을 때\n    2) 수정된 값을 상태 데이터에 세팅\n    3) 컴포넌트 변화 (업데이트 완료) \n  */\n  const updateReservationInfo = (id, changeVisitReason) => {\n    //1)\n    if (visitReason === readPatient.visitPurpose) {\n      handleAlert('error', '수정된 내용을 입력해주세요');\n    } else {\n      //2)\n      try {\n        const updateInfo = {\n          diagId: id,\n          patientId: readPatient.patientId,\n          memberId: readPatient.memberId,\n          hospitalCode: loginInfo.hospitalCode,\n          visitPurpose: changeVisitReason,\n        };\n        //3)\n        const { data } = modifyReservationInfo(updateInfo);\n        console.log(data.data);\n        handleAlert('success', '내용이 변경되었습니다.');\n\n        setCheckPage('UPDATE');\n      } catch (error) {\n        const { message } = error.response.data;\n        handleAlert('error', message);\n      }\n    }\n  };\n  /*\n    예약 취소 버튼을 눌렀을 때, 실행 되는 함수\n    1) 값을 삭제하기 위한 부분\n    2) 컴포넌트 변화 (삭제 완료)\n  */\n  const deleteReservationInfo = async (id) => {\n    //1)\n    try {\n      const { data } = await removeReservationInfo(id);\n      console.log(data.data);\n      handleAlert('success', '예약이 취소되었습니다.');\n\n      const sendPushMessage = {\n        topic: `/${loginInfo.hospitalCode}/doctor`,\n        priority: 'info',\n        message: `${readPatient.patientName} 환자가 진료가 취소되었습니다.`,\n      };\n\n      await sendMqttMessage(sendPushMessage);\n    } catch (error) {\n      const { message } = error.response.data;\n      handleAlert('error', message);\n      console.log('error', error);\n    }\n    //2)\n    setCheckPage('REMOVE');\n  };\n\n  /*\n    예약 수정을 나타내는 컴포넌트\n    1) 값을 수정하기 위한 부분\n    2) 컴포넌트 변화 (수정 완료)\n  */\n  const resultUpdate = () => {\n    return (\n      <div style={{ textAlign: 'center' }}>\n        <div>\n          <img src=\"/assets/image/accept.png\" alt=\"accept\" />\n        </div>\n        <div>\n          <h1 style={{ fontWeight: 'bold', marginBottom: '2em' }}>\n            수정이 완료되었습니다.\n          </h1>\n        </div>\n        <div>\n          <StyledButton\n            width=\"60%\"\n            bgColor=\"#DDB892\"\n            color=\"white\"\n            onClick={() => {\n              setAddDisplay(true);\n              setReadOpened(false);\n              setCheckPage('');\n            }}\n          >\n            메인으로 돌아가기\n          </StyledButton>\n        </div>\n      </div>\n    );\n  };\n  /*\n    예약 취소를 나타내는 컴포넌트\n    1) 값을 삭제하기 위한 부분\n    2) 컴포넌트 변화 (삭제 완료)\n  */\n  const resultDelete = () => {\n    return (\n      <div style={{ textAlign: 'center' }}>\n        <div>\n          <img src=\"/assets/image/accept.png\" alt=\"accept\" />\n        </div>\n        <div>\n          <h1 style={{ fontWeight: 'bold', marginBottom: '2em' }}>\n            예약이 취소되었습니다.\n          </h1>\n        </div>\n        <div>\n          <StyledButton\n            width=\"60%\"\n            bgColor=\"#DDB892\"\n            color=\"white\"\n            onClick={() => {\n              setAddDisplay(true);\n              setReadOpened(false);\n              setCheckPage('');\n            }}\n          >\n            메인으로 돌아가기\n          </StyledButton>\n        </div>\n      </div>\n    );\n  };\n  // 예약된 정보를 보여주는 컴포넌트\n  const mainContent = () => {\n    return (\n      <Grid\n        container\n        spacing={2}\n        style={{\n          padding: '2rem',\n        }}\n      >\n        <Grid\n          item\n          xs={3}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n            이름\n          </StyledTypography>\n        </Grid>\n        <Grid item xs={9}>\n          <StyledInputBase readOnly value={readPatient.title} />\n        </Grid>\n        <Grid\n          item\n          xs={3}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n            생년월일\n          </StyledTypography>\n        </Grid>\n        <Grid item xs={9}>\n          <StyledInputBase\n            readOnly\n            value={moment(readPatient.patientBirth).format('yyyy년 MM월 DD일')}\n          />\n        </Grid>\n        <Grid\n          item\n          xs={3}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n            예약 날짜\n          </StyledTypography>\n        </Grid>\n        <Grid item xs={9}>\n          <StyledInputBase readOnly value={reservationTime.day} />\n        </Grid>\n        <Grid\n          item\n          xs={3}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n            예약 시작\n          </StyledTypography>\n        </Grid>\n        <Grid item xs={9}>\n          <StyledInputBase readOnly value={reservationTime.startTime} />\n        </Grid>\n        <Grid\n          item\n          xs={3}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n            예약 종료\n          </StyledTypography>\n        </Grid>\n        <Grid item xs={9}>\n          <StyledInputBase readOnly value={reservationTime.endTime} />\n        </Grid>\n        <Grid\n          item\n          xs={3}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n            진료실\n          </StyledTypography>\n        </Grid>\n        <Grid item xs={9}>\n          <StyledInputBase readOnly value={readPatient.doctorRoom} />\n        </Grid>\n        <Grid\n          item\n          xs={3}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n            의사\n          </StyledTypography>\n        </Grid>\n        <Grid item xs={9}>\n          <StyledInputBase readOnly value={readPatient.doctorName} />\n        </Grid>\n        <Grid\n          item\n          xs={3}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n            내원 사유\n          </StyledTypography>\n        </Grid>\n        <Grid item xs={9}>\n          <StyledInputBase\n            onChange={visitReasonHandleChange}\n            value={visitReason}\n          />\n        </Grid>\n        <Grid item xs={6} style={{ textAlign: 'center', marginTop: '1.5em' }}>\n          <StyledButton\n            width=\"80%\"\n            bgColor=\"#fb8500\"\n            color=\"white\"\n            onClick={() => {\n              updateReservationInfo(readPatient.id, visitReason);\n            }}\n          >\n            예약수정\n          </StyledButton>\n        </Grid>\n        <Grid item xs={6} style={{ textAlign: 'center', marginTop: '1.5em' }}>\n          <StyledButton\n            width=\"80%\"\n            bgColor=\"#d90429\"\n            color=\"white\"\n            onClick={() => {\n              deleteReservationInfo(readPatient.id);\n            }}\n          >\n            예약취소\n          </StyledButton>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return (\n    <div>\n      {/* checkPage 값에 따라 예약된 정보를 나타내거나, 업데이트 컴포넌트, 삭제 컴포넌트를 보여준다 */}\n      {checkPage === '' && mainContent()}\n      {checkPage === 'UPDATE' && resultUpdate()}\n      {checkPage === 'REMOVE' && resultDelete()}\n    </div>\n  );\n};\n\nexport default ReservationReadContainer;\n","import React, { Fragment } from 'react';\nimport { SwipeableDrawer } from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport ReservationReadContainer from './ReservationReadContainer';\n\n/*\n  추가된 예약환자 데이터를 클릭했을 때, 나타나는 드로어\n  해당 컴포넌트는 환자의 정보를 보여줄 수 있는 큰틀의 컴포넌트이다.\n  readPatient: 환자의 정보가 담겨 있는 객체 데이터 -> ReservationReadContainer 컴포넌트로 보내준다.\n*/\nconst ReservationReadDrawer = ({\n  readOpened,\n  setReadOpened,\n  readPatient,\n  setAddDisplay,\n}) => {\n  const { breakpoint } = useWindowSize();\n\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    if (!open) {\n      setAddDisplay(true);\n    }\n\n    setReadOpened(open);\n  };\n\n  const handleChangeCloseClick = () => {\n    setReadOpened(false);\n  };\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={readOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer\n          breakpoint={breakpoint}\n          style={{ marginTop: '2em' }}\n        >\n          <DrawerHeader breakpoint={breakpoint}>\n            <h1>예약 환자 </h1>\n            <div>\n              <AiOutlineClose\n                size={32}\n                onClick={handleChangeCloseClick}\n                style={{ cursor: 'pointer' }}\n              />\n            </div>\n          </DrawerHeader>\n          <ReservationReadContainer\n            setReadOpened={setReadOpened}\n            readPatient={readPatient}\n            setAddDisplay={setAddDisplay}\n          />\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default ReservationReadDrawer;\n","import React, { Fragment} from 'react';\nimport moment from 'moment';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\n\n/*\n  검색 결과를 리스트로 보여주는 컴포넌트 이다.\n  1) searchResults에는 키워드로 검색된 결과에 대한 환자 데이터 정보가 들어있다\n  2) setReadPatient는 여기에서 나온 리스트 아이템 (환자 데이터)를 세팅할 수 있는 상태 함수 이다.\n  3) pageResult는 검색결과에 따라 검색 해주세요 or 검색결과가 없다는 표시를 해준다\n*/\nconst PatientInfoListItem = ({ searchResults, setReadPatient, setReadOpened, pageResult }) => {\n\n  /*\n    리스트 아이템을 클릭 했을 때, paient를 받아\n    setReadPatient에 patient를 세팅해준다.\n    setReadOpened에 true를 세팅 해주어\n    ReservationInfoListContainer 컴포넌트로 변경되도록 한다.\n  */\n  const handlePatientClick = (patient) => {\n    setReadPatient(patient);\n    setReadOpened(true);\n  };\n\n\n\n  // 검색된 결과에 대한 아이템 이다. (환자 데이터)\n  const resultItem = (reservation) => {\n      return (\n        <div key={reservation.id}>\n          <Divider variant=\"inset\" component=\"li\" />\n          <ListItem\n            alignItems=\"flex-start\"\n            style={{ cursor: 'pointer' }}\n            onClick={() => handlePatientClick(reservation)}\n          >\n            <ListItemAvatar>\n              <Avatar alt={reservation.title} src=\"\" />\n            </ListItemAvatar>\n            <ListItemText\n              primary={\n                reservation.title +\n                ' / ' +\n                reservation.doctorRoom +\n                ' ( ' +\n                moment(reservation.start).format('LT') +\n                ' ~ ' +\n                moment(reservation.end).format('LT') +\n                ' )'\n              }\n              secondary={\n                <Fragment>\n                  <StyledTypography\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"textPrimary\"\n                  >\n                    {' ' +\n                      reservation.patientBirth[0] +\n                      '-' +\n                      reservation.patientBirth[1] +\n                      '-' +\n                      reservation.patientBirth[2]}\n                  </StyledTypography>\n                </Fragment>\n              }\n            />\n          </ListItem>\n          <Divider variant=\"inset\" component=\"li\" />\n        </div>\n      );\n    }\n  /// 검색어를 입력해주세요\n  const resultSearch = () => {\n    return (\n          <div style={{ alignItems: 'center' }}>\n            <div style={{ width: '80%' }}>\n              <img\n                src=\"/assets/image/pleaseSearching.png\"\n                width=\"100%\"\n                alt=\"confirmPicture\"\n              />\n            </div>\n            <div\n              style={{\n                alignItems: 'center',\n              }}\n            >\n              <div\n                style={{\n                  fontWeight: 'bold',\n                  textAlign: 'center',\n                  marginTop: '1em',\n                }}\n              >\n                <h1>검색어를 입력해주세요 </h1>\n              </div>\n            </div>\n          </div>\n    )\n  }\n\n  // 검색 결과가  없습니다.\n  const resultNot = () => {\n    return (\n      <div style={{ alignItems: 'center' }}>\n            <div style={{ width: '100%', textAlign: 'center' }}>\n              <img\n                src=\"/assets/image/notFound.png\"\n                width=\"100%\"\n                alt=\"confirmPicture\"\n              />\n            </div>\n            <div\n              style={{\n                alignItems: 'center',\n              }}\n            >\n              <div\n                style={{\n                  fontWeight: 'bold',\n                  textAlign: 'center',\n                  marginTop: '1em',\n                }}\n              >\n                <h1>검색 결과가 없습니다 </h1>\n              </div>\n            </div>\n          </div>\n    )\n  }\n  return (\n    <List>\n      {searchResults.length > 0 &&\n        searchResults.map((reservation) => \n          resultItem(reservation)\n        )}\n      {searchResults.length === 0 &&\n        (pageResult === false ? (\n        resultSearch()\n        ) : (\n          resultNot()\n        ))}\n    </List>\n  );\n};\n\nexport default PatientInfoListItem;\n","\nimport { Grid } from '@material-ui/core';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport StyledButton from 'components/common/button/StyledButton';\n\n// 검색된 예약 데이터에 대한 상세정보를 볼 수 있는 컴포넌트\nconst Content = ({\n  readPatient,\n  reservationTime,\n  updateReservationInfo,\n  visitReasonHandleChange,\n  removeReservationInfo,\n  visitReason,\n}\n) => {\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      style={{\n        padding: '2rem',\n      }}\n    >\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          이름\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={readPatient.title} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          생년월일\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={readPatient.patientBirth} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          예약 날짜\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={reservationTime.day} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          예약 시작\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={reservationTime.startTime} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          예약 종료\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={reservationTime.endTime} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          진료실\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={readPatient.doctorRoom} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          의사\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase readOnly value={readPatient.doctorName} />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n          내원 사유\n        </StyledTypography>\n      </Grid>\n      <Grid item xs={9}>\n        <StyledInputBase\n          onChange={visitReasonHandleChange}\n          value={visitReason}\n        />\n      </Grid>\n      <Grid item xs={6} style={{ textAlign: 'center', marginTop: '1.5em' }}>\n        <StyledButton\n          width=\"80%\"\n          bgColor=\"#99582a\"\n          color=\"white\"\n          onClick={() => {\n            updateReservationInfo(readPatient.id, visitReason);\n          }}\n        >\n          예약수정\n        </StyledButton>\n      </Grid>\n      <Grid item xs={6} style={{ textAlign: 'center', marginTop: '1.5em' }}>\n        <StyledButton\n          width=\"80%\"\n          bgColor=\"#DDB892\"\n          color=\"white\"\n          onClick={() => {\n            removeReservationInfo(readPatient.id);\n          }}\n        >\n          예약취소\n        </StyledButton>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Content;\n","import StyledButton from \"components/common/button/StyledButton\";\n\n// 수정이 완료되었을 때 나타나는 컴포넌트\nconst UpdateQuestion = ({\n  setCheckPage,\n  setVisible,\n  setReadOpened,\n  setPageResult,\n  setAddDisplay,\n}) => {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <div>\n        <img src=\"/assets/image/accept.png\" alt=\"accept\" />\n      </div>\n      <div>\n        <h1 style={{ fontWeight: 'bold', marginBottom: '2em' }}>\n          수정이 완료되었습니다.\n        </h1>\n      </div>\n      <div>\n        <StyledButton\n          width=\"60%\"\n          bgColor=\"#DDB892\"\n          color=\"white\"\n          onClick={() => {\n            setCheckPage('');\n            setVisible(false);\n            setAddDisplay(true);\n            setPageResult(false);\n            setReadOpened(false);\n          }}\n        >\n          이전 화면으로 돌아가기\n        </StyledButton>\n      </div>\n    </div>\n  );\n};\n\nexport default UpdateQuestion;","import StyledButton from \"components/common/button/StyledButton\";\n\n//삭제가 완료되었을때 나타내는 컴포넌트\nconst DeleteQuestion = ({\n  setCheckPage,\n  setVisible,\n  setReadOpened,\n  setPageResult,\n  setAddDisplay,\n}) => {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <div>\n        <img src=\"/assets/image/accept.png\" alt=\"accept\" />\n      </div>\n      <div>\n        <h1 style={{ fontWeight: 'bold', marginBottom: '2em' }}>\n          삭제가 완료되었습니다.\n        </h1>\n      </div>\n      <div>\n        <StyledButton\n          width=\"60%\"\n          bgColor=\"#DDB892\"\n          color=\"white\"\n          onClick={() => {\n           setCheckPage('');\n           setVisible(false);\n           setAddDisplay(true);\n           setPageResult(false);\n           setReadOpened(false);\n          }}\n        >\n          이전 화면으로 돌아가기\n        </StyledButton>\n      </div>\n    </div>\n  );\n};\n\nexport default DeleteQuestion;","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Content from './content';\nimport UpdateQuestion from './content/UpdateQuestion';\nimport DeleteQuestion from './content/DeleteQuestion';\n\nimport {\n  modifyReservationInfo,\n  removeReservationInfo,\n} from 'apis/reservationAPI';\nimport moment from 'moment';\n\n/*\n  해당 컴포넌트는 환자 데이터 정보를 가져와 볼 수 있는 컴포넌트이다.\n  1) setReadOpened -> DeleteQuestion과 UpdateQuestion 에 props로 전달해 준다. \n     false -> 검색어가 없다라고 띄우는 컴포넌트\n     true -> 검색결과 내용을 담아 띄우는 컴포넌트\n  2) readPatient는 환자 데이터 이다. Content 컴포넌트에 props로 전달하여 데이터를 세팅해 준다\n  3) setVisible ->SearchBox를 보여주냐 보여주지 않냐에 대한 여부\n  4) setPageResult\n     예약환자를 검색하는 컴포넌트 (PatientListItem)에서 \n     pageResult = true -> 검색어를 입력해세요 라는 내용이 세팅\n                  false -> 검색결과가 없습니다 라는 내용이 세팅\n*/\nconst ReservationInfoListContainer = ({\n  setReadOpened,\n  readPatient,\n  setVisible,\n  setPageResult,\n  setAddDisplay\n}) => {\n  \n  const { enqueueSnackbar } = useSnackbar();\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n\n  const handleAlert = (variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n    });\n  };\n  /*\n    '': => Content 컴포넌트 (환자의 정보를 보여주는 컴포넌트)\n    'Update': => 수정이 완료되었다는 내용\n    'Remove': => 삭제가 완료되었다는 내용\n  */\n  const [checkPage, setCheckPage] = useState('');\n\n  // 의사 소견\n  const [visitReason, setReason] = useState(readPatient.visitPurpose);\n\n  // 예약시간 데이터\n  const [reservationTime, setReservationTime] = useState({\n    day: '',\n    startTime: '',\n    endTime: '',\n  });\n\n  // 의사 소견에 대한 값을 setReason에 세팅\n  const visitReasonHandleChange = (event) => {\n    setReason(event.target.value);\n  };\n\n  /*\n    readPatient 값이 바뀔때 마다 \n    props를 통해 갖고온 readPatient 데이터를 reservationTime에 세팅 해준다\n  */\n  useEffect(() => {\n    setReservationTime({\n      day: moment(readPatient.start).format('YYYY년 MM월 DD일'),\n      startTime: moment(readPatient.start).format('LT'),\n      endTime: moment(readPatient.end).format('LT'),\n    });\n  }, [readPatient]);\n\n  // 수정관련 클릭 이벤트\n  const updateReservationInfo = async (id, changeVisitReason) => {\n    if (visitReason === readPatient.drOpinion) {\n      handleAlert('error', '수정된 내용을 입력해주세요');\n    } else {\n      const updateInfo = {\n        diagId: id,\n        patientId: readPatient.patientId,\n        memberId: readPatient.memberId,\n        hospitalCode: loginInfo.hospitalCode,\n        visitPurpose: changeVisitReason,\n      };\n      try{\n        const { data } = await modifyReservationInfo(updateInfo);\n        console.log(data.data);\n         handleAlert('success', '내용이 변경되었습니다');\n        setCheckPage('UPDATE');\n        setVisible(true);\n      }catch(error) {\n        const {message} = error.response.data;\n        handleAlert('error', message);\n      } \n\n    }\n  };\n\n  // 예약 취소 눌렀을 떄 일어나는 클릭 이벤트\n  const deleteReservationInfo = async(id) => {\n    try{\n      const { data } = await removeReservationInfo(id);\n      console.log(data.data);\n      handleAlert('success', '예약이 취소되었습니다.');\n      setCheckPage('REMOVE');\n      setVisible(true);\n    }catch(error) {\n      const{message} = error.response.data;\n      handleAlert('error', message);\n    }\n\n  };\n\n  return (\n    <div>\n      {checkPage === '' && (\n        <Content\n          readPatient={readPatient}\n          reservationTime={reservationTime}\n          updateReservationInfo={updateReservationInfo}\n          visitReasonHandleChange={visitReasonHandleChange}\n          removeReservationInfo={deleteReservationInfo}\n          visitReason={visitReason}\n        />\n      )}\n      {checkPage === 'UPDATE' && (\n        <UpdateQuestion\n          setCheckPage={setCheckPage}\n          setVisible={setVisible}\n          setReadOpened={setReadOpened}\n          setPageResult={setPageResult}\n          setAddDisplay={setAddDisplay}\n        />\n      )}\n      {checkPage === 'REMOVE' && (\n        <DeleteQuestion\n          setCheckPage={setCheckPage}\n          setVisible={setVisible}\n          setReadOpened={setReadOpened}\n          setPageResult={setPageResult}\n          setAddDisplay={setAddDisplay}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ReservationInfoListContainer;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { SwipeableDrawer } from '@material-ui/core';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport useWindowSize from 'hooks/useWindowSize';\nimport ResponsiveContainer from 'components/common/container/ResponsiveContainer';\nimport DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport SearchBox from 'components/common/search/SearchBox';\nimport PatientInfoListItem from './PatientInfoListItem';\nimport ReservationInfoListContainer from './ReservationInfoListContainer';\nimport ClockSpinner from 'components/common/spinner/ClockSpinner';\nimport { getSearchReservationPatient } from 'apis/reservationAPI';\n\n/*\n  예약된 환자의 검색을 보여주는 Drawer 컨테이너\n*/\nconst SearchReservation = ({\n  searchOpened,\n  setSearchOpened,\n  setAddDisplay,\n}) => {\n \n  // 로그인한 유저의 정보\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n  // 검색어(SearchBox)를 보여주냐 안보여주냐를 세팅하는 상태 데이터\n  const [visible, setVisible] = useState(false);\n\n  //clockSpinner에 시팅할 것\n  const [isLoading, setLoading] = useState(false);\n  /*\n     검색결과에 대한 환자 데이터를 담는 부분\n     PatientInfoListItem 컴포넌트에 searchResults를 전달해 검색결과 데이터 리스트가 띄어진다\n  */\n  const [searchResults, setResult] = useState([]);\n  /*\n     컴포넌트 변경 부분\n     false -> 검색어가 없다라고 띄우는 컴포넌트\n     true -> 검색결과 내용을 담아 띄우는 컴포넌트\n  */\n  const [readOpened, setReadOpened] = useState(false);\n  /*\n    예약환자 데이터를 담는 상태데이터\n    PatientInfoListItem 컴포넌트에 setReadPatient를 보내 데이터를 담아온다\n  */\n  const [readPatient, setReadPatient] = useState();\n  /*\n    예약환자를 검색하는 컴포넌트 (PatientListItem)에서 \n    pageResult = true -> 검색어를 입력해세요 라는 내용이 세팅\n                 false -> 검색결과가 없습니다 라는 내용이 세팅\n  */\n  const [pageResult, setPageResult] = useState(false);\n\n  const { breakpoint } = useWindowSize();\n  const toggleDrawer = (open) => (e) => {\n    if (e && e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) {\n      return;\n    }\n    setSearchOpened(open);\n  };\n  // x 버튼을 클릭시 발생되는 클릭 이벤트\n  const handleChangeCloseClick = () => {\n    setSearchOpened(false);\n    setReadOpened(false);\n    setPageResult(false);\n    setResult([]);\n  };\n\n  useEffect(() => {\n    setResult([]);\n  }, [readOpened]);\n\n  /*\n    SearcBox에 해당 함수를 넘겨 키워드 (inputVal)를 받아\n    그 키워드에 맞는 환자 데이터를\n    1) result 변수에 담는다\n    2) restul를 setResult 함수에 담는다 (searchResults)\n  */\n  const setSearchVal = async (inputVal) => {\n    try {\n      setLoading(true);\n      const { data } = await getSearchReservationPatient({\n        hospitalCode: loginInfo.hospitalCode,\n        patientName: inputVal,\n      });\n      setResult(data.data);\n      console.log(data.data);\n      setReadOpened(false);\n     \n    } catch (error) {\n      setResult([]);\n       setPageResult(true);\n      setLoading(false);\n    }\n  };\n\n  /*\n    검색결과에 대한 데이터의값이 있을 경우, spinner를 off 한다\n  */\n  useEffect(() => {\n    if (searchResults.length > 0) {\n      setLoading(false);\n    }\n  }, [searchResults]);\n\n  const clockSpinner = () => {\n    return (\n      <div\n        style={{\n          height: '100vh',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <ClockSpinner isLoading={isLoading} />\n      </div>\n    );\n  };\n\n  return (\n    <Fragment>\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={searchOpened}\n        onOpen={toggleDrawer(true)}\n        onClose={toggleDrawer(false)}\n      >\n        <ResponsiveContainer breakpoint={breakpoint}>\n          <DrawerHeader breakpoint={breakpoint}>\n            <h1>예약 환자 검색</h1>\n            <div>\n              <AiOutlineClose\n                size={32}\n                onClick={handleChangeCloseClick}\n                style={{ cursor: 'pointer' }}\n              />\n            </div>\n          </DrawerHeader>\n\n          {visible === false && (\n            <SearchBox\n              setSearchVal={setSearchVal}\n              placeholder=\"환자 이름을 입력해주세요.\"\n            />\n          )}\n          {isLoading && clockSpinner()}\n          {!isLoading && (\n            <div style={{ marginTop: '2em' }}>\n              {readOpened === false ? (\n                // 검색시 나오는 컴포넌트\n                <PatientInfoListItem\n                  searchResults={searchResults}\n                  setReadOpened={setReadOpened}\n                  setReadPatient={setReadPatient}\n                  pageResult={pageResult}\n                />\n              ) : (\n                //예약한 환자에 대한 정보 데이터\n                <ReservationInfoListContainer\n                  setReadOpened={setReadOpened}\n                  readPatient={readPatient}\n                  setVisible={setVisible}\n                  setPageResult={setPageResult}\n                  setAddDisplay={setAddDisplay}\n                />\n              )}\n            </div>\n          )}\n        </ResponsiveContainer>\n      </SwipeableDrawer>\n    </Fragment>\n  );\n};\n\nexport default SearchReservation;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { getDoctorInfo, getReservationInfo } from 'apis/reservationAPI';\nimport { useSelector } from 'react-redux';\nimport {\n  Divider,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n} from '@material-ui/core';\nimport { IoIosArrowBack, IoIosArrowForward } from 'react-icons/io';\nimport { RiUserSearchFill } from 'react-icons/ri';\n\n// Toast UI Calendar Library & monent.js\nimport Calendar from '@toast-ui/react-calendar';\nimport moment from 'moment';\nimport 'tui-calendar/dist/tui-calendar.css';\nimport 'tui-date-picker/dist/tui-date-picker.css';\nimport 'tui-time-picker/dist/tui-time-picker.css';\n\n// Custom Components by Team1\nimport ContentContainer from 'components/common/container/ContentContainer';\nimport TitleHeader from 'components/common/header/TitleHeader';\nimport ReservationDrawer from 'components/reservation/drawer/insert/ReservationDrawer';\nimport ReservationReadDrawer from 'components/reservation/drawer/read/ReservationReadDrawer';\nimport SearchReservation from 'components/reservation/drawer/searchReservation';\nimport ResponsivePageHeader from 'components/common/header/ResponsivePageHeader';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport ClockSpinner from 'components/common/spinner/ClockSpinner';\n\n/**\n * 이 페이지 컴포넌트는 진료 에약(접수) 페이지를 작성하기 위한 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * * 진료 예약(접수) - Toast UI Calendar, ReservationDrawer\n * @returns {JSX.Element}\n */\nconst ReservationPage = () => {\n  /*\n   검색\n   1) callendarDom\n   2) Drawer-search\n   3) Drawer-add\n   4) Drawer-update\n   5) selectDoctor\n   6) reservationData (예약데이터 추가, 리덕스)\n   7) readReservationData (예약데이터 읽기)\n  */\n\n  /*\n  리덕스에 있는 로그인 정보를 가져오는 부분\n  */\n  const loginInfo = useSelector((state) => state.common.loginInfo);\n\n  /*\n  Calendar DOM을 가져오기 위해 설정하는 Ref\n  검색: callendarDom\n  */\n  const calendarRef = useRef();\n\n  /* \n  Calendar DOM을 가져와 Instance를 설정하기 위한 State\n  검색: callendarDom\n  */\n  const [calInstance, setCalInstance] = useState(null);\n\n  // Drawer 여부를 확인하기 위한 State\n\n  // 검색: Drawer-add\n  const [isOpened, setOpened] = useState(false);\n  // 검색: Drawer-update\n  const [readOpened, setReadOpened] = useState(false);\n  // 검색: Drawer-search\n  const [searchOpened, setSearchOpened] = useState(false);\n\n  // clockSpinner\n  const [isLoading, setLoading] = useState(true);\n\n  // errorText\n  const [errorText, setError] = useState(false);\n\n  // 추가,수정,삭제를 완료후 true로 세팅하게 되면, 캘린더 컴포넌트에서는 addDisplay값이 변경될 때마다 예약데이터를 다시 받아올 수 있도록 세팅된 상태 데이터이다.\n  // 220번째 useEffect 내용 참조\n  const [addDisplay, setAddDisplay] = useState(false);\n\n  /*\n  Select ID를 선택하기 위한 State \n  검색: selectDoctor\n  */\n  const [selectId, setSelectId] = useState('');\n\n  /* 의사 정보를 설정하기 위한 State (select)\n  검색: selectDoctor\n  */\n  const [doctorInfo, setDoctorInfo] = useState({\n    member_id: '',\n    member_name: '',\n    doctor_room: '',\n  });\n  /*\n    resetvationData를 설정하기 위한 State\n  */\n  const [reservationDataList, setReservationData] = useState([]);\n\n  /*\n   의사 정보 리스트를 저장하기 위한 State\n  */\n  const [doctorListInfo, setDoctorListInfo] = useState([]);\n\n  /*\n   예약시간 세팅을 위한 상태 데이터 (onBeforeCreateSchedule)\n   검색: reservationData\n   */\n  const [reservationTime, setReservationTime] = useState({\n    date: '',\n    startTime: '',\n    endTime: '',\n    scheduleStart: '',\n    scheduleEnd: '',\n    weekNum: '',\n  });\n\n  /* \n  특정 예약데이터를 읽어 updateDrawer에 넘겨주는 부분\n  검색: readReservationData\n  */\n  const [readPatient, setReadPatient] = useState({});\n\n  // 캘린더 헤더 부분에 위클리 데이트세팅, 초기값 세팅부분\n  const now = new Date();\n  const weekNum = moment(now, 'MM-DD-YYYY').week();\n  const initStartDate = moment(moment().startOf('week').toDate()).format(\n    'YYYY년 MM월 DD일',\n  );\n  const initEndDate = moment(moment().endOf('week').toDate()).format(\n    'YYYY년 MM월 DD일',\n  );\n\n  /*\n  handlePrevClick과 handleNextClick 클릭시 주단위로\n  캘린더가 넘어간다\n  넘어갈떄의 시작 날짜와, 끝 날짜를 세팅하는 부분이다\n  검색: callendarDom\n  */\n  const [titleDate, setTitleDate] = useState({\n    weekNo: moment(now, 'MM-DD-YYYY').week(),\n    startDate: initStartDate,\n    endDate: initEndDate,\n  });\n\n  // toast ui calendar dom을 가져오기 위한 useEffect\n  useEffect(() => {\n    setCalInstance(calendarRef.current.getInstance());\n  }, [calendarRef]);\n\n  /*\n  의사에 대한 정보를 불러오기 위해 useEffect 사용\n  의사데이터 가져온 후 -> 의사 정보 세팅(setDoctorListInfo) -> select에 의사 default 값 세팅(selectOnChange)\n  -> reservationListData를 통해 예약 데이터 가져오기\n  */\n\n  useEffect(() => {\n    // 예약 데이터 가져오기\n    const reservationListData = async (memberId) => {\n      try {\n        const { data } = await getReservationInfo({\n          weekNo: weekNum,\n          memberId,\n          hospitalCode: loginInfo.hospitalCode,\n        });\n        console.log(data.data);\n        setReservationData(data.data);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n    // 의사 데이터 가져오기\n    const doctorData = async () => {\n      try {\n        const { data } = await getDoctorInfo(loginInfo.hospitalCode);\n\n        setDoctorInfo({\n          memberId: data.data[0].memberId,\n          memberName: data.data[0].memberName,\n          doctorRoom: data.data[0].doctorRoom,\n        });\n        setDoctorListInfo(data.data);\n        selectOnChange(data.data[0].memberId);\n        reservationListData(data.data[0].memberId);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n\n    doctorData();\n  }, [loginInfo.hospitalCode, weekNum]);\n\n  /*\n    추가, 수정, 삭제를 완료했을때, 수정된 값을 다시 받아오기 위한 useEffect \n  */\n  useEffect(() => {\n    const reservationListData = async () => {\n      try {\n        const { data } = await getReservationInfo({\n          weekNo: titleDate.weekNo,\n          memberId: doctorInfo.memberId,\n          hospitalCode: loginInfo.hospitalCode,\n        });\n        setReservationData(data.data);\n      } catch (error) {\n        console.log(error);\n        calInstance.clear();\n        setReservationData([]);\n        setLoading(false);\n      }\n    };\n\n    if (addDisplay) {\n      setLoading(true);\n      setAddDisplay(false);\n      reservationListData();\n    }\n  }, [addDisplay, titleDate, doctorInfo, loginInfo]);\n\n  /*\n    예약데이터를 가져왔을때, 1개이상의 데이터가 존재하면 실행되는 useEffect이다.\n    여기에서 calendar에 데이터가 세팅이 된다.\n  */\n  useEffect(() => {\n    if (reservationDataList.length > 0) {\n      calInstance.clear();\n      calInstance.createSchedules(reservationDataList);\n      calInstance.render();\n      setLoading(false);\n    }\n  }, [reservationDataList, calInstance]);\n\n  /*\n  select 부분이다.\n  select 안에 있는 메뉴 아이템 부분을 클릭할 때마다\n  setDoctorInfo에 데이터들을 세팅한다\n  검색: selectDoctor\n  */\n  const handleMenuItemClick = async (item) => {\n    setLoading(true);\n    selectOnChange(item.memberId);\n    const reservationInfo = async (mId) => {\n      const weekNo = Number.parseInt(titleDate.weekNo);\n      const memberId = Number.parseInt(mId);\n      try {\n        const { data } = await getReservationInfo({\n          weekNo,\n          memberId,\n          hospitalCode: loginInfo.hospitalCode,\n        });\n        setReservationData(data.data);\n      } catch (error) {\n        console.log(error);\n        setReservationData([]);\n        calInstance.clear();\n        setLoading(false);\n      }\n    };\n    const data = {\n      memberId: item.memberId,\n      memberName: item.memberName,\n      doctorRoom: item.doctorRoom,\n    };\n    setDoctorInfo(data);\n\n    reservationInfo(item.memberId);\n  };\n\n  // 캘린더 주단위를 넘기기 위한 부분 (-)\n  const handlePrevClick = () => {\n    setLoading(true);\n    calInstance.prev();\n\n    const weekNo = moment(\n      calInstance.getDateRangeStart().toDate(),\n      'MM-DD-YYYY',\n    ).week();\n    const startDate = moment(calInstance.getDateRangeStart().toDate()).format(\n      'YYYY년 MM월 DD일',\n    );\n    const endDate = moment(calInstance.getDateRangeEnd().toDate()).format(\n      'YYYY년 MM월 DD일',\n    );\n\n    const reservationInfo = async (mId) => {\n      try {\n        setTitleDate({ weekNo, startDate, endDate });\n        const { data } = await getReservationInfo({\n          weekNo,\n          memberId: mId,\n          hospitalCode: loginInfo.hospitalCode,\n        });\n        setReservationData(data.data);\n      } catch (error) {\n        console.log(error);\n        setReservationData([]);\n        calInstance.clear();\n        setLoading(false);\n      }\n    };\n    reservationInfo(doctorInfo.memberId);\n  };\n\n  // 캘린더 주단위를 넘기기 위한 부분 (+)\n  const handleNextClick = async () => {\n    setLoading(true);\n    calInstance.next();\n    const weekNo = moment(\n      calInstance.getDateRangeStart().toDate(),\n      'MM-DD-YYYY',\n    ).week();\n\n    const startDate = moment(calInstance.getDateRangeStart().toDate()).format(\n      'YYYY년 MM월 DD일',\n    );\n    const endDate = moment(calInstance.getDateRangeEnd().toDate()).format(\n      'YYYY년 MM월 DD일',\n    );\n\n    const reservationInfo = async (mId) => {\n      try {\n        setTitleDate({ weekNo, startDate, endDate });\n        const { data } = await getReservationInfo({\n          weekNo,\n          memberId: mId,\n          hospitalCode: loginInfo.hospitalCode,\n        });\n        setReservationData(data.data);\n      } catch (error) {\n        console.log(error);\n        setReservationData([]);\n        calInstance.clear();\n        setLoading(false);\n      }\n    };\n    reservationInfo(doctorInfo.memberId);\n  };\n\n  /*\n  달력 스케줄 클릭시 발생되는 이벤트\n  1) 캘린더에서 년월일, 예약시작 시간, 예약 끝 시간을 얻는다\n  2) 얻은 데이터를 통해 상태 데이터(reservationTime)에 세팅한다\n  3) drawer오픈한다\n  검색: readReservationData\n  */\n  const onBeforeCreateSchedule = (e) => {\n    // 1)\n    const start = e.start;\n    const end = e.end;\n    const date =\n      moment(start).format('YYYY') +\n      '년 ' +\n      moment(start).format('M') +\n      '월 ' +\n      moment(start).format('D') +\n      '일';\n    const startTime = moment(start.toDate()).format('LT');\n    const endTime = moment(end.toDate()).format('LT');\n\n    const scheduleStart = moment(start.toDate()).format();\n    const scheduleEnd = moment(end.toDate()).format();\n\n    //2)\n    setReservationTime({\n      date,\n      start,\n      end,\n      startTime,\n      endTime,\n      scheduleStart,\n      scheduleEnd,\n      weekNum: titleDate.weekNo,\n    });\n\n    /*\n    3)\n    검색: Drawer-add\n    */\n    setOpened(true);\n  };\n\n  /*\n  캘린더에 세팅된 예약 데이터들을 클릭할때 일어나는 클릭 이벤트\n  1) 세팅 되어 있는 예약 데이터에는 고유의 id를 통해 데이터 객체를 얻어낸다\n  2) setReadPatient에 데이터를 세팅한다 -> 세팅된 데이터는 PatientUpdateDrawer에 전달 해준다\n  3) PatientUpdateDrawer를 오픈한다\n  4) 검색: readReservationData\n  */\n  const onClickSchedule = (event) => {\n    //1)\n    const result = reservationDataList.filter(\n      (schedule) => schedule.id === event.schedule.id,\n    );\n\n    /*\n    2)\n    검색: readReservationData\n    */\n    setReadPatient(result[0]);\n    /*\n    3)\n    검색: Drawer-update\n    */\n    setReadOpened(true);\n  };\n\n  const selectOnChange = (value) => {\n    setSelectId(value);\n  };\n\n  // 예약된 환자를 검색할 수 있는 Drawer를 오픈하는 부분\n  const handeSearchOpenClick = () => {\n    // 검색: Drawer-search\n    setSearchOpened(true);\n  };\n\n  const calendar = () => {\n    return (\n      <Grid container alignItems=\"center\" justify=\"center\">\n        <Grid item xs={12}>\n          <PageTransition>\n            <ContentContainer>\n              <TitleHeader\n                style={{\n                  visibility: `${!isLoading ? 'visible' : 'hidden'}`,\n                }}\n              >\n                <div style={{ flex: 4 }}>\n                  <span>진료 | </span>\n                  <span>진료 접수</span>\n                </div>\n\n                {/* selectDoctor */}\n                <FormControl\n                  variant=\"standard\"\n                  style={{ width: '100%', flex: 1 }}\n                >\n                  <InputLabel id=\"label-id\">Doctor</InputLabel>\n                  <Select\n                    labelId=\"label-id\"\n                    id=\"select-id\"\n                    value={selectId}\n                    label=\"Doctor\"\n                  >\n                    {doctorListInfo.map((item) => (\n                      <MenuItem\n                        key={item.memberId}\n                        value={item.memberId}\n                        onClick={() => handleMenuItemClick(item)}\n                      >\n                        {item.memberName}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n                {/* /selectDoctor */}\n              </TitleHeader>\n              <ClockSpinner\n                isLoading={isLoading}\n                style={{ backgroundColor: 'black' }}\n              />\n              <div\n                className=\"icon-area\"\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  visibility: `${!isLoading ? 'visible' : 'hidden'}`,\n                }}\n              >\n                <IconButton\n                  type=\"button\"\n                  size=\"small\"\n                  style={{\n                    border: '1px solid rgba(0,0,0,0.12)',\n                    marginLeft: '0.5rem',\n                    marginRight: '1rem',\n                    padding: '0.5rem',\n                  }}\n                  //Drawer-search\n                  onClick={handeSearchOpenClick}\n                >\n                  <RiUserSearchFill />\n                </IconButton>\n                <IconButton\n                  type=\"button\"\n                  size=\"small\"\n                  style={{\n                    border: '1px solid rgba(0,0,0,0.12)',\n                    marginRight: '0.5rem',\n                    padding: '0.5rem',\n                  }}\n                  onClick={handlePrevClick}\n                >\n                  <IoIosArrowBack />\n                </IconButton>\n\n                <IconButton\n                  type=\"button\"\n                  size=\"small\"\n                  style={{\n                    border: '1px solid rgba(0,0,0,0.12)',\n                    marginLeft: '0.5rem',\n                    marginRight: '1rem',\n                    padding: '0.5rem',\n                  }}\n                  onClick={handleNextClick}\n                >\n                  <IoIosArrowForward />\n                </IconButton>\n\n                <span>\n                  {titleDate.startDate} ~ {titleDate.endDate}\n                </span>\n              </div>\n\n              <div\n                className=\"calendar-area\"\n                style={{\n                  marginTop: '1rem',\n                  visibility: `${!isLoading ? 'visible' : 'hidden'}`,\n                }}\n              >\n                <Calendar\n                  height=\"100%\"\n                  view=\"week\"\n                  ref={calendarRef}\n                  onBeforeCreateSchedule={onBeforeCreateSchedule}\n                  onClickSchedule={onClickSchedule}\n                />\n              </div>\n              {/* Drawer-add*/}\n              <ReservationDrawer\n                isOpened={isOpened}\n                setOpened={setOpened}\n                reservationTime={reservationTime}\n                doctorInfo={doctorInfo}\n                setAddDisplay={setAddDisplay}\n              />\n              {/* Drawer-read -> update, delete 기능을 할 수 있음 */}\n              <ReservationReadDrawer\n                readOpened={readOpened}\n                setReadOpened={setReadOpened}\n                readPatient={readPatient}\n                setAddDisplay={setAddDisplay}\n              />\n              {/* Drawer-search -> 예약된 환자를 검색할 수 있는 drawer*/}\n              <SearchReservation\n                searchOpened={searchOpened}\n                setSearchOpened={setSearchOpened}\n                setAddDisplay={setAddDisplay}\n              />\n            </ContentContainer>\n          </PageTransition>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const errorPage = () => {\n    return (\n      <div\n        style={{\n          height: '100vh',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <h1>error!</h1>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <header\n        style={{\n          position: 'sticky',\n          top: 0,\n          backgroundColor: 'white',\n          zIndex: 1,\n        }}\n      >\n        <ResponsivePageHeader />\n        <Divider />\n      </header>\n      <main>\n        {calendar()}\n        {errorText && errorPage()}\n      </main>\n    </div>\n  );\n};\n\nexport default ReservationPage;\n","import React, { Fragment } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\n/**\n * 이 페이지 컴포넌트는 의사의 사용자가이드를 보여주기 위해 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - DoctorTutorial\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst DoctorTutorial = () => {\n  return (\n    <Fragment>\n      <Swiper\n        spaceBetween={50}\n        navigation={true}\n      >\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드1.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드2.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드3.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드4.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드5.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드6.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드7.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드8.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드9.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드20.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드21.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드22.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드23.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드24.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드25.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드26.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드27.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드28.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        \n        \n        \n      </Swiper>\n    </Fragment>\n  );\n};\nexport default DoctorTutorial;","import React, { Fragment} from 'react';\nimport SwiperCore, { Navigation } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\n\n\nSwiperCore.use([Navigation]);\n/**\n * 이 페이지 컴포넌트는 간호사의 사용자가이드를 보여주기 위해 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - NurseTutorial\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst NurseTutorial = () => {\n\n  return (\n    <Fragment>\n      \n      <Swiper\n        spaceBetween={50}\n        navigation={true}\n      >\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/nurse/slide/슬라이드1.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/nurse/slide/슬라이드2.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/nurse/slide/슬라이드3.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/nurse/slide/슬라이드4.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/nurse/slide/슬라이드5.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/nurse/slide/슬라이드6.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/nurse/slide/슬라이드7.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/nurse/slide/슬라이드8.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/nurse/slide/슬라이드9.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드20.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드21.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드22.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드23.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드24.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드25.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드26.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드27.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드28.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n      </Swiper>\n    </Fragment>\n  );\n};\n\nexport default NurseTutorial;","import React, { Fragment } from 'react';\nimport SwiperCore, { Navigation } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\n\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\n\n\n\nSwiperCore.use([Navigation]);\n/**\n * 이 페이지 컴포넌트는 검사자의 사용자가이드를 보여주기 위해 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - InspectorTutorial\n * @returns {JSX.Element}\n * \n * @author HYEONG YUN KIM\n */\nconst InspectorTutorial = () => {\n\n  return (\n    <Fragment>\n      \n      <Swiper\n        spaceBetween={50}\n        navigation={true}\n      >\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드10.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드11.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드12.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드13.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드14.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드15.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드16.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        \n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드18.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드19.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드20.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/프레젠테이션1/슬라이드21.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n      </Swiper>\n    </Fragment>\n  );\n};\n\nexport default InspectorTutorial;","import React, { Fragment } from 'react';\nimport SwiperCore, { Navigation } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\n\nSwiperCore.use([Navigation]);\n/**\n * 이 페이지 컴포넌트는 공통부분의 튜토리얼을 보여주기 위해 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - CommonTutorial\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst CommonTutorial = () => {\n  return (\n    <Fragment>\n      <Swiper\n        spaceBetween={50}\n        navigation={true}\n      >\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/slide/슬라이드1.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/slide/슬라이드2.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/slide/슬라이드3.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/slide/슬라이드4.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/slide/슬라이드5.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/slide/슬라이드6.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/slide/슬라이드7.png\"\n            alt=\"Logo\"\n            width=\"100%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/slide/슬라이드8.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/common/slide/슬라이드9.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n      </Swiper>\n    </Fragment>\n  );\n};\n\nexport default CommonTutorial;\n","import React, { Fragment} from 'react';\nimport SwiperCore, { Navigation } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\n\n\nSwiperCore.use([Navigation]);\n/**\n * 이 페이지 컴포넌트는 병원장의 사용자가이드를 보여주기 위해 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - OwnerTutorial\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst OwnerTutorial = () => {\n\n  return (\n    <Fragment>\n      \n      <Swiper\n        spaceBetween={50}\n        navigation={true}\n      >\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/owner/슬라이드1.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/owner/슬라이드2.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n        <SwiperSlide\n          style={{\n            width: '100%',\n            height: '100vh',\n            backgroundColor: ' aliceblue',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <img\n            src=\"/assets/image/tutorial/owner/슬라이드3.png\"\n            alt=\"Logo\"\n            width=\"90%\"\n          />\n        </SwiperSlide>\n      </Swiper>\n    </Fragment>\n  );\n};\n\nexport default OwnerTutorial;","import React, { useState } from 'react';\nimport SwiperCore, { Navigation } from 'swiper';\nimport { useSelector, useDispatch } from 'react-redux';\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\nimport ResponsivePageHeader from 'components/common/header/ResponsivePageHeader';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport ContentContainer from 'components/common/container/ContentContainer';\nimport DoctorTutorial from './DoctorTutorial';\nimport NurseTutorial from './NurseTutorial';\nimport InspectorTutorial from './InspectorTutorial';\nimport {\n  Divider,\n  FormControl,\n  Grid,\n  MenuItem,\n  Select,\n} from '@material-ui/core';\nimport { setActiveStep } from 'redux/features/tutorial/tutorialSlice';\nimport TitleHeader from 'components/common/header/TitleHeader';\nimport CommonTutorial from './CommonTutorial';\nimport OwnerTutorial from './OwnerTutorial';\n\nSwiperCore.use([Navigation]);\n/**\n * 이 페이지 컴포넌트는 튜토리얼의 메인을 보여주기 위해 작성하는 컴포넌트입니다.\n * 들어가야할 내용은 다음과 같습니다.\n * - Header\n * - default: CommonTutorial\n * - DoctorTutorial\n * - NurseTutorial\n * - InspectorTutorial\n * - OwnerTutorial\n * @returns {JSX.Element}\n * @author HYEONG YUN KIM\n */\nconst TutorialPage = () => {\n  // 직책을 선택함에 따라 해당 튜토리얼을 변경하기 위해 설정하는 State\n  const [authority, setAuthority] = useState('COMMON');\n  const dispatch = useDispatch();\n  const activeStep = useSelector((state) => state.tutorial.activeStep);\n\n  const getStepContent = (step) => {\n    console.log(step);\n    switch (step) {\n      case 'COMMON':\n        return <CommonTutorial />;\n      case 'DOCTOR':\n        return <DoctorTutorial />;\n      case 'NURSE':\n        return <NurseTutorial />;\n      case 'INSPECTOR':\n        return <InspectorTutorial />;\n      case 'OWNER':\n        return <OwnerTutorial />;\n      default:\n        return <CommonTutorial />;\n    }\n  };\n\n  const handleClick = (authority) => {\n    setAuthority(authority);\n    dispatch(setActiveStep(authority));\n  };\n\n  return (\n    <div>\n      <header\n        style={{\n          position: 'sticky',\n          top: 0,\n          backgroundColor: 'white',\n          zIndex: 1,\n        }}\n      >\n        <ResponsivePageHeader />\n        <Divider />\n      </header>\n      <main>\n        <Grid container>\n          <Grid item xs={12}>\n            <PageTransition>\n              <ContentContainer>\n                <TitleHeader>\n                  <div style={{ flex: 4 }}>\n                    <span>사용자가이드 | {authority}</span>\n                    <span>튜토리얼</span>\n                  </div>\n\n                  <FormControl style={{ width: '100%', flex: 1 }}>\n                    <Select\n                      value={authority}\n                      onChange={(e) => handleClick(e.target.value)}\n                    >\n                      <MenuItem\n                        value=\"COMMON\"\n                        onClick={() => handleClick('COMMON')}\n                      >\n                        공통\n                      </MenuItem>\n                      <MenuItem\n                        value=\"DOCTOR\"\n                        onClick={() => handleClick('DOCTOR')}\n                      >\n                        의사\n                      </MenuItem>\n                      <MenuItem\n                        value=\"NURSE\"\n                        onClick={() => handleClick('NURSE')}\n                      >\n                        간호사\n                      </MenuItem>\n                      <MenuItem\n                        value=\"INSPECTOR\"\n                        onClick={() => handleClick('INSPECTOR')}\n                      >\n                        검사자\n                      </MenuItem>\n                      <MenuItem\n                        value=\"OWNER\"\n                        onClick={() => handleClick('OWNER')}\n                      >\n                        병원장\n                      </MenuItem>\n                    </Select>\n                  </FormControl>\n                </TitleHeader>\n                {getStepContent(activeStep)}\n              </ContentContainer>\n            </PageTransition>\n          </Grid>\n        </Grid>\n      </main>\n    </div>\n  );\n};\n\nexport default TutorialPage;\n","import React, { Fragment, useEffect, useCallback, useRef } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport { useSelector } from 'react-redux';\nimport Paho from 'paho-mqtt';\nimport DiagnosisPage from './diagnosis';\nimport DiagnosisHistoryPage from './diagnosis-history';\nimport DiagnosticPage from './diagnostic';\nimport FrontPage from './front';\nimport MemberPage from './member';\nimport PatientPage from './patient';\nimport ReservationPage from './reservation';\nimport TutorialPage from './tutorial';\n\n/**\n * Dashboard 컴포넌트의 페이지를 정의하고\n * 해당하는 경로의 해당 컴포넌트를 보여주기 위한 Dashboard 컴포넌트\n * 주소 정의\n * * /dashboard => 대쉬보드의 메인 페이지 (공지사항도 포함)\n * * /dashboard/diagnosis => 대쉬보드의 진료 페이지\n * * /dashboard/diagnosis-history => 대쉬보드의 진료 기록 보기 페이지\n * * /dashboard/diagnostic => 대쉬보드의 진단 검사 페이지\n * * /dashboard/member => 대쉬보드의 임직원 관리 페이지\n * * /dashboard/patient => 대쉬보드의 환자 관리 페이지\n * * /dashboard/reservation => 대쉬보드의 진료 예약 페이지\n */\nconst Dashboard = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const history = useHistory();\n  const userInfo = useSelector((state) => state.common.loginInfo);\n  const handleAlert = useCallback(\n    (variant, message) => {\n      enqueueSnackbar(message, {\n        variant,\n      });\n    },\n    [enqueueSnackbar],\n  );\n\n  useEffect(() => {\n    if (sessionStorage.getItem('authToken') === null) {\n      handleAlert('error', '인가되지 않은 요청입니다...');\n      history.push('/');\n    }\n    // 나중에 권한 별로 들어가지 말라고 할 떄에 사용\n    // const parseJSON = JSON.parse(sessionStorage.getItem('userInfo'));\n    // console.log(parseJSON);\n  }, [handleAlert, history]);\n\n  // MQTT 정의\n  const { REACT_APP_MQTT_HOSTNAME, REACT_APP_MQTT_PORT } = process.env;\n  let client = useRef(null);\n  const connectMqttBroker = () => {\n    client.current = new Paho.Client(\n      REACT_APP_MQTT_HOSTNAME,\n      Number.parseInt(REACT_APP_MQTT_PORT),\n      'client-' + new Date().getTime(),\n    );\n    client.current.onConnectionLost = () => {\n      console.log('접속 끊김');\n    };\n    client.current.onMessageArrived = (msg) => {\n      const parseMsg = JSON.parse(msg.payloadString);\n      const { priority, message } = parseMsg;\n      handleAlert(priority, message);\n      // console.log(message);\n    };\n    client.current.connect({\n      onSuccess: () => {\n        const { memberAuthority, hospitalCode } = userInfo;\n        // client.current.subscribe('/ABC_001');\n        console.log(memberAuthority);\n\n        if (memberAuthority === 'ROLE_DEVELOP') {\n          client.current.subscribe(`/${hospitalCode}`); // 모든 유저에게 보냄.\n          client.current.subscribe(`/${hospitalCode}/#`);\n        }\n\n        if (memberAuthority === 'ROLE_DIRECTOR') {\n          client.current.subscribe(`/${hospitalCode}/director`);\n        } else if (memberAuthority === 'ROLE_DOCTOR') {\n          client.current.subscribe(`/${hospitalCode}/doctor`);\n        } else if (memberAuthority === 'ROLE_NURSE') {\n          client.current.subscribe(`/${hospitalCode}/nurse`);\n        } else if (memberAuthority === 'ROLE_INSPECTOR') {\n          client.current.subscribe(`/${hospitalCode}/inspector`);\n        }\n\n        console.log('성공 했습니다.');\n      },\n    });\n  };\n\n  const disconnectMqttBroker = () => {\n    client.current.disconnect();\n  };\n\n  useEffect(() => {\n    connectMqttBroker();\n    return () => {\n      disconnectMqttBroker();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <Switch>\n        <Route path=\"/dashboard\" exact component={FrontPage} />\n        <Route path=\"/dashboard/diagnosis\" component={DiagnosisPage} />\n        <Route\n          path=\"/dashboard/diagnosis-history\"\n          component={DiagnosisHistoryPage}\n        />\n        <Route path=\"/dashboard/diagnostic\" component={DiagnosticPage} />\n        <Route path=\"/dashboard/member\" component={MemberPage} />\n        <Route path=\"/dashboard/patient\" component={PatientPage} />\n        <Route path=\"/dashboard/reservation\" component={ReservationPage} />\n        <Route path=\"/dashboard/tutorial\" component={TutorialPage} />\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport ResponsivePageHeader from 'components/common/header/ResponsivePageHeader';\nimport PageTransition from 'components/common/transition/PageTransition';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nconst MainPage = () => {\n  return (\n    <div>\n      <header\n        style={{\n          position: 'sticky',\n          top: 0,\n          backgroundColor: 'white',\n          zIndex: 1,\n        }}\n      >\n        <ResponsivePageHeader />\n      </header>\n      <main>\n        <PageTransition>\n          <Container\n            maxWidth=\"lg\"\n            style={{\n              backgroundImage: `url(/assets/image/landing_5.png)`,\n              height: '90vh',\n              width: '100%',\n              backgroundPosition: 'bottom',\n              backgroundRepeat: 'no-repeat',\n              backgroundSize: 'contain',\n            }}\n          >\n            <div\n              style={{\n                marginTop: '3rem',\n                textAlign: 'center',\n              }}\n            >\n              <StyledTypography variant=\"h2\" component=\"h3\" weight={7}>\n                쉬운 병원 관리 시스템\n              </StyledTypography>\n              <div\n                style={{\n                  marginTop: '1rem',\n                }}\n              >\n                <StyledTypography variant=\"h4\" component=\"h3\" weight={2}>\n                  HealthCare와 함께 쉬운 병원 관리를 경험해보세요.\n                </StyledTypography>\n              </div>\n            </div>\n          </Container>\n        </PageTransition>{' '}\n      </main>\n    </div>\n  );\n};\n\nexport default MainPage;\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\nconst ColoredButton = styled(Button)`\n  font-weight: bold;\n  margin: 5px 10px;\n  border-radius: 60px;\n  color: ${(props) => props.color || 'white'};\n  background-color: ${(props) => props.bg_color || 'black'};\n  padding: 7px 14px;\n  &:hover {\n    background-color: ${(props) => props.hv_color};\n  }\n  border: ${(props) => props.border};\n  width: ${(props) => props.width};\n`;\n\nexport default ColoredButton;\n","import React, { useState } from 'react'; //리액트 임포트\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  TableFooter,\n  //기존 테이블 관련 컴포넌트\n  TablePagination,\n  Button,\n  Input,\n  //테이블 페이지 관련 컴포넌트\n} from '@material-ui/core';\nimport medicineData from '../resources/medicine.json';\n\n/*\n  <table> 엘리먼트 뿐만 아니라 <tr>,<td>,<thead>,<tbody>\n  와 같은 추가적인 엘리먼트가 필요.\n  Material UI를 사용해서 테이블을 구성할때도 마찬가지.\n  -> <Table/>컴포넌트와 더불어\n     <TableRow/>,<TableCell/>,<TableHead>,<TableBody>,<TableContainer>\n  와 같은 컴포넌트를 함꼐 사용해야함.\n*/\n\nfunction TableCode(props) {\n  /*Hook은 함수 컴포넌트에서 React state와 생명주기 기능을\n  연동 할 수 있게해주는 함수 (only Function 스타일에서만 동작)*/\n\n  //\"page\", \"medicines\" 라는 새로운 상태 값을 정의, useState()안에 초기값 정의 가능.\n  const [page, setPage] = useState(0);\n  const [medicines, setMedicine] = useState(medicineData);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [search, setSearch] = useState('');\n\n  //페이지상태 이벤트(페이지 이동시)\n  const handleChangePage = (event, newPage) => {\n    console.log('newPage: ', newPage);\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  //Medicine 추가 이벤트처리\n  const addMedicine = (event) => {\n    setMedicine((medicineData) => [\n      ...medicineData,\n      {\n        medicine_name: 'asdasd',\n        medicine_code: 'BLAHBLAH',\n      },\n    ]);\n  };\n\n  //검색함수\n  const searchMedicine = (event) => {\n    setSearch(event.target.value);\n  };\n\n  /*\n    리액트 컴포넌트안에서 데이터를 가져오거나 구독하고,\n    DOM을 직접 조작하는 작업 : \"effects\"\n    useEffect는 함수 컴포넌트 내에서 이런 이팩트를 수행할 수 있음./\n    즉, 컴포넌트가 렌더링될때마다 특정작업을 실행할 수 있도록 하는 Hook\n  */\n\n  //테이블컴포넌트에 대한 JSX 코드\n  return (\n    <>\n      <Input onChange={searchMedicine} />\n      <Button onClick={addMedicine}>BLAH 데이터 추가</Button>\n\n      <TableContainer component={Paper}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>No</TableCell>\n              <TableCell>약 코드</TableCell>\n              <TableCell>약 타입</TableCell>\n              <TableCell>약 단위</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {medicines\n              .filter(function (element) {\n                //새로운 배열을 만들어줌\n                return element.medicine_code.includes(search);\n              })\n              .slice(page * rowsPerPage, (page + 1) * rowsPerPage)\n              .map(\n                (\n                  { medicine_id, medicine_code, medicine_type, medicine_unit },\n                  i,\n                ) => (\n                  <TableRow key={medicine_id}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {page * rowsPerPage + i + 1}\n                    </TableCell>\n                    <TableCell>{medicine_code}</TableCell>\n                    <TableCell>{medicine_type}</TableCell>\n                    <TableCell>{medicine_unit}</TableCell>\n                  </TableRow>\n                ),\n              )}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                count={medicines.length}\n                page={page}\n                rowsPerPage={rowsPerPage}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                rowsPerPageOptions={[5, 10, 25]}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </TableContainer>\n    </>\n  );\n}\n\nexport default TableCode;\n","import React from 'react';\nimport ColoredButton from './components/ColoredButton';\nimport { GoSearch } from 'react-icons/go';\nimport styled from 'styled-components';\nimport Drawer from '@material-ui/core/Drawer';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport clsx from 'clsx';\nimport {\n  Avatar,\n  Button,\n  Input,\n  InputAdornment,\n  List,\n  ListItem,\n  ListItemText,\n  makeStyles,\n  TextField,\n} from '@material-ui/core';\nimport TableCode from './components/TableCode';\n// import DenseTable from './components/patientTable';\n\n// 입력전용 부모 컴포넌트\nconst InputDiv = styled.div`\n  width: 300px;\n  padding: 10px 20px;\n  background: rgba(0, 0, 0, 0.05);\n  border-radius: 60px;\n  border: 2px solid lightgray;\n`;\n\n//Drawer 한묶음\nconst DrawerContent = styled('div')({\n  border: (props) => props.border,\n  height: 100,\n  display: 'flex',\n  background: (props) => props.bg_color || 'black',\n  padding: 20,\n});\n\n\n//환자 정보\nconst PatientInfo = styled('p')({\n  fontSize: 30,\n  fontWeight: 'bold',\n  margin: 20,\n});\n\n//drawer 헤더\nconst DrawerHeader = styled('div')({\n  display: 'flex',\n  padding: 20,\n});\n\n//drawer창 제목\nconst DrawerTitle = styled('h1')({\n  width: 300,\n  marginTop: 20,\n  height: 50,\n});\n\n//drawer 종료버튼\nconst DrawerExitButton = styled(AiOutlineClose)({\n  align: 'center',\n});\n\nconst Profile = styled('div')({\n  flexDirection: 'row',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n});\n\n//이미지\nconst PatientImage = styled(Avatar)({\n  display: 'flex',\n  height: 50,\n  width: 50,\n  margin: 20,\n});\n\n// drawer창 크기 조정\nconst useStyles = makeStyles({\n  list: {\n    width: 500,\n  },\n  fullList: {\n    width: 'auto',\n  },\n});\n\n// 메인\nconst JonghyunPage = () => {\n  const classes = useStyles();\n\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  //anchor,open => event\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (\n      event &&\n      event.type === 'keydown' &&\n      (event.key === 'Tab' || event.key === 'Shift')\n    ) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <drawerIn name=\"drawerInfo\">\n        <div style={{ width: '100%' }}>\n          <DrawerHeader>\n            <DrawerTitle>환자 상세정보</DrawerTitle>\n            <DrawerExitButton size={30} />\n          </DrawerHeader>\n          <DrawerContent bg_color=\"#f1f3f5\">\n            <PatientImage src=\"http://localhost:3000/image/dorge.jpg\" />\n            <Profile>\n              <p>김도지 / 남자</p>\n              <p>2013-12-05</p>\n            </Profile>\n          </DrawerContent>\n          <PatientInfo>연락처</PatientInfo>\n          <PatientInfo>몸무게</PatientInfo>\n          <PatientInfo>키</PatientInfo>\n          <PatientInfo>주소</PatientInfo>\n          <List>\n            {['연락처', '몸무게', '키', '주소'].map((text, index) => (\n              <ListItem button key={text}>\n                <ListItemText primary={text} />\n                <Button>asd</Button>\n              </ListItem>\n            ))}\n          </List>\n        </div>\n      </drawerIn>\n    </div>\n  );\n\n  return (\n    <>\n      <div>\n        <p>환자,임직원 관리</p>\n        <p>버튼 컴포넌트</p>\n        <hr />\n\n        <ColoredButton\n          bg_color=\"#1E4C7C\"\n          hv_color=\"navy\"\n          onClick={toggleDrawer('right', true)}\n        >\n          더보기\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#fb8500\" hv_color=\"orange\" width=\"250px\">\n          환자 정보 변경하기\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#fb8500\" hv_color=\"orange\" width=\"250px\">\n          환자 정보 수정\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton\n          size=\"small\"\n          color=\"gray\"\n          bg_color=\"white\"\n          border=\"5px solid gray\"\n        >\n          주소 찾기\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#1E4C7C\" hv_color=\"navy\">\n          검색\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#2A64F6\" hv_color=\"blue\">\n          추가\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#fb8500\" hv_color=\"orange\">\n          변경\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#d90429\" hv_color=\"red\">\n          삭제\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#DDB892\" hv_color=\"#99582a\">\n          취소\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton\n          size=\"small\"\n          color=\"gray\"\n          bg_color=\"white\"\n          border=\"5px solid gray\"\n        >\n          중복 체크\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#2A64F6\" width=\"250px\" hv_color=\"blue\">\n          직원 추가\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#fb8500\" hv_color=\"orange\" width=\"250px\">\n          직원 정보 변경\n        </ColoredButton>\n        <hr />\n\n        <ColoredButton bg_color=\"#2A64F6\" width=\"200px\" hv_color=\"blue\">\n          추가 진행하기\n        </ColoredButton>\n      </div>\n\n      <div>\n        <p>입력 컴포넌트</p>\n        <InputDiv>\n          <TextField\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <GoSearch size={25} />\n                </InputAdornment>\n              ),\n            }}\n            placeholder=\"환자 이름을 입력해주세요.\"\n            fullWidth\n          />\n        </InputDiv>\n        <hr />\n\n        <InputDiv>\n          <TextField\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <GoSearch size={25} />\n                </InputAdornment>\n              ),\n            }}\n            placeholder=\"임직원 이름을 입력해주세요.\"\n            fullWidth\n          />\n        </InputDiv>\n        <hr />\n\n        <Input placeholder=\"나머지 텍스트 입력 필드들\" fullWidth />\n        <hr />\n      </div>\n\n      <Drawer\n        anchor={'right'}\n        open={state['right']}\n        onClose={toggleDrawer('right', false)}\n      >\n        {list('right')}\n      </Drawer>\n\n      <TableCode />\n    </>\n  );\n};\n\n// 종현\n// - 임직원 관리\n//     - 임직원 검색\n//     - 임직원 추가\n//     - 임직원 상세 보기\n//     - 임직원 수정\n//     - 임직원 삭제\n// - 환자 관리\n//     - 환자 검색\n//     - 환자 상세 보기\n//     - 환자 정보 변경하기\n\nexport default JonghyunPage;\n","import DrawerHeader from 'components/common/drawer/DrawerHeader';\nimport StyledTypography from 'components/common/typography/StyledTypography';\nimport StyledInputBase from 'components/common/input/StyledInputBase';\nimport { Grid } from '@material-ui/core';\n\nconst LoginPage = () => {\n  return (\n    <div>\n      <DrawerHeader style={{ padding: '2em' }}>\n        <h1>HealthCare</h1>\n      </DrawerHeader>\n      <Grid container spacing={3} style={{ padding: '2em' }}>\n        <Grid\n          item\n          xl={7}\n          lg={7}\n          md={7}\n          sm={6}\n          xs={6}\n          style={{ fontWeight: 'bold', alignItems: 'center' }}\n        >\n          <h1>로그인</h1>\n          <Grid container style={{ marginTop: '2em' }}>\n            <Grid\n              item\n              xl={3}\n              lg={3}\n              md={3}\n              sm={4}\n              xs={6}\n              style={{ fontWeight: 'bold', alignItems: 'center' }}\n            >\n              <StyledTypography variant=\"h6\" component=\"h5\" weight={5}>\n                병원코드\n              </StyledTypography>\n            </Grid>\n            <Grid item xl={9} lg={9} md={9} sm={8} xs={6}>\n              <StyledInputBase />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid\n          item\n          xl={5}\n          lg={5}\n          md={5}\n          sm={6}\n          xs={6}\n          style={{ backgroundColor: 'blue' }}\n        >\n          <h1>그림 세팅</h1>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import React from 'react';\nimport LoginPage from './LoginPage';\n\nconst SihyunPage = () => {\n  return (\n    <div>\n      <LoginPage />\n    </div>\n  );\n};\n\nexport default SihyunPage;\n","import { Button } from '@material-ui/core';\nimport styled from 'styled-components';\n\n/**\n * 로그인 버튼 컴포넌트 (Atom)\n * @author SUNG WOOK HWANG\n */\nconst LoginButton = styled(Button)`\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  font-family: 'Lato';\n  border-radius: 0.7rem;\n  /* padding: 0.6rem; */\n  color: ${({ islogined }) => (islogined !== 'false' ? '#1E4C7C' : 'black')};\n  font-weight: 900;\n  width: 6rem;\n  font-size: 1rem;\n`;\n\nexport default LoginButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst ProfileInfo = styled.div`\n  display: flex;\n  height: 100%;\n  align-items: center;\n  margin-right: 0.5rem;\n  font-weight: 700;\n\n  div {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nconst Profile = ({ data }) => {\n  const { url, name, role } = data;\n\n  return (\n    <div\n      style={{\n        padding: '0.2rem',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'left',\n      }}\n    >\n      <ProfileInfo>\n        <div>\n          <h4 style={{ width: '100%' }}>{name}</h4>\n          <h4 style={{ width: '100%' }}>{role}</h4>\n        </div>\n      </ProfileInfo>\n      <Avatar src={url} />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport LoginButton from '../button/LoginButton';\nimport Profile from '../profile/Profile';\n\nconst PageContainer = styled.div`\n  width: 100%;\n  display: flex;\n  height: 100%;\n\n  max-height: 70px;\n  /* background-color: aliceblue; */\n\n  .left-side {\n    flex: 1;\n    min-width: 150px;\n    display: flex;\n    padding: 0.2rem;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .right-side {\n    flex: 7;\n    display: flex;\n    padding: 0.2rem;\n    justify-content: flex-end;\n    align-items: center;\n\n    .button-margin {\n      margin-left: 0.5rem;\n      margin-right: 0.5rem;\n    }\n  }\n`;\n\nconst profileInfo3 = {\n  url: '/assets/image/nailon.png',\n  name: 'Elon Musk',\n  role: 'Techno King',\n};\n\nconst PageHeader = () => {\n  const [isLogined, setLogined] = useState(false);\n\n  const handleLoginBtn = useCallback(() => {\n    setLogined((prevState) => !prevState);\n  }, []);\n\n  return (\n    <PageContainer>\n      <div className=\"left-side\">\n        <img src=\"/assets/image/logo_2.png\" alt=\"Logo\" width=\"100%\" />\n      </div>\n      <div className=\"right-side\">\n        {/* <Profile data={profileInfo1} /> */}\n        {isLogined ? <Profile data={profileInfo3} /> : ''}\n\n        {/* <Avatar className=\"button-margin\" src=\"/assets/image/doge.png\" />\n        <Avatar src=\"/assets/image/avatar.png\" /> */}\n        <LoginButton\n          className=\"button-margin\"\n          islogined={isLogined.toString()}\n          onClick={handleLoginBtn}\n        >\n          {isLogined ? 'Logout' : 'Login'}\n        </LoginButton>\n      </div>\n    </PageContainer>\n  );\n};\n\nexport default PageHeader;\n","import styled from 'styled-components';\n\nconst Sidebar = styled.div`\n  display: flex;\n\n  flex-direction: column;\n  padding: 1.3rem;\n  height: 100vh;\n  background-color: #023047;\n  color: white;\n\n  .info-container {\n    display: flex;\n    flex-direction: column;\n\n    p {\n      margin-top: 0.3rem;\n      margin-bottom: 0.3rem;\n      font-weight: 800;\n      color: white;\n    }\n\n    p:nth-child(2) {\n      font-weight: 300;\n    }\n  }\n\n  .collapse-container {\n    display: flex;\n    align-items: center;\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n\n    span {\n      display: flex;\n      align-items: center;\n      flex: 1;\n      margin-left: 0.5rem;\n      font-weight: 700;\n    }\n  }\n\n  .collapsed-container {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin-left: 2.3rem;\n    .collapsed-item {\n      display: flex;\n      margin-top: 0.5rem;\n      margin-bottom: 0.5rem;\n      align-items: center;\n      span {\n        margin-left: 1rem;\n        font-weight: 500;\n      }\n    }\n  }\n\n  .MuiDivider-light {\n    margin-top: 0.5rem;\n    margin-bottom: 0.5rem;\n    background-color: white;\n  }\n`;\n\nexport default Sidebar;\n","import React from 'react';\nimport { Divider, Collapse } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSidebarInfo } from 'redux/features/common/commonSlice';\nimport { AiOutlineCalendar } from 'react-icons/ai';\nimport { FiChevronDown } from 'react-icons/fi';\nimport { MdLocalHospital } from 'react-icons/md';\nimport { useHistory } from 'react-router-dom';\nimport Sidebar from './Sidebar';\n\nconst MenuSidebar = () => {\n  const dispatch = useDispatch();\n\n  const { diagnosis, hospital, patient } = useSelector(\n    (state) => state.common.sidebarInfo,\n  );\n  // const [isCollapsed, setCollapsed] = useState({\n  //   diagnosis: false,\n  //   hospital: false,\n  //   patient: false,\n  // });\n\n  const history = useHistory();\n\n  const handlePageChange = (page) => {\n    history.push(page);\n  };\n\n  return (\n    <Sidebar>\n      <div className=\"info-container\">\n        <p>ABC Hospital</p>\n        <p>destiny0810@naver.com</p>\n      </div>\n      <Divider light />\n      <div\n        className=\"collapse-container\"\n        onClick={() => {\n          dispatch(\n            setSidebarInfo({\n              name: 'diagnosis',\n              status: !diagnosis,\n            }),\n          );\n        }}\n      >\n        <MdLocalHospital size={28} />\n        <span>진료</span>\n        <FiChevronDown size={22} />\n      </div>\n\n      <Collapse in={diagnosis}>\n        <div className=\"collapsed-container\">\n          <div\n            className=\"collapsed-item\"\n            onClick={() => handlePageChange('/dashboard/reservation')}\n          >\n            <AiOutlineCalendar size={22} />\n            <span>진료 접수</span>\n          </div>\n          <div\n            className=\"collapsed-item\"\n            onClick={() => handlePageChange('/dashboard/diagnosis')}\n          >\n            <AiOutlineCalendar size={22} />\n            <span>진료 추가</span>\n          </div>\n          <div\n            className=\"collapsed-item\"\n            onClick={() => handlePageChange('/dashboard/diagnostic')}\n          >\n            <AiOutlineCalendar size={22} />\n            <span>진료 검사 보기</span>\n          </div>\n          <div\n            className=\"collapsed-item\"\n            onClick={() => handlePageChange('/dashboard/diagnosis-history')}\n          >\n            <AiOutlineCalendar size={22} />\n            <span>진료 기록 보기</span>\n          </div>\n        </div>\n        <Divider light />\n      </Collapse>\n\n      <div\n        className=\"collapse-container\"\n        onClick={() => {\n          dispatch(\n            setSidebarInfo({\n              name: 'hospital',\n              status: !hospital,\n            }),\n          );\n        }}\n      >\n        <MdLocalHospital size={28} />\n        <span>병원</span>\n        <FiChevronDown size={22} />\n      </div>\n\n      <Collapse in={hospital}>\n        <div className=\"collapsed-container\">\n          <div className=\"collapsed-item\">\n            <AiOutlineCalendar size={22} />\n            <span>진료 접수</span>\n          </div>\n          <div className=\"collapsed-item\">\n            <AiOutlineCalendar size={22} />\n            <span>진료 추가</span>\n          </div>\n          <div className=\"collapsed-item\">\n            <AiOutlineCalendar size={22} />\n            <span>진료 검사 보기</span>\n          </div>\n          <div className=\"collapsed-item\">\n            <AiOutlineCalendar size={22} />\n            <span>진료 기록 보기</span>\n          </div>\n        </div>\n        <Divider light />\n      </Collapse>\n\n      <div\n        className=\"collapse-container\"\n        onClick={() => {\n          dispatch(\n            setSidebarInfo({\n              name: 'patient',\n              status: !patient,\n            }),\n          );\n        }}\n      >\n        <MdLocalHospital size={28} />\n        <span>환자</span>\n        <FiChevronDown size={22} />\n      </div>\n\n      <Collapse in={patient}>\n        <div className=\"collapsed-container\">\n          <div className=\"collapsed-item\">\n            <AiOutlineCalendar size={22} />\n            <span>진료 접수</span>\n          </div>\n          <div className=\"collapsed-item\">\n            <AiOutlineCalendar size={22} />\n            <span>진료 추가</span>\n          </div>\n          <div className=\"collapsed-item\">\n            <AiOutlineCalendar size={22} />\n            <span>진료 검사 보기</span>\n          </div>\n          <div className=\"collapsed-item\">\n            <AiOutlineCalendar size={22} />\n            <span>진료 기록 보기</span>\n          </div>\n        </div>\n        <Divider light />\n      </Collapse>\n    </Sidebar>\n  );\n};\n\nexport default MenuSidebar;\n","import React, { Fragment, useState } from 'react';\nimport { Divider, Grid } from '@material-ui/core';\nimport { DatePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport { IoManOutline, IoWomanOutline } from 'react-icons/io5';\nimport useWindowSize from 'hooks/useWindowSize';\nimport PageHeader from '../../../components/common/header/PageHeader';\nimport MenuSidebar from 'components/common/sidebar/MenuSidebar';\nimport TitleHeader from '../../../components/common/header/TitleHeader';\nimport StyledContainer from 'components/common/container/StyledContainer';\nimport StyledTypography from 'components/common/typography/StyledTypography';\n\nconst SungwookPage = () => {\n  const { breakpoint } = useWindowSize();\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const [keyboardDate, handleKeyDateChange] = useState(new Date());\n\n  const [selectedGender, setSelectedGender] = useState({\n    male: false,\n    female: false,\n  });\n\n  const handleChange = (name) => {\n    console.log(name);\n    const value = selectedGender[name];\n    setSelectedGender({\n      ...selectedGender,\n      [name]: !value,\n    });\n  };\n\n  return (\n    <Fragment>\n      <header style={{ position: 'sticky', top: 0, backgroundColor: 'white' }}>\n        <PageHeader />\n        <Divider />\n      </header>\n      <main>\n        <Grid container>\n          <Grid item xs={0} sm={4} md={3} lg={2}>\n            {breakpoint !== 'xs' ? <MenuSidebar /> : ''}\n          </Grid>\n          <Grid item xs={12} sm={8} md={9} lg={10}>\n            <div style={{ height: '90vh', padding: '1rem' }}>\n              <TitleHeader>\n                <span>진료 | </span>\n                <span>진료 등록</span>\n              </TitleHeader>\n\n              <Divider light />\n\n              <DatePicker\n                disableFuture\n                openTo=\"year\"\n                format=\"yyyy/MM/DD\"\n                views={['year', 'month', 'date']}\n                value={selectedDate}\n                onChange={handleDateChange}\n              />\n\n              <KeyboardDatePicker\n                disableFuture\n                openTo=\"year\"\n                format=\"yyyy/MM/DD\"\n                views={['year', 'month', 'date']}\n                value={keyboardDate}\n                onChange={handleKeyDateChange}\n              />\n\n              <br />\n              <br />\n              <div\n                style={{ display: 'flex', maxWidth: '400px', height: '100px' }}\n              >\n                <StyledContainer\n                  bgColor=\"rgb(62,63,70)\"\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                  }}\n                  onClick={() => handleChange('male')}\n                >\n                  {selectedGender.male && (\n                    <Fragment>\n                      <IoManOutline color=\"rgb(217,217,217)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{ color: 'white', fontFamily: 'Lato' }}\n                        >\n                          남자 (Male)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                  {!selectedGender.male && (\n                    <Fragment>\n                      <IoManOutline color=\"rgb(244,213,51)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{\n                            color: 'rgb(244,213,51)',\n                            fontFamily: 'Lato',\n                          }}\n                        >\n                          남자 (Male)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                </StyledContainer>\n                <StyledContainer\n                  bgColor=\"rgb(62,63,70)\"\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                  }}\n                  onClick={() => handleChange('female')}\n                >\n                  {selectedGender.female && (\n                    <Fragment>\n                      <IoWomanOutline color=\"rgb(217,217,217)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{ color: 'white', fontFamily: 'Lato' }}\n                        >\n                          여자 (Female)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                  {!selectedGender.female && (\n                    <Fragment>\n                      <IoWomanOutline color=\"rgb(244,213,51)\" size={64} />\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'center',\n                          flex: 1,\n                        }}\n                      >\n                        <StyledTypography\n                          variant=\"subtitle1\"\n                          weight={7}\n                          style={{\n                            color: 'rgb(244,213,51)',\n                            fontFamily: 'Lato',\n                          }}\n                        >\n                          여자 (Female)\n                        </StyledTypography>\n                      </div>\n                    </Fragment>\n                  )}\n                </StyledContainer>\n              </div>\n            </div>\n          </Grid>\n        </Grid>\n      </main>\n    </Fragment>\n  );\n};\n\nexport default SungwookPage;\n","import React, { Fragment } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport HyungyoonPage from './hyungyoon';\nimport JonghyunPage from './jonghyun';\nimport SihyunPage from './sihyun';\nimport SungwookPage from './sungwook';\n\nconst TemporaryPage = () => (\n  <Fragment>\n    <Switch>\n      <Route path=\"/temporary/sihyun\" exact component={SihyunPage} />\n      <Route path=\"/temporary/hyungyoon\" exact component={HyungyoonPage} />\n      <Route path=\"/temporary/jonghyun\" exact component={JonghyunPage} />\n      <Route path=\"/temporary/sungwook\" exact component={SungwookPage} />\n    </Switch>\n  </Fragment>\n);\n\nexport default TemporaryPage;\n","import React, { Fragment } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Dashboard from './dashboard';\nimport ErrorPage from './ErrorPage';\n// import { Switch, Route, Router } from 'react-router-dom';\nimport MainPage from './main';\nimport TemporaryPage from './temporary';\n\n/**\n * Pages 컴포넌트는 페이지 주소를 라우팅 하기 위해\n * 사용되는 컴포넌트 입니다.\n *\n * 작성자 : SUNG WOOK HWANG\n * @returns {JSX.Element}\n */\nconst Pages = () => {\n  return (\n    <Fragment>\n      <Switch>\n        <Route path=\"/\" exact component={MainPage} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/temporary\" component={TemporaryPage} />\n        {/* <Route path=\"*\" component={ErrorPage} /> */}\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default Pages;\n","import React, { Fragment } from 'react';\nimport GlobalStyle from './components/common/GlobalStyles';\nimport Pages from './pages/index';\n\nconst App = () => {\n  return (\n    <Fragment>\n      <GlobalStyle />\n      <Pages />\n    </Fragment>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { StylesProvider, ThemeProvider } from '@material-ui/core/styles';\nimport { SnackbarProvider } from 'notistack';\nimport store from './redux/store';\nimport muiTheme from './components/common/CustomTheme';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@fontsource/roboto';\nimport { Fade } from '@material-ui/core';\nimport moment from 'moment';\nimport MomentUtils from '@date-io/moment';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport 'moment/locale/ko';\n\nmoment.locale('ko');\n\nReactDOM.render(\n  <BrowserRouter>\n    <StylesProvider injectFirst>\n      <ThemeProvider theme={muiTheme}>\n        <Provider store={store}>\n          <SnackbarProvider\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n            TransitionComponent={Fade}\n          >\n            <MuiPickersUtilsProvider libInstance={moment} utils={MomentUtils}>\n              <App />\n            </MuiPickersUtilsProvider>\n          </SnackbarProvider>\n        </Provider>\n      </ThemeProvider>\n    </StylesProvider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}